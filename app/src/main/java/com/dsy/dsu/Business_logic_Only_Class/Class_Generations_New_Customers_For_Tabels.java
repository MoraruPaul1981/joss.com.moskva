package com.dsy.dsu.Business_logic_Only_Class;

import android.app.Activity;
import android.content.ContentValues;
import android.content.Context;
import android.database.sqlite.SQLiteCursor;
import android.util.Log;

public class Class_Generations_New_Customers_For_Tabels {

    Context contextДляКлассДляВставкиНовогоСотрудника;
    ///
    CREATE_DATABASE Create_Database_СсылкаНАБазовыйКласс;

    public Class_Generations_New_Customers_For_Tabels(Context context) {

        contextДляКлассДляВставкиНовогоСотрудника=context;

///////TODO
          Create_Database_СсылкаНАБазовыйКласс=new CREATE_DATABASE(contextДляКлассДляВставкиНовогоСотрудника);
    }


    // TODO: 22.09.2021   ---start   fio


    // TODO: 26.03.2021 финальная вствка данных новго сотружника

    public Long МетодЗаписиСозданогоСотрудникаВБазуПоТаблицы_ФИО(ContentValues АдаптерДляСозданиеНовогоСотрудаТАблицаФИО, Activity activity) {

        ///todo САМА ВСТВКА ТАБЛИЦА ФИО

        ////
        String ТекущаяТаблицаОбработки = "fio";
//////

        Long РезультатВставкиНовогоТабеляЧерезКонтрейнерТаблицыФИО = 0l;
        try {

            ///TODO  КОНЕЦ сами данные таблица FIO только при вставке данных и ТОЛЬКО

            ///todo САМА ВСТВКА ТАБЛИЦА ФИО


            // TODO: 25.03.2021 вставка фио
           РезультатВставкиНовогоТабеляЧерезКонтрейнерТаблицыФИО = new Class_MODEL_synchronized(activity).
                    ВставкаДанныхЧерезКонтейнерТолькоПриСозданииНовогоСотрудникаУниверсальная(ТекущаяТаблицаОбработки,
                            АдаптерДляСозданиеНовогоСотрудаТАблицаФИО, ТекущаяТаблицаОбработки, "");



            // TODO: 25.03.2021 успешное вставка в таблицу ФИО


            // TODO: 22.04.2021  srart JOBschedele
            Log.d(this.getClass().getName(), "РезультатВставкиНовогоТабеляЧерезКонтрейнерТаблицыФИО "+РезультатВставкиНовогоТабеляЧерезКонтрейнерТаблицыФИО);



///TODO метод запуска формы после вставки

                    //////


                    ///////////////////////////todo не был создан сотрудник за за ТОГО ЧТО НЕ БЫЛА ВИБРАНА ОРГАНИЗЦИЯ В НАСТРОЙКАХ





            АдаптерДляСозданиеНовогоСотрудаТАблицаФИО.clear();

                // UUIDТабеляВКоторомИНадоСоздатьНовогоСотрудника=null;


                //////////////////////////////////
                Log.d(this.getClass().getName(), "РезультатВставкиНовогоТабеляЧерезКонтрейнерТаблицыФИО  " + РезультатВставкиНовогоТабеляЧерезКонтрейнерТаблицыФИО);

                // TODO: 25.03.2021 вставка таблицы ТАБЕЛЬ ПОСЛЕ ТАБЛИЦЫ ФИО




        } catch (Exception e) {
            e.printStackTrace();
            ///метод запись ошибок в таблицу
            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"
                    + Thread.currentThread().getStackTrace()[2].getLineNumber());
            new   Class_Generation_Errors(activity).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),
                    Thread.currentThread().getStackTrace()[2].getLineNumber());
        }

        return  РезультатВставкиНовогоТабеляЧерезКонтрейнерТаблицыФИО;
    }
























    // TODO: 22.09.2021  -----data_tabels




// TODO: 26.03.2021 финальная вствка данных новго сотружника

    public Long МетодЗаписиСозданогоСотрудникаВБазуПоТаблицы_Дата_Табеля(
            ContentValues АдаптерДляСозданиеНовогоСотрудаТАблицаТабель
            , Activity activity,
            int ГодПриВставкеНовогоСотрудника
            , int МЕсяцПриВставкеНовогоСотрудника, Long НовыйСгенерированныйUUIDДляТаблицы_ДатаТабеля) {


        /**
         * ////TODO  НовыйСгенерированныйUUIDДляТаблицы_ДатаТабеля  НОВЫЙ НУЖЕН НЕ ДЛЯ ВСТАВКИ А ДЛЯ ВТОРОГО ДЕЙСТВИЯ ЗАПОЛЕНИЯ ВЫХОДНЫМИ ЕСЛИ НВ НАСТРОЙКАХ ЕСТЬ КАКАЯ ФУЕНКЦИЯ И ОНА ВКЛЮЧЕНА !!!!!!!!!!!!
         */


        long РезультатВставкиНовогоТабеляЧерезКонтрейнерТаблицыТабель = 0;
        ////
        Integer Результат_ПриписиИзменнийВерсииДанныхВФонеПослеОбработкиТекущийТаблицы = 0;

        try{


            ///todo САМА ВСТВКА ТАБЛИЦА ФИО


            String ТекущаяОбрабатываемаяТаблица="data_tabels";



            // TODO: 25.03.2021 вставка табель
            РезультатВставкиНовогоТабеляЧерезКонтрейнерТаблицыТабель = new Class_MODEL_synchronized(activity).
                    ВставкаДанныхЧерезКонтейнерТолькоПриСозданииНовогоСотрудникаУниверсальная(ТекущаяОбрабатываемаяТаблица,
                            АдаптерДляСозданиеНовогоСотрудаТАблицаТабель, ТекущаяОбрабатываемаяТаблица, "");


            // TODO: 22.04.2021  srart JOBschedele
            Log.d(this.getClass().getName(), "РезультатВставкиНовогоТабеляЧерезКонтрейнерТаблицыТабель "+РезультатВставкиНовогоТабеляЧерезКонтрейнерТаблицыТабель);
            Log.i(this.getClass().getName(), "   РезультатВставкиНовогоТабеляЧерезКонтрейнерТаблицыТабель"
                    + РезультатВставкиНовогоТабеляЧерезКонтрейнерТаблицыТабель);
            // TODO: 23.09.2021  дополнительно добавляем вставку выходных дней есл  новая запсисл записалась
            if (РезультатВставкиНовогоТабеляЧерезКонтрейнерТаблицыТабель>0) {
                ///////
                Class_GRUD_SQL_Operations class_grud_sql_operationsУзнаемСохраненыйРежимРаботыССетью;


                String  РезультатКакойРежимЗаписанвБазеВЫходныеДни=new String();

                // TODO: 24.05.2021 ТРЕТИЙ КОД ЕСЛИ ПОЛЬЗОВАТЕЛЬ ЗАХОДТЕ АВТОМАТИЧЕСКОЙ УСВТУКУ В ВЫХОДЫНЕ ДНИ

                ////
                class_grud_sql_operationsУзнаемСохраненыйРежимРаботыССетью=new Class_GRUD_SQL_Operations(activity);

                ///
                class_grud_sql_operationsУзнаемСохраненыйРежимРаботыССетью. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("НазваниеОбрабоатываемойТаблицы","SuccessLogin");
                ///////
                class_grud_sql_operationsУзнаемСохраненыйРежимРаботыССетью. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("СтолбцыОбработки","mode_weekend");




                // TODO: 12.10.2021  Ссылка Менеджер Потоков

                PUBLIC_CONTENT Class_Engine_SQLГдеНаходитьсяМенеджерПотоков = new PUBLIC_CONTENT(activity);

                // TODO: 02.09.2021 exe sql

                SQLiteCursor КурсорУзнаемСохраненыйРежимРаботыССетью= (SQLiteCursor) class_grud_sql_operationsУзнаемСохраненыйРежимРаботыССетью.
                        new GetData(activity).getdata(class_grud_sql_operationsУзнаемСохраненыйРежимРаботыССетью. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций,
                        Class_Engine_SQLГдеНаходитьсяМенеджерПотоков.МенеджерПотоков,Create_Database_СсылкаНАБазовыйКласс.getССылкаНаСозданнуюБазу());

                ///////

                Log.d(this.getClass().getName(), "GetData " +КурсорУзнаемСохраненыйРежимРаботыССетью );


                //////
                if (КурсорУзнаемСохраненыйРежимРаботыССетью.getCount() > 0) {

                    КурсорУзнаемСохраненыйРежимРаботыССетью.moveToFirst();

                    РезультатКакойРежимЗаписанвБазеВЫходныеДни = КурсорУзнаемСохраненыйРежимРаботыССетью.getString(0);

                    ///
                    Log.d(activity.getClass().getName(), " РезультатКакойРежимЗаписанвБазеВЫходныеДни  " + "--" +РезультатКакойРежимЗаписанвБазеВЫходныеДни);/////











                // TODO: 24.05.2021 КОД ДЛЯ АВТОМАТИЧЕСКОГО ВЫСТАВЛЕНИЯ ВЫХОДНЫХ ДНЕЙ В ТАБЕЛЬ

                if (РезультатКакойРежимЗаписанвБазеВЫходныеДни.contentEquals("Включить")) {
                    ////


                    // TODO: 24.05.2021 вычисляем дни  нужен просто текущй месяц и год не взаписимости на табель , и вычисолчем дни

                    ContentValues КонтрейнерДляВставкиВВыходныеДниМЕткиВыходные=
                            new Class_MODEL_synchronized(activity). МетодВычисляемВыходныеДниПриСозданииНовогоТабеляАвтоРЕжим(activity,
                            ГодПриВставкеНовогоСотрудника,МЕсяцПриВставкеНовогоСотрудника);


                    // TODO: 24.05.2021 сама вставка  выходних дней

///
                    Log.w(activity.getClass().getName(), " КонтрейнерДляВставкиВВыходныеДниМЕткиВыходные  " + "--" +КонтрейнерДляВставкиВВыходныеДниМЕткиВыходные);/////




                    ///todo САМА ВСТВКА ТАБЛИЦА ФИО

                        // TODO: 25.03.2021 вставка табель
                    Integer          РезультатВставкиВЫходнихДнейЧерезКонтрейнерТаблицыТабель  = new Class_MODEL_synchronized(activity)
                            .ЛокальногоОбновлениеДанныхЧерезКонтейнерУниверсальная(ТекущаяОбрабатываемаяТаблица,
                                КонтрейнерДляВставкиВВыходныеДниМЕткиВыходные,
                                НовыйСгенерированныйUUIDДляТаблицы_ДатаТабеля,
                                "uuid");


                        ///
                        Log.d(activity.getClass().getName(), " РезультатВставкиВЫходнихДнейЧерезКонтрейнерТаблицыТабель  " + "--" +РезультатВставкиВЫходнихДнейЧерезКонтрейнерТаблицыТабель);/////




                    // TODO: 25.03.2021 код после вставки

                    if (     Результат_ПриписиИзменнийВерсииДанныхВФонеПослеОбработкиТекущийТаблицы > 0) {


                        Log.d(this.getClass().getName(), " успешная вставка новго Результат_ПриписиИзменнийВерсииДанныхВФонеПослеОбработкиТекущийТаблицы "
                                + Результат_ПриписиИзменнийВерсииДанныхВФонеПослеОбработкиТекущийТаблицы);

                        ///////////////////////////todo не был создан сотрудник за за ТОГО ЧТО НЕ БЫЛА ВИБРАНА ОРГАНИЗЦИЯ В НАСТРОЙКАХ
                    }


                    // TODO: 22.04.2021  srart JOBschedele
                    Log.d(this.getClass().getName(), "Результат_ПриписиИзменнийВерсииДанныхВФонеПослеОбработкиТекущийТаблицы "+Результат_ПриписиИзменнийВерсииДанныхВФонеПослеОбработкиТекущийТаблицы);

                    //////////
                    КонтрейнерДляВставкиВВыходныеДниМЕткиВыходные.clear();


                }

                }
            }


        } catch (Exception e) {
            e.printStackTrace();
            ///метод запись ошибок в таблицу
            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"
                    + Thread.currentThread().getStackTrace()[2].getLineNumber());
            new   Class_Generation_Errors(activity).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),
                    Thread.currentThread().getStackTrace()[2].getLineNumber());
        }

        ////
        return РезультатВставкиНовогоТабеляЧерезКонтрейнерТаблицыТабель;
    }











}
