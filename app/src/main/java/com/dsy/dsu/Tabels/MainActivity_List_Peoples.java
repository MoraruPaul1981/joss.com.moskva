package com.dsy.dsu.Tabels;import android.annotation.SuppressLint;import android.app.Activity;import android.app.ProgressDialog;import android.content.ComponentName;import android.content.Context;import android.content.Intent;import android.content.ServiceConnection;import android.content.pm.ActivityInfo;import android.content.res.Configuration;import android.database.Cursor;import android.database.DataSetObserver;import android.database.sqlite.SQLiteCursor;import android.database.sqlite.SQLiteDatabase;import android.graphics.Color;import android.graphics.Paint;import android.graphics.Typeface;import android.graphics.drawable.Drawable;import android.os.Bundle;import android.os.Handler;import android.os.IBinder;import android.os.Looper;import android.os.Message;import android.util.Log;import android.util.TypedValue;import android.view.Gravity;import android.view.View;import android.view.WindowManager;import android.view.animation.Animation;import android.view.animation.AnimationUtils;import android.widget.AdapterView;import android.widget.ArrayAdapter;import android.widget.Button;import android.widget.CheckedTextView;import android.widget.CursorAdapter;import android.widget.EditText;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.ListView;import android.widget.ScrollView;import android.widget.SimpleCursorAdapter;import android.widget.Spinner;import android.widget.TextView;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.annotation.UiThread;import androidx.appcompat.app.AlertDialog;import androidx.appcompat.app.AppCompatActivity;import androidx.constraintlayout.widget.ConstraintLayout;import com.dsy.dsu.AllDatabases.SQLTE.GetSQLiteDatabase;import com.dsy.dsu.BusinessLogicAll.Class_GRUD_SQL_Operations;import com.dsy.dsu.Errors.Class_Generation_Errors;import com.dsy.dsu.BusinessLogicAll.Class_MODEL_synchronized;import com.dsy.dsu.BusinessLogicAll.DATE.SubClassCursorLoader;import com.dsy.dsu.CnangeServers.PUBLIC_CONTENT;import com.dsy.dsu.BusinessLogicAll.SubClassUpVersionDATA;import com.dsy.dsu.Tabels.viewpagers.MainActivity_Tabel_Single_PeopleOneSwipe;import com.dsy.dsu.Services.Service_For_Public;import com.dsy.dsu.R;import com.google.android.material.dialog.MaterialAlertDialogBuilder;import com.google.android.material.floatingactionbutton.FloatingActionButton;import com.google.android.material.textview.MaterialTextView;import org.jetbrains.annotations.NotNull;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import java.util.Collections;import java.util.Date;import java.util.HashMap;import java.util.LinkedHashMap;import java.util.Locale;import java.util.Map;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeUnit;import java.util.concurrent.TimeoutException;import java.util.concurrent.locks.Condition;import java.util.concurrent.locks.ReentrantLock;import java.util.function.IntConsumer;import java.util.stream.IntStream;import io.reactivex.rxjava3.android.schedulers.AndroidSchedulers;import io.reactivex.rxjava3.core.Completable;import io.reactivex.rxjava3.functions.Action;import io.reactivex.rxjava3.functions.Predicate;import io.reactivex.rxjava3.schedulers.Schedulers;public class MainActivity_List_Peoples extends AppCompatActivity {    // TODO данные переменные обьявляються на самом активти ТАБЕЛЬ    private Spinner СпинерДата;/////спинеры для создание табеля    private Spinner СпинерЦФО;/////спинеры для создание табеля    private ScrollView ScrollViewДляВсехСотрудниковТабеля;    private   boolean РежимыПросмотраДанныхЭкрана;    private Configuration config;    private  ArrayList<String> МассивДляСпинераДаты = new ArrayList<>(); //////АКАРЛИСТ ДЛЯ ПОЛУЧЕНЫЙ НОВЫХ ДАТ    private ArrayList<String> МассивДляСпинераЦФО = new ArrayList<>(); //////АКАРЛИСТ ДЛЯ ПОЛУЧЕНЫЙ НОВЫХ ДАТ    private  TextView НазваниеДанныхВТабелеДниНедели;    private  TextView НазваниеДанныхВТабелеСНИЛС;    private   TextView НазваниеДанныхВТабелеФИО;    private   EditText СамиДанныеТабеля;    private   ArrayAdapter<String> ЛистАдаптерДляListViewВсеСотрудникиВТабеле;    private  int ПосикДня;    private  String НазваниеСтолбикаДляЛобкальногоОбноления = "";    private  String НазваниеТабеля = "";    private   String НазваниеЗагруженногТАбеля = "";    private   String ДробимДляТабеляГод, ДробимДляТебеляМесяц;    protected View КонтентТабеляКоторыйМыИБудемЗаполнятьВнутриЦикла;    private  LinkedHashMap<Integer, String> ХЭШНазваниеДнейНедели = new LinkedHashMap<>();    private  int ПолученыеКоличествоСторочек = 0;    private SQLiteDatabase sqLiteDatabase ;    private  String МесяцДляЗагрузкиТабелей = "";    private  String ГодДляЗагрузкиТабелей = "";    private  String ПубличноеIDЗагрузкиТабелей = "";    private Button КнопкаНазад;    private Button КнопкаЛеваяПередвиженияПоДанным;    private Button КнопкаПраваяПередвиженияПоДанным;    private TextView ОбщееКоличествоВТабелеСотудников;    private int КоличествоДнейвЗагружаемойМесяце;    private  boolean МыУжеВКодеУденияСотрудника = false;    private  FloatingActionButton КруглаяКнопкаСамТабель;    private   String ЛимитСоСмещениемДанных = "";    private  int ИндексДвижениеТабеляСкролл = 0;    private  int ИндексДвижениеТабеляКнопки = 0;    private  int ОбщееКоличествоЛюдейВТабелеТекущем;    private   Map<Object, Object> ХэшЛовимUUIDIDНазваниеСтолбика;    private  String ПолучениеЗначениеДоИзменения;    private  String СамоЗначениеЯчейкиТабеля;    private  ListView listActivityListPeoples; /////////TODO КОГДА НЕТ ДАННЫХ    private   Map<Integer, Long> ХэшФИОВсеСотурдникаТекущегоТабеля;    private   TextView textView3СловоТабель;    private  Cursor Курсор_ВсеСотрудникиТабеля = null;    private Context context;    private Context КонтекстСотрудникиДляТабеля;    private boolean ФлагУжеСообщалиЧтоСообщениеЧТоТАбельПроведетБыло = false;    private   Activity activity;    private   SimpleCursorAdapter AdapterSimpleMainActivityListPeoples =null;    private ProgressDialog progressDialog;    private Animation animation;    private Animation animationv3;    ///TODO компонеты табеля    private Message message;    // TODO: 09.04.2023 new varibals    private  Long MainParentUUID =0l;    private  Integer Position =0;    private  int ГодТабелей;    private  int МЕсяцТабелей;    private  int DigitalNameCFO=0;    private  String FullNameCFO;    private  String  ИмесяцвИГодСразу;    private  Long  CurrenrsСhildUUID;    private  Long  CurrenrsSelectFio;    private Service_For_Public.LocalBinderОбщий localBinderОбщий;    private     ServiceConnection serviceConnection;    @Override    protected void onCreate(Bundle savedInstanceState) {        try {            super.onCreate(savedInstanceState);            setContentView(R.layout.activity_main__tabel_listview);            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);            getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);            //  getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_HIDE_NAVIGATION  );            getWindow().addFlags(WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD                    | WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON                    | WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);            /////            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LOCKED);            getSupportActionBar().hide(); ///скрывать тул бар            КонтекстСотрудникиДляТабеля = this;            context = this;            ///TODO попытка открыть экран как full screan            Log.d(this.getClass().getName(), "   ");            /////todo данная настрока запрещает при запуке активти подскаваать клавиатуре вверх на компонеты eedittext            activity=this;///////TODO            sqLiteDatabase=    GetSQLiteDatabase.SqliteDatabase();            ////todo запрещяет поворот экрана            listActivityListPeoples = null; /////////TODO КОГДА НЕТ ДАННЫ            ХэшФИОВсеСотурдникаТекущегоТабеля = Collections.synchronizedMap(new LinkedHashMap<Integer, Long>());            ХэшЛовимUUIDIDНазваниеСтолбика = Collections.synchronizedMap(new HashMap<>());            ((Activity) КонтекстСотрудникиДляТабеля).setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);            ((Activity) КонтекстСотрудникиДляТабеля).setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LOCKED);            // Locale locale = Locale.ROOT;            Locale locale = new Locale("rus");            Locale.setDefault(locale);            config =                    getBaseContext().getResources().getConfiguration();            config.setLocale(locale);            createConfigurationContext(config);            ///TODO разное            СпинерДата = (Spinner) findViewById(R.id.СпинерТабельМесяц);            СпинерЦФО = (Spinner) findViewById(R.id.СпинерТабельДепратамент);            /////TODO КОМПОНЕТЫ ТАБЕЛЯ            ///TODO главный контйренр табеля            /////TODO Скоролл Вид            ScrollViewДляВсехСотрудниковТабеля = (ScrollView) findViewById(R.id.ГлавныйКойтейнерВсеСотрудникаВТАбеле);            ///TODO на данной КНОПКЕ МЫ МОЖЕМ ДОБАВИТЬ СОТРУДНИКА К ТАБЕЛЮ ИЛИ СОЗДАТЬ НОВОГО СОТРУДНИКА            /////////Круглая Кнопка            КруглаяКнопкаСамТабель = findViewById(R.id.КруглаяКнопкаСамТабель);//////КНОПКА СОЗДАНИЕ НОВГО ТАБЕЛЯ ИЗ ИСТОРИИ ВТОРОЙ ШАГ            КнопкаЛеваяПередвиженияПоДанным = (Button) findViewById(R.id.imageViewВСамомТабелеЛеваяСтрелка);            КнопкаПраваяПередвиженияПоДанным = (Button) findViewById(R.id.imageViewВСамомТабелеТабельПраваяСтрелка);            // ОбщееКоличествоВТабелеСотудников.setText("133");            // СОЗДАНИЯ ТАБЕЛЯ СНАЧАЛА ИСТРОИЯ ПОТОМ НА БАЗЕ ЕГО СОЗЗДАНИЕ            //////todo limit offset смеещние и огорничения загрузки данных            ЛимитСоСмещениемДанных = "0";            listActivityListPeoples = (ListView) findViewById(R.id.ListAllTabels);            // ОбщееКоличествоВТабелеСотудников            textView3СловоТабель = (TextView) findViewById(R.id.textView3СловоТабель);            ///TODO установка гравиити            СпинерДата.setGravity(Gravity.CENTER_HORIZONTAL | Gravity.CENTER_VERTICAL);            СпинерЦФО.setGravity(Gravity.CENTER_HORIZONTAL | Gravity.CENTER_VERTICAL);            textView3СловоТабель.setGravity(Gravity.CENTER_HORIZONTAL | Gravity.CENTER_VERTICAL);            //todo кнопка назад            КнопкаНазад= findViewById(R.id.imageViewСтрелкаВнутриТабеля);            // TODO: 28.01.2022  запускам ВЕСЬ КОД АТИВТИ\            animation = AnimationUtils.loadAnimation(getApplicationContext(), R.anim.slide_in_row_tabellist);            animationv3 = AnimationUtils.loadAnimation(getApplicationContext(),R.anim.slide_singletable2);            Методandler();            //TODO #1 параметры из MainActivity_List_Tabels            МетодGetVarivateActivity_List_Tabels();            МетодПриНАжатииНаКнопкуBACK();            методКруглойКнопки(КруглаяКнопкаСамТабель);            ///TODO клик ВНУТРЕНИМУ СОДЕРЖАНИ Ю LKIST VIEW C СОТРУДНИКАМИ ЧТОБЫ ПЕРЕЙТИ Н АСАМ НЕПОСТРЕДСТВЕНО ТАБЕЛЬ                     Log.d(this.getClass().getName(),"\n" + " class " + Thread.currentThread().getStackTrace()[2].getClassName() + "\n" +                    " metod " + Thread.currentThread().getStackTrace()[2].getMethodName() + "\n" +                    " line " + Thread.currentThread().getStackTrace()[2].getLineNumber() + "\n");            // TODO: 10.04.2023  новые данные            МетодЗаполняемДаннымиLIST();            методСпинерЦФО();            МетодБиндинuCлужбыPublic();        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    private void Методandler() {        message=Message.obtain(new Handler(Looper.myLooper()),()->{            try{            Bundle bundle=   message.getData();            Log.i(this.getClass().getName(),  " Атоманически установкаОбновление ПО "+                    Thread.currentThread().getStackTrace()[2].getMethodName()+                    " время " +new Date().toLocaleString() + " binderДляПолучениеМатериалов ");            Log.i(this.getClass().getName(), "bundle " +bundle);            message.recycle();        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }        });    }    @Override    protected void onStart() {        super.onStart();        try {            ////            Log.d(this.getClass().getName(),"\n" + " class " + Thread.currentThread().getStackTrace()[2].getClassName() + "\n" +                    " metod " + Thread.currentThread().getStackTrace()[2].getMethodName() + "\n" +                    " line " + Thread.currentThread().getStackTrace()[2].getLineNumber() + "\n");        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                    + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                    Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    @Override    protected void onStop() {        super.onStop();        try{            Log.d(this.getClass().getName(),"\n" + " class " + Thread.currentThread().getStackTrace()[2].getClassName() + "\n" +                    " metod " + Thread.currentThread().getStackTrace()[2].getMethodName() + "\n" +                    " line " + Thread.currentThread().getStackTrace()[2].getLineNumber() + "\n"                    + " MainParentUUID " +MainParentUUID  + "CurrenrsSelectFio "+CurrenrsSelectFio);        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                    + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                    Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    // TODO: 29.03.2021 удаление сотрудника с акттивти    private void МетодУдаленияСотрудникаLongClick(@NonNull   MaterialTextView MaterialTextViewPeople) {       MaterialTextViewPeople.setOnLongClickListener(new View.OnLongClickListener() {           @Override           public boolean onLongClick(View v) {               try{                   MaterialTextView MaterialTextViewPeople=(MaterialTextView)      v;                   Bundle bundlePepolesУдаление= (Bundle) MaterialTextViewPeople.getTag();                   MaterialTextViewPeople.setBackgroundColor(Color.GRAY);                   MaterialTextViewPeople.startAnimation(animationv3);                   // TODO: 09.04.2023 set TABEL    MAinActivbity_List_Tabels                   CurrenrsСhildUUID=   bundlePepolesУдаление.getLong("CurrenrsСhildUUID", 0l);                   bundlePepolesУдаление.getLong("CurrenrsSelectFio", 0l);                   String ФИО=   bundlePepolesУдаление.getString("ФИО", "");                   bundlePepolesУдаление.getInt("Position", 0);                   bundlePepolesУдаление.getInt("ГодТабелей", 0);                   bundlePepolesУдаление.getInt("МЕсяцТабелей",0);                   bundlePepolesУдаление.getInt("DigitalNameCFO", 0);                   bundlePepolesУдаление.getString("FullNameCFO", "");                   bundlePepolesУдаление.getString("ИмесяцвИГодСразу", "");                   message.getTarget().postDelayed(()->{                       MaterialTextViewPeople.setBackgroundColor(Color.WHITE);                       //TODO: 09.04.2023 Удаление ВыбраногоСОтурдника                       МетодСообщенииУдалениеСотрудника( "uuid", CurrenrsСhildUUID,ФИО);                       Log.d(this.getClass().getName(),"\n" + " class " + Thread.currentThread().getStackTrace()[2].getClassName() + "\n" +                               " metod " + Thread.currentThread().getStackTrace()[2].getMethodName() + "\n" +                               " line " + Thread.currentThread().getStackTrace()[2].getLineNumber() + "\n"                               + " MainParentUUID " +MainParentUUID  + "CurrenrsSelectFio "+CurrenrsSelectFio);                   },100);               } catch (Exception e) {                   e.printStackTrace();                   Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                           + Thread.currentThread().getStackTrace()[2].getLineNumber());                   new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),                           this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                           Thread.currentThread().getStackTrace()[2].getLineNumber());               }               return true;           }       });    }    private void МетодGetVarivateActivity_List_Tabels() {        try{            Intent Интент_СписокТабелей =   getIntent();            Bundle bundleИзMainActitivy_List_Tables=Интент_СписокТабелей.getExtras();            if (bundleИзMainActitivy_List_Tables!=null) {                MainParentUUID=    bundleИзMainActitivy_List_Tables.getLong("MainParentUUID", 0);                Position=    bundleИзMainActitivy_List_Tables.getInt("Position", 0);                ГодТабелей=  bundleИзMainActitivy_List_Tables.getInt("ГодТабелей", 0);                МЕсяцТабелей=  bundleИзMainActitivy_List_Tables.getInt("МЕсяцТабелей",0);                DigitalNameCFO=   bundleИзMainActitivy_List_Tables.getInt("DigitalNameCFO", 0);                FullNameCFO=  bundleИзMainActitivy_List_Tables.getString("FullNameCFO", "");                ИмесяцвИГодСразу= bundleИзMainActitivy_List_Tables.getString("ИмесяцвИГодСразу", "");                CurrenrsСhildUUID= bundleИзMainActitivy_List_Tables.getLong("CurrenrsСhildUUID", 0l);            }            Log.d(this.getClass().getName(),"\n" + " class " + Thread.currentThread().getStackTrace()[2].getClassName() + "\n" +                    " metod " + Thread.currentThread().getStackTrace()[2].getMethodName() + "\n" +                    " line " + Thread.currentThread().getStackTrace()[2].getLineNumber() + "\n"                    + " bundleИзMainActitivy_List_Tables " +bundleИзMainActitivy_List_Tables);        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                    + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                    Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    ///todo круглая кнопка для вызова создание или добавления сотркдника    private void методКруглойКнопки(FloatingActionButton круглаяКнопкаСамТабель) {        try {        круглаяКнопкаСамТабель.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {/////TODO КНОПКА КРУГЛАЯ НА АКТИВТИ В ТАБЕЛЕ ПРЕДНАЗВАНЧЕН ДЛЯ СОЗДАНИЕ НОВОГО СОТРУДНИКА ИЛИ ДОБАВЛЕНИЕ УЖЕ ДЕЙСТВУЕЩЕГО СОТРУДКА В ТАБЕЛЬ                методMessageДобавлениеСотрудников("Добавление  сотрудников" );                Log.d(this.getClass().getName(),"\n" + " class " + Thread.currentThread().getStackTrace()[2].getClassName() + "\n" +                        " metod " + Thread.currentThread().getStackTrace()[2].getMethodName() + "\n" +                        " line " + Thread.currentThread().getStackTrace()[2].getLineNumber() + "\n"                        + " MainParentUUID "+MainParentUUID );            }        });    } catch (Exception e) {        e.printStackTrace();        Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                + Thread.currentThread().getStackTrace()[2].getLineNumber());        new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                Thread.currentThread().getStackTrace()[2].getLineNumber());    }    }    //todo метод возврата к предыдущему активти    private void МетодПриНАжатииНаКнопкуBACK() {        КнопкаНазад.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                try {                    Intent ИнтентBack= МетодBackНаMainActivity_ListTabels();                    startActivity( ИнтентBack);                        Log.d(this.getClass().getName(),"\n" + " class " + Thread.currentThread().getStackTrace()[2].getClassName() + "\n" +                                " metod " + Thread.currentThread().getStackTrace()[2].getMethodName() + "\n" +                                " line " + Thread.currentThread().getStackTrace()[2].getLineNumber() + "\n"                                + " FullNameCFO "+FullNameCFO+ " MainParentUUID " +MainParentUUID                                + " ГодТабелей " +ГодТабелей +" МЕсяцТабелей " +МЕсяцТабелей   + " DigitalNameCFO "+DigitalNameCFO+                                " ИмесяцвИГодСразу " +ИмесяцвИГодСразу);                } catch (Exception e) {                    e.printStackTrace();                    Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                            " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                    new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                            Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());                }            }        });    }    //todo метод получаем даные для загружки ихв listview    private void МетодЗаполняемДаннымиLIST()   {        try {// TODO: 10.04.2023 получаем данные курсор\            // TODO: 09.04.2023  курсор самим создаваемых табеляПОСИК ДАННЫХ ЧЕРЕЗ UUID            Bundle bundleListTabels=new Bundle();            bundleListTabels.putString("СамЗапрос","  SELECT * FROM  viewtabel WHERE status_send!=? AND uuid_tabel=?" +                    "   AND fio IS NOT NULL  ");            bundleListTabels.putStringArray("УсловияВыборки" ,new String[]{String.valueOf("Удаленная"),String.valueOf( MainParentUUID)});            bundleListTabels.putString("Таблица","viewtabel");            Курсор_ВсеСотрудникиТабеля=      (Cursor)    new SubClassCursorLoader(). CursorLoaders(context, bundleListTabels);            Log.d(this.getClass().getName(), "Курсор_ВсеСотрудникиТабеля "+Курсор_ВсеСотрудникиТабеля  );                        if (Курсор_ВсеСотрудникиТабеля.getCount() > 0) {                МетолСпинерДаты();                // TODO: 10.04.2023  заполеяем данным и                МетодЗаполеняемДаннымиСотрудники(Курсор_ВсеСотрудникиТабеля);                // TODO: 10.04.2023  регистируем соушатель                МетодКодомРЕгистарцииОбозревателяКурсора();            } else {                МетодКогдаДАнныхНетИЛИОшибкаИлиНетПрав();            }            Log.d(this.getClass().getName(),"\n" + " class " + Thread.currentThread().getStackTrace()[2].getClassName() + "\n" +                    " metod " + Thread.currentThread().getStackTrace()[2].getMethodName() + "\n" +                    " line " + Thread.currentThread().getStackTrace()[2].getLineNumber() + "\n"                    + " Курсор_ВсеСотрудникиТабеля "+Курсор_ВсеСотрудникиТабеля );        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    private void МетодКодомРЕгистарцииОбозревателяКурсора() {        try{            if(Курсор_ВсеСотрудникиТабеля.getCount()>0) {                Log.d(this.getClass().getName(), " Курсор_ВсеСотрудникиТабеля.getCount()  " + Курсор_ВсеСотрудникиТабеля.getCount());                DataSetObserver   dataSetObserver= new DataSetObserver() {                    @Override                    public void onChanged() {                        super.onChanged();                        // TODO: 23.12.2021                        Log.w(this.getClass().getName(), " СРАБОТАЛ registerDataSetObserver  ---" +                                " фрагменты ПИСАТЬ ЧИТАТЬ ЧАТ КурсорДанныеДлязаписиичтнияЧата.registerDataSetObserver onChanged ");                        if (AdapterSimpleMainActivityListPeoples != null) {                            AdapterSimpleMainActivityListPeoples.changeCursor(Курсор_ВсеСотрудникиТабеля);                            AdapterSimpleMainActivityListPeoples.notifyDataSetChanged();                        }                        if (listActivityListPeoples != null) {                            listActivityListPeoples.forceLayout();                            listActivityListPeoples.deferNotifyDataSetChanged();                        }                        Log.w(this.getClass().getName(), " СРАБОТАЛ registerDataSetObserver  --- фрагменты ПИСАТЬ ЧИТАТЬ ЧАТ КурсорДанныеДлязаписиичтнияЧата.registerDataSetObserver");                    }                };                Курсор_ВсеСотрудникиТабеля.registerDataSetObserver(dataSetObserver );            }        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    @NotNull    private String МетодПредварительногоПолучениеДанных()            throws InterruptedException, ExecutionException, TimeoutException {        String УниверсальноеИмяТабеля= "";        Log.d(this.getClass().getName(), " УниверсальноеИмяТабеля " +УниверсальноеИмяТабеля );////TODO test        return УниверсальноеИмяТабеля;    }    private void МетодКогдаДАнныхНетИЛИОшибкаИлиНетПрав() {        try{            ЛистАдаптерДляListViewВсеСотрудникиВТабеле =null;            StringBuffer     БуферВсеСотурдникаТекущегоТабеля=new StringBuffer();            БуферВсеСотурдникаТекущегоТабеля.append(" *В табеле нет сотрудников*");            ArrayList     АрайЛИстВсеСотурдникаТекущегоТабеля=new ArrayList();            АрайЛИстВсеСотурдникаТекущегоТабеля.add(БуферВсеСотурдникаТекущегоТабеля.toString());            БуферВсеСотурдникаТекущегоТабеля.setLength(0);            ЛистАдаптерДляListViewВсеСотрудникиВТабеле = new ArrayAdapter<String>(this, R.layout.list_item_all_customer_tabel_color_red,                    АрайЛИстВсеСотурдникаТекущегоТабеля);                    ////TODO SET УСТАНОВКА ДАНЫХ В АДАПТЕР                    listActivityListPeoples.setAdapter(ЛистАдаптерДляListViewВсеСотрудникиВТабеле);            listActivityListPeoples.deferNotifyDataSetChanged();            listActivityListPeoples.forceLayout();            listActivityListPeoples.requestLayout();            try {                ScrollViewДляВсехСотрудниковТабеля.removeAllViews();                ScrollViewДляВсехСотрудниковТабеля.removeAllViewsInLayout();            } catch (Exception e) {                throw new RuntimeException(e);            }            ScrollViewДляВсехСотрудниковТабеля.requestLayout();            ScrollViewДляВсехСотрудниковТабеля.refreshDrawableState();        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    //todo метод не ПОСТРЕДТСВЕНО АПОЛЯНЕТ LISTVIEW ДАНЫМИ    private void МетодЗаполеняемДаннымиСотрудники(@NonNull  Cursor сursorActivvityListPeoples) {        try {            if (сursorActivvityListPeoples.getCount() > 0) {                сursorActivvityListPeoples.moveToFirst();            }            ХэшФИОВсеСотурдникаТекущегоТабеля.clear();            AdapterSimpleMainActivityListPeoples = new SimpleCursorAdapter(getApplicationContext(),                    R.layout.list_item_all_customer_tabel5,                    сursorActivvityListPeoples, new String[]{"fio"},                    new int[]{android.R.id.text1},                    CursorAdapter.FLAG_REGISTER_CONTENT_OBSERVER);  ///name            SimpleCursorAdapter.ViewBinder binding = new SimpleCursorAdapter.ViewBinder() {                ControllerSumChasy controllerSumChasy=new ControllerSumChasy();                @SuppressLint("Range")                @Override                public boolean setViewValue(View view, Cursor cursor, int columnIndex) {                    try{                        LinearLayout linearLayout=(LinearLayout) view;                    ImageView ImageViewPeople=  linearLayout.findViewById(R.id.ImageViewPeople);                     MaterialTextView MaterialTextViewPeople=   linearLayout.findViewById(R.id.MaterialTextViewPeople);                     MaterialTextView MaterialTextViewPeopeChasy=   linearLayout.findViewById(R.id.MaterialTextViewPeopeChasy);                        switch (view.getId()) {                            case android.R.id.text1:                                ПолученыеКоличествоСторочек = cursor.getCount();                                ////TODO ДДАНЫЕ ИЗ БАЗЫ САМИ ФИО                                   CurrenrsSelectFio = cursor.getLong(cursor.getColumnIndex("fio"));                                   MainParentUUID = cursor.getLong(cursor.getColumnIndex("uuid_tabel"));                                  CurrenrsСhildUUID = cursor.getLong(cursor.getColumnIndex("uuid"));                                   String ФИО =cursor.getString(cursor.getColumnIndex("name")).trim();                                @SuppressLint("Range") Boolean Getcarried_out =                                        Boolean.parseBoolean(cursor.getString(cursor.getColumnIndex("status_carried_out")));                                // TODO: 09.04.2023 Заполяем Данными MainActivityListPeoples.java                                Bundle bundleItemsListPeople=new Bundle();                                bundleItemsListPeople.putLong("MainParentUUID",MainParentUUID);                                bundleItemsListPeople.putLong("CurrenrsSelectFio",CurrenrsSelectFio);                                bundleItemsListPeople.putLong("CurrenrsСhildUUID",CurrenrsСhildUUID);                                bundleItemsListPeople.putInt("Position",          cursor.getPosition());                                bundleItemsListPeople.putString("ФИО",ФИО);                                bundleItemsListPeople.putInt("ГодТабелей",ГодТабелей);                                bundleItemsListPeople.putInt("МЕсяцТабелей",МЕсяцТабелей);                                bundleItemsListPeople.putInt("DigitalNameCFO",DigitalNameCFO);                                bundleItemsListPeople.putString("FullNameCFO",FullNameCFO);                                bundleItemsListPeople.putString("ИмесяцвИГодСразу",ИмесяцвИГодСразу);                                bundleItemsListPeople.putBoolean("carried_out",Getcarried_out);                                // TODO: 26.09.2023  Часы Отработынные                                Long ЧасыОтработанные=       controllerSumChasy.metodSumChasi(cursor);                                MaterialTextViewPeople.setTag(bundleItemsListPeople);                                MaterialTextViewPeople.setText(ФИО.trim() );                                // TODO: 26.09.2023  КЛИК ПО ДАННЫМ                                // TODO: 20.04.2023  Слушатели Клика и перехода                                методСотрудникаItemsList(MaterialTextViewPeople);                                // TODO: 26.09.2023 Слушатель Удание                                МетодУдаленияСотрудникаLongClick(MaterialTextViewPeople);                                // TODO: 26.09.2023 СМЕНЫ                                MaterialTextViewPeopeChasy.setText( ЧасыОтработанные.toString());                                // TODO: 09.04.2023 Внешинй Вид                                MaterialTextViewPeople.startAnimation(animationv3);                                // TODO: 30.01.2022  офрмления на цетр маркеруем                                Log.d(this.getClass().getName(),"\n" + " class " +                                        Thread.currentThread().getStackTrace()[2].getClassName() + "\n" +                                        " metod " + Thread.currentThread().getStackTrace()[2].getMethodName() + "\n" +                                        " line " + Thread.currentThread().getStackTrace()[2].getLineNumber() + "\n"                                        + "    ((TextView) view).getTag()) " +   MaterialTextViewPeople.getTag());                                Drawable icon = null;                                Boolean ПолученныйСтатусПроведенныйТаьельИлиНЕт =                                        Boolean.parseBoolean(cursor.getString(cursor.getColumnIndex("status_carried_out")));                                if (ПолученныйСтатусПроведенныйТаьельИлиНЕт==true) {                                    icon = getResources().getDrawable(R.mipmap.icon_dsu1_tabel_emloes_error);                                    if(ФлагУжеСообщалиЧтоСообщениеЧТоТАбельПроведетБыло==false) {                                        ФлагУжеСообщалиЧтоСообщениеЧТоТАбельПроведетБыло=true;                                    }                                }else{                                    icon = getResources().getDrawable(R.drawable.icon_newlistpeoples);                                }                                ImageViewPeople.setImageDrawable(icon);                                Log.d(this.getClass().getName(),"\n" + " class " +                                        Thread.currentThread().getStackTrace()[2].getClassName() + "\n" +                                        " metod " + Thread.currentThread().getStackTrace()[2].getMethodName() + "\n" +                                        " line " + Thread.currentThread().getStackTrace()[2].getLineNumber() + "\n"+                                        " MainParentUUID "+MainParentUUID);                                return true;                        }                    } catch (Exception e) {                        e.printStackTrace();                        Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" +                                Thread.currentThread().getStackTrace()[2].getMethodName() +                                " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                        new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),                                this.getClass().getName(),                                Thread.currentThread().getStackTrace()[2].getMethodName(),                                Thread.currentThread().getStackTrace()[2].getLineNumber());                    }                    return false;                }            };            // TODO: 26.03.2021 присваиваем simpleadapter вид наших данных            AdapterSimpleMainActivityListPeoples.setViewBinder(binding);            AdapterSimpleMainActivityListPeoples.notifyDataSetChanged();            listActivityListPeoples.setAdapter(AdapterSimpleMainActivityListPeoples);            ScrollViewДляВсехСотрудниковТабеля.fullScroll(View.FOCUS_UP);            listActivityListPeoples.requestLayout();            Log.d(this.getClass().getName(), "  ХэшФИОВсеДляПосика.size() " + ХэшФИОВсеСотурдникаТекущегоТабеля.size() +                    "  ХэшФИОВсеСотурдникаТекущегоТабеля.toString() " + ХэшФИОВсеСотурдникаТекущегоТабеля.toString());        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    // TODO: 08.04.2023 Клик на текущего сотрудника чтобы далеше ешл постомтерть детализирована    void методСотрудникаItemsList(@NonNull   MaterialTextView MaterialTextViewPeople) {        try{            MaterialTextViewPeople.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    try{                        MaterialTextView MaterialTextViewPeople=(MaterialTextView)        v;                        //MaterialTextView materialTextView=(MaterialTextView)        view.findViewById(android.R.id.text2);                        Bundle bundlePepoles= (Bundle) MaterialTextViewPeople.getTag();                        MaterialTextViewPeople.setBackgroundColor(Color.GRAY);                        MaterialTextViewPeople.startAnimation(animationv3);                        message.getTarget().postDelayed(()->{                            методПереходаИзList_People(bundlePepoles);                            Log.d(this.getClass().getName(),"\n" + " class " + Thread.currentThread().getStackTrace()[2].getClassName() + "\n" +                                    " metod " + Thread.currentThread().getStackTrace()[2].getMethodName() + "\n" +                                    " line " + Thread.currentThread().getStackTrace()[2].getLineNumber() + "\n"                                    + " FullNameCFO "+FullNameCFO+ " MainParentUUID " +MainParentUUID                                    + " ГодТабелей " +ГодТабелей +" МЕсяцТабелей " +МЕсяцТабелей   + " DigitalNameCFO "+DigitalNameCFO);                        },50);                    } catch (Exception e) {                        e.printStackTrace();                        Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                                + Thread.currentThread().getStackTrace()[2].getLineNumber());                        new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),                                this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                                Thread.currentThread().getStackTrace()[2].getLineNumber());                    }                }            });        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                    + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),                    this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                    Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    // TODO: 08.04.2023 ПЕРЕХОДИТ ИЗ PEOLESvoid методПереходаИзList_People(@NonNull Bundle bundleПереходИзList_People){        try {            Intent intentПереходИзList_People= new Intent();          //  intentПереходИзList_People.setClass(getApplicationContext(), MainActivity_Tabel_Single_People.class);            //intentПереходИзList_People.setClass(getApplicationContext(), MainActivity_Tabel_Single_PeopleViewPager.class);//TODO тест            intentПереходИзList_People.setClass(getApplicationContext(), MainActivity_Tabel_Single_PeopleOneSwipe.class);//TODO тест            intentПереходИзList_People.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);            intentПереходИзList_People.putExtras(bundleПереходИзList_People);            startActivity(intentПереходИзList_People);            Log.d(this.getClass().getName(),"\n" + " class " + Thread.currentThread().getStackTrace()[2].getClassName() + "\n" +                    " metod " + Thread.currentThread().getStackTrace()[2].getMethodName() + "\n" +                    " line " + Thread.currentThread().getStackTrace()[2].getLineNumber() + "\n"                    + " bundleПереходИзList_People "+bundleПереходИзList_People );        } catch (Exception e) {        e.printStackTrace();        Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                + Thread.currentThread().getStackTrace()[2].getLineNumber());        new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),                this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                Thread.currentThread().getStackTrace()[2].getLineNumber());    }}    /////todo метод заполения аралилта и хэшмема    private void МетодЗаполенияАрайЛистаИХэшМэпаДляПосикаПоФИО(String ПолученыеФИО,                                                               long ПолученныйUUID,String ПолученыеДатаРождения,                                                               String ПолученыеСНИЛС,String ПолученыеСуммаЧасовСотрудника) {        try{            /////TODO НЕ ПОСТРДВСТВЕНО ЗАПОЛЯНЕМ LISTVIEW  ДАННЫМИ  плюс ЧАСЫ СОТРУДНИКА СУММА            ////TODO САМО ОТОБРАЖЕНИЯ НАЗВАНИЕ ТАБЕЛЕЙ            StringBuffer        БуферВсеСотурдникаТекущегоТабеля=new StringBuffer();            БуферВсеСотурдникаТекущегоТабеля.append(ПолученыеФИО +" - "+"("  +ПолученыеСуммаЧасовСотрудника + ")");            ///            Log.d(this.getClass().getName(), "  БуферВсеСотурдникаТекущегоТабеля .size() " + БуферВсеСотурдникаТекущегоТабеля.length());            /////            // TODO: 29.04.2021 clear buffer            ///   БуферВсеСотурдникаТекущегоТабеля.setLength(0);        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    /////////////////////TODO ЗАПОЛЕНИЯ ХАШМАПА    //TODO хдесь мы запускаем метод создание и обработка самого табеля    private void МетолСпинерДаты() {        try {            ПолученыеКоличествоСторочек=0;            int  ПолученыеКоличествоСторочек= 0;            if ( Курсор_ВсеСотрудникиТабеля!=null) {                if (Курсор_ВсеСотрудникиТабеля.getCount()>0) {                    ПолученыеКоличествоСторочек = Курсор_ВсеСотрудникиТабеля.getCount();                }            }            МассивДляСпинераДаты.clear();            МассивДляСпинераДаты.add(ИмесяцвИГодСразу+ " ("+ ПолученыеКоличествоСторочек+")");            ArrayAdapter<String> АдаптерДляСпинераТабельФинал =                    new ArrayAdapter<String>(this, android.R.layout.simple_list_item_activated_1, МассивДляСпинераДаты);            // Определяем разметку для использования при выборе элемента            АдаптерДляСпинераТабельФинал.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);            // Применяем адаптер к элементу spinner            СпинерДата.setAdapter(АдаптерДляСпинераТабельФинал);            ////TODO вненшний вид табеля            СпинерДата.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {                @Override                public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {                    try {                        if (СпинерДата !=null ) {                            // TODO: 28.01.2022                            Log.d(this.getClass().getName(), " parent.getItemAtPosition(0) " + parent.getItemAtPosition(0)+                                    "view  "+view.getTag()+ "  id " +id );                            if (СпинерДата.getCount()>0  && ((TextView) parent.getChildAt(0))!=null) {                                    ((TextView) parent.getChildAt(0)).setTypeface(Typeface.SANS_SERIF,Typeface.BOLD);//Typeface boldTypeface = Typeface.defaultFromStyle(Typeface.BOLD);                                    ((TextView) parent.getChildAt(0)).setTextColor(Color.BLACK);                                    ((TextView) parent.getChildAt(0)).setPaintFlags( ((TextView) parent.getChildAt(0)).getPaintFlags() | Paint.FAKE_BOLD_TEXT_FLAG);                                    ((TextView) parent.getChildAt(0)).setBackgroundResource(R.drawable.textlines_tabel);                                    ((TextView) parent.getChildAt(0)).setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);                                    ((TextView) parent.getChildAt(0)).setTextSize(TypedValue.COMPLEX_UNIT_DIP, 12);                                FullNameCFO = String.valueOf(((TextView) parent.getChildAt(0)).getText()); /////ОПРЕДЕЛЯЕМ ТЕКУЩЕЕ ЗНАЧЕНИЕ ВНУТИРИ СПЕНИРА                                    Log.d(this.getClass().getName(), " FullNameCFO  " + FullNameCFO);                                Log.d(this.getClass().getName(),"\n" + " class " + Thread.currentThread().getStackTrace()[2].getClassName() + "\n" +                                        " metod " + Thread.currentThread().getStackTrace()[2].getMethodName() + "\n" +                                        " line " + Thread.currentThread().getStackTrace()[2].getLineNumber() + "\n"                                        + " FullNameCFO "+FullNameCFO+ " MainParentUUID " +MainParentUUID                                        + " ГодТабелей " +ГодТабелей +" МЕсяцТабелей " +МЕсяцТабелей   + " DigitalNameCFO "+DigitalNameCFO+                                        " Курсор_ВсеСотрудникиТабеля.getCount() " +Курсор_ВсеСотрудникиТабеля.getCount());                                                                    }}                    } catch (Exception e) {                        e.printStackTrace();                        ///метод запись ошибок в таблицу                        Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                                " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                        new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                                Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());                    }                }                @Override                public void onNothingSelected(AdapterView<?> parent) {                    Log.d(this.getClass().getName(), " ПолученноеЗначениеИзСпинераДата  ");                }            });        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    private void методСпинерЦФО( ) {        try{        ////////todo заполняем спинер второй  департамент табеля        МассивДляСпинераЦФО.clear();        МассивДляСпинераЦФО.add(FullNameCFO);        Log.d(this.getClass().getName(), " МассивДляВыбораВСпинерТабельФинал " + МассивДляСпинераЦФО.toString());        ArrayAdapter<String> АдаптерДляСпинераТабельФиналДепартамент =                new ArrayAdapter<String>(this, R.layout.simple_for_create_new_assintionmaterila_spinner_main, МассивДляСпинераЦФО);            АдаптерДляСпинераТабельФиналДепартамент.setDropDownViewResource(R.layout.simple_for_create_new_assintionmaterila_spinner);        СпинерЦФО.setAdapter(АдаптерДляСпинераТабельФиналДепартамент);        СпинерЦФО.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {            @Override            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {                try {                    if (СпинерЦФО.getCount()>0) {                            ((TextView) parent.getChildAt(0)).setTypeface(Typeface.SANS_SERIF,Typeface.BOLD);                            ((TextView) parent.getChildAt(0)).setPaintFlags( ((TextView) parent.getChildAt(0)).getPaintFlags() | Paint.FAKE_BOLD_TEXT_FLAG);                            ((TextView) parent.getChildAt(0)).setTextColor(Color.BLACK);                            ((TextView) parent.getChildAt(0)).setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL );                            ((TextView) parent.getChildAt(0)).setTextSize(TypedValue.COMPLEX_UNIT_DIP, 12);                            FullNameCFO = String.valueOf(((TextView) parent.getChildAt(0)).getText()); /////ОПРЕДЕЛЯЕМ ТЕКУЩЕЕ ЗНАЧЕНИЕ ВНУТИРИ СПЕНИРА                            Log.d(this.getClass().getName(), " FullNameCFO  " + FullNameCFO);                    }                    Log.d(this.getClass().getName(), " FullNameCFO  " + FullNameCFO);                } catch (Exception e) {                    e.printStackTrace();                    ///метод запись ошибок в таблицу                    Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                            " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                    new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                            Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());                }            }            @Override            public void onNothingSelected(AdapterView<?> parent) {                Log.e(this.getClass().getName(), " ПолученноеЗначениеИзСпинераДата  ");            }        });    } catch (Exception e) {        e.printStackTrace();        ///метод запись ошибок в таблицу        Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());        new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());    }    }    ///////    public void методMessageДобавлениеСотрудников(@NonNull  String ШабкаДиалога) {//  ////MESSAGEBOX ДЛЯ ИНТЕРНЕТА  ПОДКЛЮЧЕНИЕ не успешное нет связи с итрнтнето и/или файлом json        try{            int ЦветЗначек;            String ТекстПродолжениеОбновление;            CheckedTextView КнопкаИзШаблона,                    КнопкаИзПрошлогоМесяца,                    КнопкаНовыйСотрудник,                    КнопкаВыбратьСотрудника,                    КнопкаВыход;            ConstraintLayout constraintLayoutВозможностьДобавитьЧтевертуюКнопку=(ConstraintLayout) getLayoutInflater().inflate(R.layout.chetirek_nopkistyle,null);            ////            final AlertDialog DialogBox = new MaterialAlertDialogBuilder(this)                    .setTitle(ШабкаДиалога)                    .setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {                        @Override                        public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {                            Log.d(this.getClass().getName(), "  Кнопка закрыть");                        }                        @Override                        public void onNothingSelected(AdapterView<?> parent) {                            Log.d(this.getClass().getName(), "  Кнопка закрыть");                        }                    })                    .setIcon(R.drawable.icon_dsu1_new_customer2)                    .setView(constraintLayoutВозможностьДобавитьЧтевертуюКнопку)                    .show();            ///TODO кнеопки обработки создать сотрудника или его потобрать            КнопкаВыбратьСотрудника=DialogBox.findViewById(R.id.textView6YcheGotobCustomers);            КнопкаВыбратьСотрудника.setPadding(0,0,60,0);            КнопкаВыбратьСотрудника.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    try{                        Log.d(this.getClass().getName(), "  Кнопка КнопкаВыбратьСотрудника");                        КнопкаВыбратьСотрудника.toggle();                        message.getTarget().postDelayed(()->{                            DialogBox.dismiss();                            Log.d(this.getClass().getName(), " " );                            Intent ИнтентВыбратьСотрудника = new Intent();                             ИнтентВыбратьСотрудника.setClass(getApplicationContext(), MainActivity_Find_Customers.class);                                Bundle dataВыбратьСотрудника=new Bundle();                                dataВыбратьСотрудника.putLong("MainParentUUID", MainParentUUID);                                dataВыбратьСотрудника.putInt("Position",    Position);                                dataВыбратьСотрудника.putInt("ГодТабелей",     ГодТабелей);                                 dataВыбратьСотрудника.putInt("МЕсяцТабелей", МЕсяцТабелей);                                  dataВыбратьСотрудника.putInt("DigitalNameCFO",  DigitalNameCFO);                                 dataВыбратьСотрудника.putString("FullNameCFO", FullNameCFO);                                dataВыбратьСотрудника.putString("ИмесяцвИГодСразу",    ИмесяцвИГодСразу);                                dataВыбратьСотрудника.putLong("CurrenrsСhildUUID",  CurrenrsСhildUUID);                            ИнтентВыбратьСотрудника.putExtras(dataВыбратьСотрудника);                            startActivity(ИнтентВыбратьСотрудника);// TODO: 17.04.2023                            Log.d(this.getClass().getName(),"\n" + " class " + Thread.currentThread().getStackTrace()[2].getClassName() + "\n" +                                    " metod " + Thread.currentThread().getStackTrace()[2].getMethodName() + "\n" +                                    " line " + Thread.currentThread().getStackTrace()[2].getLineNumber() + "\n"                                    + " dataВыбратьСотрудника "+dataВыбратьСотрудника);                        },150);                    } catch (Exception e) {                        e.printStackTrace();                        Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                                + Thread.currentThread().getStackTrace()[2].getLineNumber());                        new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                                Thread.currentThread().getStackTrace()[2].getLineNumber());                    }}            });/////TODO КНОПКА СОЗДАНИЯ НОВОГО СОТРУДКНИКА            КнопкаНовыйСотрудник=DialogBox.findViewById(R.id.textView1NewCustomers);            КнопкаНовыйСотрудник.setPadding(0,0,60,0);            КнопкаНовыйСотрудник.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    Log.d(this.getClass().getName(), "  КнопкаНовыйСотрудник ");                    try{                        КнопкаНовыйСотрудник.toggle();                        message.getTarget().postDelayed(()->{                            DialogBox.dismiss();                            Intent ИнтентНовыйСотрудник= new Intent();                            ИнтентНовыйСотрудник.setClass(getApplicationContext(), MainActivity_New_Cusomers.class);                            Bundle bundleНовыйСотрудник=new Bundle();                            bundleНовыйСотрудник.putLong("MainParentUUID", MainParentUUID);                            bundleНовыйСотрудник.putInt("Position",    Position);                            bundleНовыйСотрудник.putInt("ГодТабелей",     ГодТабелей);                            bundleНовыйСотрудник.putInt("МЕсяцТабелей", МЕсяцТабелей);                            bundleНовыйСотрудник.putInt("DigitalNameCFO",  DigitalNameCFO);                            bundleНовыйСотрудник.putString("FullNameCFO", FullNameCFO);                            bundleНовыйСотрудник.putString("ИмесяцвИГодСразу",    ИмесяцвИГодСразу);                            bundleНовыйСотрудник.putLong("CurrenrsСhildUUID",  CurrenrsСhildUUID);                            ИнтентНовыйСотрудник.putExtras(bundleНовыйСотрудник);                            startActivity(ИнтентНовыйСотрудник);                            Log.d(this.getClass().getName(),"\n" + " class " + Thread.currentThread().getStackTrace()[2].getClassName() + "\n" +                                    " metod " + Thread.currentThread().getStackTrace()[2].getMethodName() + "\n" +                                    " line " + Thread.currentThread().getStackTrace()[2].getLineNumber() + "\n"                                    + " bundleНовыйСотрудник " +bundleНовыйСотрудник);                        },250);                    } catch (Exception e) {                        e.printStackTrace();                        Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                                + Thread.currentThread().getStackTrace()[2].getLineNumber());                        new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                                Thread.currentThread().getStackTrace()[2].getLineNumber());                    }}            });///////////////////////////TODO ЧЕТВЕРТАЯ КНОПКА            КнопкаИзШаблона=DialogBox.findViewById(R.id.textViewFromISCHABLONA);            КнопкаИзШаблона.setPadding(0,0,60,0);            КнопкаИзШаблона.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    try{                        Log.d(this.getClass().getName(), " КнопкаИзШаблона ");                        КнопкаИзШаблона.toggle();                        message.getTarget().postDelayed(()->{                            DialogBox.dismiss();                            Log.d(this.getClass().getName(), " Переход на  Шаблоны");                            Intent Интент_ЗапускИзСозданогоШаблона = new Intent();                            Интент_ЗапускИзСозданогоШаблона.setClass(getApplicationContext(), MainActivity_New_Templates.class);                            Интент_ЗапускИзСозданогоШаблона.setAction("FromList_Pepoles.class");                            Bundle bundleСозданогоШаблона=new Bundle();                            bundleСозданогоШаблона.putLong("MainParentUUID", MainParentUUID);                            bundleСозданогоШаблона.putInt("Position",    Position);                            bundleСозданогоШаблона.putInt("ГодТабелей",     ГодТабелей);                            bundleСозданогоШаблона.putInt("МЕсяцТабелей", МЕсяцТабелей);                            bundleСозданогоШаблона.putInt("DigitalNameCFO",  DigitalNameCFO);                            bundleСозданогоШаблона.putString("FullNameCFO", FullNameCFO);                            bundleСозданогоШаблона.putString("ИмесяцвИГодСразу",    ИмесяцвИГодСразу);                            bundleСозданогоШаблона.putLong("CurrenrsСhildUUID",  CurrenrsСhildUUID);                            Интент_ЗапускИзСозданогоШаблона.putExtras(bundleСозданогоШаблона);                            startActivity(Интент_ЗапускИзСозданогоШаблона);                            Log.d(this.getClass().getName(),"\n" + " class " + Thread.currentThread().getStackTrace()[2].getClassName() + "\n" +                                    " metod " + Thread.currentThread().getStackTrace()[2].getMethodName() + "\n" +                                    " line " + Thread.currentThread().getStackTrace()[2].getLineNumber() + "\n"                                    + " bundleСозданогоШаблона " +bundleСозданогоШаблона);                        },250);                    } catch (Exception e) {                        e.printStackTrace();                        Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                                " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                        new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                                Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());                    }                }            });///////////////////////////TODO ПЯТАЯ КНОПКА            КнопкаИзПрошлогоМесяца=DialogBox.findViewById(R.id.textView3SapolnitFrrombackmezaz);            КнопкаИзПрошлогоМесяца.setPadding(0,0,60,0);            КнопкаИзПрошлогоМесяца.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    try{                        КнопкаИзПрошлогоМесяца.toggle();                        progressDialog= new ProgressDialog(activity);                        progressDialog.setIndeterminate(true);                        progressDialog.setTitle("Выполнение");                        progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);                        progressDialog.setCanceledOnTouchOutside(false);                        progressDialog.setCancelable(false);                        if(!         progressDialog.isShowing()){                            progressDialog.show();                        }                        progressDialog.setMessage("Из прошлого месяца...");                            try {                            Intent ИнтентИзПрошлыхПериодов = new Intent("ЗапускЗаполенеияИзПрошлыхМесяцев");                            Bundle dataляЗаполенияТабеляИзПрошлыхПериодов=new Bundle();                            dataляЗаполенияТабеляИзПрошлыхПериодов.putLong("MainParentUUID", MainParentUUID);                            dataляЗаполенияТабеляИзПрошлыхПериодов.putInt("Position",    Position);                            dataляЗаполенияТабеляИзПрошлыхПериодов.putInt("ГодТабелей",     ГодТабелей);                            dataляЗаполенияТабеляИзПрошлыхПериодов.putInt("МЕсяцТабелей", МЕсяцТабелей);                            dataляЗаполенияТабеляИзПрошлыхПериодов.putInt("DigitalNameCFO",  DigitalNameCFO);                            dataляЗаполенияТабеляИзПрошлыхПериодов.putString("FullNameCFO", FullNameCFO);                            dataляЗаполенияТабеляИзПрошлыхПериодов.putString("ИмесяцвИГодСразу",    ИмесяцвИГодСразу);                            dataляЗаполенияТабеляИзПрошлыхПериодов.putLong("CurrenrsСhildUUID",  CurrenrsСhildUUID);                            ИнтентИзПрошлыхПериодов.putExtras(dataляЗаполенияТабеляИзПрошлыхПериодов);                                // TODO: 18.04.2023  создаем табеля из ПРОшглого месяца                                 localBinderОбщий.getService().МетодГлавныйPublicPO(getApplicationContext(),ИнтентИзПрошлыхПериодов,progressDialog);                                //////////20.15                            Log.d(this.getClass().getName(),"\n" + " class " + Thread.currentThread().getStackTrace()[2].getClassName() + "\n" +                                    " metod " + Thread.currentThread().getStackTrace()[2].getMethodName() + "\n" +                                    " line " + Thread.currentThread().getStackTrace()[2].getLineNumber() + "\n");                            DialogBox.dismiss();                                DialogBox.cancel();                        } catch (Exception e) {                            e.printStackTrace();                            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                            new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());                        }                    } catch (Exception e) {                        e.printStackTrace();                        Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                                " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                        new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                                Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());                    }                }            });            ///TODO КНОПКА ЗАКРЫТИЕ СООБЩЕНИЯ            КнопкаВыход=DialogBox.findViewById(R.id.textView7Exit);            КнопкаВыход.setPadding(0,0,60,0);            КнопкаВыход.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    try{                        Log.d(this.getClass().getName(), "  Кнопка добавить уже сущетсвующего сотрудника ");                        КнопкаВыход.toggle();                        message.getTarget().postDelayed(()->{                            DialogBox.dismiss();                        },250);                    } catch (Exception e) {                        e.printStackTrace();                        Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                                " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                        new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                                Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());                    }                }            });        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                    + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                    Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    @NonNull    private Intent МетодBackНаMainActivity_ListTabels() {        Intent ИнтентBack = new Intent();        try{        ИнтентBack.setClass(getApplicationContext(), MainActivity_List_Tabels.class);        Bundle     bundlebroadcastReceiverИзПрошлыхМесяцев=new Bundle();        bundlebroadcastReceiverИзПрошлыхМесяцев.putLong("MainParentUUID", MainParentUUID);        bundlebroadcastReceiverИзПрошлыхМесяцев.putInt("Position", Position);        bundlebroadcastReceiverИзПрошлыхМесяцев.putInt("ГодТабелей", ГодТабелей);        bundlebroadcastReceiverИзПрошлыхМесяцев.putInt("МЕсяцТабелей",МЕсяцТабелей);        bundlebroadcastReceiverИзПрошлыхМесяцев.putInt("DigitalNameCFO", DigitalNameCFO);        bundlebroadcastReceiverИзПрошлыхМесяцев.putString("FullNameCFO", FullNameCFO.trim());        bundlebroadcastReceiverИзПрошлыхМесяцев.putString("ИмесяцвИГодСразу", ИмесяцвИГодСразу.trim());        bundlebroadcastReceiverИзПрошлыхМесяцев.putLong("CurrenrsСhildUUID",  CurrenrsСhildUUID);        ИнтентBack.putExtras(bundlebroadcastReceiverИзПрошлыхМесяцев);            // TODO: 10.04.2023            Log.d(this.getClass().getName(),"\n" + " class " + Thread.currentThread().getStackTrace()[2].getClassName() + "\n" +                    " metod " + Thread.currentThread().getStackTrace()[2].getMethodName() + "\n" +                    " line " + Thread.currentThread().getStackTrace()[2].getLineNumber() + "\n"                    + " bundlebroadcastReceiverИзПрошлыхМесяцев " +bundlebroadcastReceiverИзПрошлыхМесяцев);        } catch (Exception e) {        e.printStackTrace();        Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                + Thread.currentThread().getStackTrace()[2].getLineNumber());        new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                Thread.currentThread().getStackTrace()[2].getLineNumber());    }        return ИнтентBack;    }    //TODO метод получени месяа для записи в одну колонку ОБРАБОТКА ДАТЫ ДЛЯ КУРСОРА НЕ НОВЫЕ ДАННЫЕ А УЖЕ СУЩЕТСВУЮЩИЕ--МЕСЯЦ    private int  МетодПолучениниеКурсораМЕсяцДата(@NotNull String ДатаКоторуюНадоПеревестиИзТекставЦифру) {        Calendar calendar =null;        try{            if (ДатаКоторуюНадоПеревестиИзТекставЦифру!=null) {                String[] ДелимМЕсяцИгод =ДатаКоторуюНадоПеревестиИзТекставЦифру.split(" ");                System.out.println( " " + ДелимМЕсяцИгод [0]);                SimpleDateFormat formatмесяц = new SimpleDateFormat("LLLL  yyyy", new Locale("ru"));                Date date = formatмесяц.parse(ДатаКоторуюНадоПеревестиИзТекставЦифру.trim());                calendar = Calendar.getInstance(new Locale("ru"));                calendar.setTime(date);                System.out.println(calendar.get(Calendar.YEAR));                System.out.println(calendar.get(Calendar.MONTH)+1);                System.out.println(calendar.get(Calendar.DAY_OF_MONTH));                System.out.println(new SimpleDateFormat("MMMM").format(calendar.getTime()));            }        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),                    this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }        return   calendar.get(Calendar.MONTH)+1;    }    //TODO метод получени месяа для записи в одну колонку ОБРАБОТКА ДАТЫ ДЛЯ КУРСОРА НЕ НОВЫЕ ДАННЫЕ А УЖЕ СУЩЕТСВУЮЩИЕ--ГОД    private int  МетодПолучениниеКурсораГОДДата(String ДатаКоторуюНадоПеревестиИзТекставЦифру)  {        Calendar calendar =null;        try{            String[] ДелимМЕсяцИгод =ДатаКоторуюНадоПеревестиИзТекставЦифру.split(" ");            System.out.println( " " + ДелимМЕсяцИгод [1]);            SimpleDateFormat formatгод = new SimpleDateFormat("LLLL  yyyy");            Date date = formatгод.parse(ДатаКоторуюНадоПеревестиИзТекставЦифру.trim());            calendar = Calendar.getInstance(new Locale("ru"));            calendar.setTime(date);            System.out.println(calendar.get(Calendar.YEAR));            System.out.println(calendar.get(Calendar.MONTH)+1);            System.out.println(calendar.get(Calendar.DAY_OF_MONTH));            System.out.println(new SimpleDateFormat("yyyy").format(calendar.getTime()));        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),                    this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }        return   calendar.get(Calendar.YEAR);    }    //TODO  конец метод получени месяа для записи в одну колонку ОБРАБОТКА ДАТЫ ДЛЯ КУРСОРА НЕ НОВЫЕ ДАННЫЕ А УЖЕ СУЩЕТСВУЮЩИЕ--МЕСЯЦ    ////todo метод полчение огранизации при запуске программы    Long МетодПолучениеОрганизацииНепосрдственодляДанногоСОтрудника() throws InterruptedException, ExecutionException, TimeoutException {        ///////        Long названиеорганизациидлясотркдника=0l;        try{////TODO КУРСОР ПРОВЕЯЕТ ПЕРВЫЙ ЭТО ЗАПУСК ИЛИ НЕТ            SQLiteCursor Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего = null;            ////////            try {               /*         Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего =                                new Class_MODEL_synchronized(getApplicationContext()).КурсорУниверсальныйДляБазыДанных("settings_tabels",                                        new String[]{"organizations"}, "organizations IS NOT NULL", null,                                        null, null, "date_update DESC", "1");//"settings_tabels", "date_update","id=","1",null,null,null,null*/                // TODO: 26.08.2021 НОВЫЙ ВЫЗОВ НОВОГО КЛАСС GRUD - ОПЕРАЦИИ                Class_GRUD_SQL_Operations class_grud_sql_operationsОрганизацииНепосрдственодляДанногоСОтрудника;                class_grud_sql_operationsОрганизацииНепосрдственодляДанногоСОтрудника=new Class_GRUD_SQL_Operations(getApplicationContext());                ///                class_grud_sql_operationsОрганизацииНепосрдственодляДанногоСОтрудника.concurrentHashMapНабор.put("НазваниеОбрабоатываемойТаблицы",                        "settings_tabels");                ///////                class_grud_sql_operationsОрганизацииНепосрдственодляДанногоСОтрудника.concurrentHashMapНабор.put("СтолбцыОбработки","organizations");                //                class_grud_sql_operationsОрганизацииНепосрдственодляДанногоСОтрудника.concurrentHashMapНабор.put("ФорматПосика","organizations IS NOT NULL ");                ///"_id > ?   AND _id< ?"                //////                  /*      class_grud_sql_operations. concurrentHashMapНабор.put("УсловиеПоиска1",МЕсяцВвидеЦифрыДляКурсора);                        ///                        class_grud_sql_operations. concurrentHashMapНабор.put("УсловиеПоиска2",ГОДВвидеЦифрыДляКурсора);                        //                     ///   class_grud_sql_operations. concurrentHashMapНабор.put("УсловиеПоиска3","Удаленная");////УсловиеПоискаv4,........УсловиеПоискаv5 .......                        ////TODO другие поля*/                ///classGrudSqlOperations. concurrentHashMapНабор.put("ПоляГрупировки",null);                ////                //class_grud_sql_operations. concurrentHashMapНабор.put("УсловиеГрупировки",null);                ////                class_grud_sql_operationsОрганизацииНепосрдственодляДанногоСОтрудника.concurrentHashMapНабор.put("УсловиеСортировки","date_update");                ////                class_grud_sql_operationsОрганизацииНепосрдственодляДанногоСОтрудника.concurrentHashMapНабор.put("УсловиеЛимита","1");                ////                // TODO: 12.10.2021  Ссылка Менеджер Потоков                PUBLIC_CONTENT  Class_Engine_SQLГдеНаходитьсяМенеджерПотоков =new PUBLIC_CONTENT (getApplicationContext());                // TODO: 27.08.2021  ПОЛУЧЕНИЕ ДАННЫХ ОТ КЛАССА GRUD-ОПЕРАЦИИ                Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего= (SQLiteCursor)  class_grud_sql_operationsОрганизацииНепосрдственодляДанногоСОтрудника.                        new GetData(getApplicationContext()).getdata(class_grud_sql_operationsОрганизацииНепосрдственодляДанногоСОтрудника.concurrentHashMapНабор,                        Class_Engine_SQLГдеНаходитьсяМенеджерПотоков.МенеджерПотоков,  sqLiteDatabase);                ///////                Log.d(this.getClass().getName(), "GetData "+Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего  );            } catch (Exception e) {                //  Block of code to handle errors                e.printStackTrace();                ///метод запись ошибок в таблицу                Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                        + Thread.currentThread().getStackTrace()[2].getLineNumber());                new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                        Thread.currentThread().getStackTrace()[2].getLineNumber());            }            ///TODO УДАЛЕМ ПАМЯТЬ            if (Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего.getCount() > 0) { //TODO ЕСЛИ ДАННЫЙ UUID НЕ ПУСТОЙ ЭТО ЗНАЧИТ ЧТО ЭТОТ ТАБЕЛЬ УЖЕ СУЩЕТСВЕТ И НАМ НАДО ОБНОВИТЬ                ////TODO ТАБЕЛЬ УЖЕ ЕСТЬ И МЫ ЕГО ОБНОЫЛЕНИЯ ПубличноеИмяНовогоТабеля                //todo определяем есть uuid в строчке или нет                Log.d(this.getClass().getName(), "Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего  " +                        Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего.getCount());                Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего.moveToFirst();                Log.d(this.getClass().getName(), " Курсор_ПонятьМыВставляемВПУстойТабельСотрудникаИЛиОбновлеемЕго.getString(1) " +                        Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего.getString(0));                названиеорганизациидлясотркдника= Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего.getLong(0);            }            ///todo вырубаем курсор            Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего.close();            ///        } catch (Exception e) {            //  Block of code to handle errors            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                    + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                    Thread.currentThread().getStackTrace()[2].getLineNumber());        }        return  названиеорганизациидлясотркдника;    }/*    for (String key : hashmap.keySet())    {        for (list : hashmap.get(key))        {            //list.toString()        }    }*/    // TODO: 09.04.2023  метод удаление сотрудника    void МетодСообщенииУдалениеСотрудника(@NonNull  String  СтолбикаДляУдаления, @NonNull  Long CurrenrsСhildUUID,@NonNull String  ФИО) {        Boolean ФлагВыясняемПроведенныйТабельИлиНет = false;        try {            Class_GRUD_SQL_Operations class_grud_sql_operations;            class_grud_sql_operations=new Class_GRUD_SQL_Operations(getApplicationContext());            class_grud_sql_operations.                    concurrentHashMapНабор.put("НазваниеОбрабоатываемойТаблицы","viewtabel");//data_tabels            class_grud_sql_operations.                    concurrentHashMapНабор.put("СтолбцыОбработки","*");            class_grud_sql_operations.                    concurrentHashMapНабор.put("ФорматПосика","uuid=? ");            ///"_id > ?   AND _id< ?"            class_grud_sql_operations.                    concurrentHashMapНабор.put("УсловиеПоиска1",CurrenrsСhildUUID);            class_grud_sql_operations.                    concurrentHashMapНабор.put("УсловиеСортировки","date_update");//DESC            ////            class_grud_sql_operations.                    concurrentHashMapНабор.put("УсловиеЛимита","1");            // TODO: 12.10.2021  Ссылка Менеджер Потоков            PUBLIC_CONTENT  Class_Engine_SQLГдеНаходитьсяМенеджерПотоков =new PUBLIC_CONTENT (getApplicationContext());            // TODO: 27.08.2021  ПОЛУЧЕНИЕ ДАННЫХ ОТ КЛАССА GRUD-ОПЕРАЦИИ          Cursor  Курсор_ИщемПроведенЛиТАбельИлиНЕт= (SQLiteCursor)  class_grud_sql_operations.                    new GetData(getApplicationContext()).getdata(class_grud_sql_operations.                          concurrentHashMapНабор,                    Class_Engine_SQLГдеНаходитьсяМенеджерПотоков.МенеджерПотоков,  sqLiteDatabase);            Log.d(this.getClass().getName(), "GetData " +Курсор_ИщемПроведенЛиТАбельИлиНЕт );            if(Курсор_ИщемПроведенЛиТАбельИлиНЕт.getCount()>0){                Курсор_ИщемПроведенЛиТАбельИлиНЕт.moveToFirst();                Log.d(this.getClass().getName(), " Курсор_ИщемПУбличныйIDКогдаегоНетВстатике " + Курсор_ИщемПроведенЛиТАбельИлиНЕт.getCount());                int ИндексКурсор_ИщемПУбличныйIDКогдаегоНетВстатике= Курсор_ИщемПроведенЛиТАбельИлиНЕт.getColumnIndex("status_carried_out");                ФлагВыясняемПроведенныйТабельИлиНет = Boolean.parseBoolean( Курсор_ИщемПроведенЛиТАбельИлиНЕт.getString(ИндексКурсор_ИщемПУбличныйIDКогдаегоНетВстатике));                Log.d(this.getClass().getName(), " ФлагВыясняемПроведенныйТабельИлиНет " + ФлагВыясняемПроведенныйТабельИлиНет);            }            // TODO: 03.09.2021 поле            if (ФлагВыясняемПроведенныйТабельИлиНет==false) {                Log.d(this.getClass().getName(), "  ФИНАЛ создание нового сотрудника ");                СообщениеВыборУдлаляниИлиНЕтСотрудникаИзБазы("Удаление сотрудника",                        "Удалить сотрудника ?: "+ФИО+"\n",  CurrenrsСhildUUID, true)  ;            }else{                Toast.makeText(getApplicationContext(), "Табель выбраного сотрудника проведен !!!!", Toast.LENGTH_LONG).show();            }        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                    + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                    Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    ///todo сообщение    @UiThread    protected void СообщениеВыборУдлаляниИлиНЕтСотрудникаИзБазы(@NonNull String ШабкаДиалога,                                                                @NonNull String СообщениеДиалога,                                                                @NonNull  Long  CurrenrsСhildUUID,                                                                @NonNull boolean статус ) {        ///////СОЗДАЕМ ДИАЛОГ ДА ИЛИ НЕТ///////СОЗДАЕМ ДИАЛОГ ДА ИЛИ НЕТ        try {//////сам вид            final AlertDialog alertDialog = new MaterialAlertDialogBuilder(this)                    .setTitle(ШабкаДиалога)                    .setMessage(СообщениеДиалога)                    .setPositiveButton("Да", null)                    .setNegativeButton("Нет", null)                    .setIcon(R.drawable.icon_dsu1_delete_customer)                    .show();/////////кнопка            final Button MessageBoxУдалениеСотрудникаИзТабеля = alertDialog.getButton(AlertDialog.BUTTON_POSITIVE);            MessageBoxУдалениеСотрудникаИзТабеля .setOnClickListener(new View.OnClickListener() {                ///MessageBoxUpdate метод CLICK для DIALOBOX                @Override                public void onClick(View v) {                    //удаляем с экрана Диалог                    try{                    alertDialog.dismiss();                    message.getTarget().post(()->{                        Long РезультатУдалениеКонкертногоСотрудникаИзТабеля=           МетодУдалениеСотрудникаИзТабеля("uuid",CurrenrsСhildUUID);                        Log.d(this.getClass().getName(),"\n" + " class " + Thread.currentThread().getStackTrace()[2].getClassName() + "\n" +                                " metod " + Thread.currentThread().getStackTrace()[2].getMethodName() + "\n" +                                " line " + Thread.currentThread().getStackTrace()[2].getLineNumber() + "\n"                                + " FullNameCFO "+FullNameCFO+ " MainParentUUID " +MainParentUUID                                + " ГодТабелей " +ГодТабелей +" CurrenrsСhildUUID " +CurrenrsСhildUUID   + " DigitalNameCFO "+DigitalNameCFO+                                " РезультатУдалениеКонкертногоСотрудникаИзТабеля " +РезультатУдалениеКонкертногоСотрудникаИзТабеля);                    });                } catch (Exception e) {                    e.printStackTrace();                    Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                            + Thread.currentThread().getStackTrace()[2].getLineNumber());                    new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                            Thread.currentThread().getStackTrace()[2].getMethodName(),                            Thread.currentThread().getStackTrace()[2].getLineNumber());                }                }            });            /////////кнопка            final Button MessageBoxУдалениеСотрудникаИзТабеляОтмена = alertDialog.getButton(AlertDialog.BUTTON_NEGATIVE);            MessageBoxУдалениеСотрудникаИзТабеляОтмена.setOnClickListener(new View.OnClickListener() {                ///MessageBoxUpdate метод CLICK для DIALOBOX                @Override                public void onClick(View v) {                    //удаляем с экрана Диалог                    alertDialog.dismiss();                }            });        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                    + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                    Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    //todo метод удаление сотрудника из табеля    private Long МетодУдалениеСотрудникаИзТабеля(String СтолбикУдалениея,Long СамоЗначениеUUID ) {        final long[] РезультатУдалениеСотрудникаИзТаблея = {0};        try{            Log.d(this.getClass().getName()," СтолбикУдалениея "+СтолбикУдалениея+ " СамоЗначениеUUID " +СамоЗначениеUUID);            String ТаблицыДляОбработкиУдалние="data_tabels";            ProgressDialog progressDialogДляудалениеОдногоотрудника=new ProgressDialog(this);            progressDialogДляудалениеОдногоотрудника.setIndeterminate(true);            progressDialogДляудалениеОдногоотрудника.setTitle("Удаление сотрудника");            progressDialogДляудалениеОдногоотрудника.setMessage("Удаление...");            progressDialogДляудалениеОдногоотрудника.setProgressStyle(ProgressDialog.STYLE_SPINNER);            progressDialogДляудалениеОдногоотрудника.setCanceledOnTouchOutside(false);            progressDialogДляудалениеОдногоотрудника.setCancelable(false);            progressDialogДляудалениеОдногоотрудника.show();            ReentrantLock reentrantLock=new ReentrantLock();        Condition condition= reentrantLock.newCondition();            // TODO: 12.10.2021  Ссылка Менеджер Потоков            Completable completableУдалениеСотрудникаИзЛистаТАбедя=Completable                    .fromAction(new Action() {                        @Override                        public void run() throws Throwable {                            // TODO: 10.08.202                            reentrantLock.lock();                            // TODO: 18.03.2023  получаем ВЕСИЮ ДАННЫХ                            Long РезультатУвеличинаяВерсияВнутриСамогоТабелСтрудника =                                    new SubClassUpVersionDATA().МетодПовышаемВерсииMODIFITATION_Client(   ТаблицыДляОбработкиУдалние,getApplicationContext() );                            Log.d(this.getClass().getName(), " РезультатУвеличинаяВерсияВнутриСамогоТабелСтрудника  " + РезультатУвеличинаяВерсияВнутриСамогоТабелСтрудника);                            Log.w(this.getClass().getName(),   "РЕЗУЛЬТАТ УДАЛДЕНИЕ ОДНОГО СОТРУДНИКА РезультатУвеличинаяВерсияВнутриСамогоТабелСтрудника  "                                    + РезультатУвеличинаяВерсияВнутриСамогоТабелСтрудника);                            /////                            РезультатУдалениеСотрудникаИзТаблея[0] = new Class_MODEL_synchronized(getApplicationContext()).                                    УдалениеДанныхЧерезКонтейнерУниверсальная(ТаблицыДляОбработкиУдалние, СтолбикУдалениея, СамоЗначениеUUID,                                            "status_send", "Удаленная");                            if (РезультатУдалениеСотрудникаИзТаблея[0] > 0) {                                ///todo ДАННЫЙ КОД ИЗМЕНЯЕТ ВЕРИСЮ ДАННЫХ                                activity.runOnUiThread(new Runnable() {                                    @Override                                    public void run() {                                        progressDialogДляудалениеОдногоотрудника.setMessage("Удаление...");                                    }                                });                                Log.d(getApplicationContext().getClass().getName(), "РезультатУвеличинаяВерсияВнутриСамогоТабелСтрудника "                                        +РезультатУвеличинаяВерсияВнутриСамогоТабелСтрудника );                                ///ПослеУспешнойОперациии записать в табблицу версии данных на клиенте                                // TODO: 03.09.2021  получение ПО НОВОМУ ДВИЖКУ                                Class_GRUD_SQL_Operations  classGrudSqlOperationsУдалениеСотрудникаИзТаблея;                                classGrudSqlOperationsУдалениеСотрудникаИзТаблея=new Class_GRUD_SQL_Operations(getApplicationContext());                                classGrudSqlOperationsУдалениеСотрудникаИзТаблея.                                        concurrentHashMapНабор.put("НазваниеОбрабоатываемойТаблицы",ТаблицыДляОбработкиУдалние);                                classGrudSqlOperationsУдалениеСотрудникаИзТаблея.                                        concurrentHashMapНабор.put("ФлагТипИзменениеВерсииДанныхЛокальнаяСервернаяИлиОба","Локальное");//Локальное  //  Серверный  // ЛокальныйСерверныйОба                                // TODO: 01.07.2021  после локальной обнолвения поробуем вотрунть синхронизацию локальную  в фоне и порстмортрим что будет                                Log.w(this.getClass().getName(),   "РЕЗУЛЬТАТ УДАЛДЕНИЕ ОДНОГО СОТРУДНИКА РезультатУвеличинаяВерсияВнутриСамогоТабелСтрудника  "                                        + РезультатУвеличинаяВерсияВнутриСамогоТабелСтрудника);                                ///                                classGrudSqlOperationsУдалениеСотрудникаИзТаблея.                                        concurrentHashMapНабор.put(" " +                                                "ПередоваемоеЗначенияДляТаблицы_MODIFITATION_Client_КотороеНадоЗаписать",РезультатУвеличинаяВерсияВнутриСамогоТабелСтрудника);///  "ЛокальныйСерверныйОба"    ПОСЛЕ КАК ПРИШЛИ ВНЕШНИЕ ДАННЫЕ                                ///                                ///TODOРЕЗУЛЬТА изменения версии данных                                Integer        Результат_ПриписиИзменнийВерсииДанных=                                        (Integer)  classGrudSqlOperationsУдалениеСотрудникаИзТаблея.                                                new ChangesVesionData(getApplicationContext()).                                                changesvesiondata(classGrudSqlOperationsУдалениеСотрудникаИзТаблея.                                                                concurrentHashMapНабор,                                                        new PUBLIC_CONTENT(getApplicationContext()).МенеджерПотоков                                                        ,  sqLiteDatabase);//                                Log.d(getApplicationContext().getClass().getName(), "Результат_ПриписиИзменнийВерсииДанныхВФонеПриСменеОрганизации "                                        +Результат_ПриписиИзменнийВерсииДанных );                                Log.d(this.getClass().getName(), "Результат_ПриписиИзменнийВерсииДанных " +Результат_ПриписиИзменнийВерсииДанных );                                if(Результат_ПриписиИзменнийВерсииДанных==null){                                    Результат_ПриписиИзменнийВерсииДанных=0;                                }                                condition.await(500, TimeUnit.MILLISECONDS);                                condition.signal();                                reentrantLock.unlock();                                Log.w(this.getClass().getName(), "Результат_ПриписиИзменнийВерсииДанных" + Результат_ПриписиИзменнийВерсииДанных);                            }                        }                    })                    .subscribeOn(Schedulers.single())                    .observeOn(AndroidSchedulers.mainThread())                    .doOnComplete(new Action() {                        @Override                        public void run() throws Throwable {                            //TODO ЗАПУСКАЕМ ФУТУРЕ                            activity.runOnUiThread(new Runnable() {                                @Override                                public void run() {                                    // TODO: 30.01.2022 Сообщеам Observer что изменилибьс данные в адаптере AdapterCursor                                    Курсор_ВсеСотрудникиТабеля.deactivate();                                    Курсор_ВсеСотрудникиТабеля.requery();                                    AdapterSimpleMainActivityListPeoples.getCursor().requery();                                    AdapterSimpleMainActivityListPeoples.notifyDataSetChanged();                                    МетодЗаполняемДаннымиLIST();                                /*     onStart();                                    onResume();*/                                    Log.w(this.getClass().getName(), "  Курсор_ВсеСотрудникиТабеля " + Курсор_ВсеСотрудникиТабеля);                                    Log.d(this.getClass().getName()," РезультатУдалениеСотрудникаИзТаблея "+ РезультатУдалениеСотрудникаИзТаблея[0]);                                    ///TODO СООБЩЕНИЕ О РЕЗУЛЬТАТОВ                                }                            });                        }                    })                    .onErrorComplete(new Predicate<Throwable>() {                        @Override                        public boolean test(Throwable throwable) throws Throwable {                            Log.e(this.getClass().getName(), "Результат_ПриписиИзменнийВерсииДанных throwable " + throwable.getMessage().toString());                            return false;                        }                    })                    .doAfterTerminate(new Action() {                        @Override                        public void run() throws Throwable {                            //TODO ЗАПУСКАЕМ ФУТУРЕ                            activity.runOnUiThread(new Runnable() {                                @Override                                public void run() {                                    // TODO: 30.01.2022 Сообщеам Observer что изменилибьс данные в адаптере AdapterCursor                                    Log.w(this.getClass().getName(), "  Курсор_ВсеСотрудникиТабеля " + Курсор_ВсеСотрудникиТабеля);                                    Log.d(this.getClass().getName()," РезультатУдалениеСотрудникаИзТаблея "+ РезультатУдалениеСотрудникаИзТаблея[0]);                                    ///TODO СООБЩЕНИЕ О РЕЗУЛЬТАТОВ                                    if (РезультатУдалениеСотрудникаИзТаблея[0] >0){                                        listActivityListPeoples.deferNotifyDataSetChanged();                                        listActivityListPeoples.forceLayout();                                        СпинерДата.forceLayout();                                        СпинерЦФО.forceLayout();                                    }else{                                        СообщениеПослеУдаленияСотрудникаИзТабеля("Оповещение",  "Операция удаление сотрудника не прошла ",false);                                    }                                    progressDialogДляудалениеОдногоотрудника.dismiss();                                    progressDialogДляудалениеОдногоотрудника.cancel();                                }                            });                        }                    });            completableУдалениеСотрудникаИзЛистаТАбедя.subscribe();            Log.w(this.getClass().getName(), "РезультатУдалениеСотрудникаИзТаблея[0] РЕЗУЛЬТАТ УДАЛЕНИЯ ТАБЕЛЯ " + РезультатУдалениеСотрудникаИзТаблея[0]);            //////////        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }        return    РезультатУдалениеСотрудникаИзТаблея[0];    }    ///todo  конец метода удаления третий обработчки нажатия    ///todo сообщение    @UiThread    protected void СообщениеПослеУдаленияСотрудникаИзТабеля(String ШабкаДиалога,  String СообщениеДиалога,boolean Статус) {        ///////СОЗДАЕМ ДИАЛОГ ДА ИЛИ НЕТ///////СОЗДАЕМ ДИАЛОГ ДА ИЛИ НЕТ//////сам вид        int Значек;        if (Статус){            Значек  =R.drawable.icon_dsu1_tabel_info;        }else{            Значек  =R.drawable.icon_dsu1_delete_customer;        }        final AlertDialog alertDialog = new MaterialAlertDialogBuilder(this)                .setTitle(ШабкаДиалога)                .setMessage(СообщениеДиалога)                .setPositiveButton("ОК", null)                .setIcon(Значек)                .show();/////////кнопка        final Button MessageBoxUpdateСоздатьТабель = alertDialog.getButton(AlertDialog.BUTTON_POSITIVE);        MessageBoxUpdateСоздатьТабель.setOnClickListener(new View.OnClickListener() {            ///MessageBoxUpdate метод CLICK для DIALOBOX            @Override            public void onClick(View v) {                //удаляем с экрана Диалог                alertDialog.dismiss();                Log.d(this.getClass().getName(), "  ФИНАЛ после удалание сотрудуника ");                //TODO  второе действие заполенние контентом  в табеля в TableLyзаполения табеля из базы через элемент TableLauy                ///// МетодЗаполненияАлайЛИстаНовымМЕсцевНовогоТабеля( МесяцТабеляФинал);                ///TODO запускаем возврат на предыдущее активывти после успешного удаление сотрудника                ///МетодЗапускаетСотрудниковПослеУспешногоУдалениеСотрудника();                //todo            }        });    }    public void МетодБиндинuCлужбыPublic() {        try {            Intent intentЗапускPublicService = new Intent(context, Service_For_Public.class);        serviceConnection=        new ServiceConnection() {                @Override                public void onServiceConnected(ComponentName name, IBinder service) {                    try {                        if (service.isBinderAlive()) {                            // TODO: 16.11.2022                            localBinderОбщий = (Service_For_Public.LocalBinderОбщий) service;                            Log.d(context.getClass().getName(), "\n"                                    + " время: " + new Date() + "\n+" +                                    " Класс в процессе... " + this.getClass().getName() + "\n" +                                    " метод в процессе... " + Thread.currentThread().getStackTrace()[2].getMethodName()                                    + "   service.pingBinder() " + service.pingBinder());                        }                    } catch (Exception e) {                        e.printStackTrace();                        Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                                + Thread.currentThread().getStackTrace()[2].getLineNumber());                        new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                                Thread.currentThread().getStackTrace()[2].getLineNumber());                    }                }                @Override                public void onServiceDisconnected(ComponentName name) {                    try {                        localBinderОбщий = null;                        Log.d(getApplicationContext().getClass().getName(), "\n"                                + " время: " + new Date() + "\n+" +                                " Класс в процессе... " + this.getClass().getName() + "\n" +                                " метод в процессе... " + Thread.currentThread().getStackTrace()[2].getMethodName()                                + "    onServiceDisconnected  localBinderОбщий" + localBinderОбщий);                    } catch (Exception e) {                        e.printStackTrace();                        Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                                + Thread.currentThread().getStackTrace()[2].getLineNumber());                        new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                                Thread.currentThread().getStackTrace()[2].getMethodName(),                                Thread.currentThread().getStackTrace()[2].getLineNumber());                        // TODO: 11.05.2021 запись ошибок                    }                }            };            bindService(intentЗапускPublicService,serviceConnection     ,Context.BIND_AUTO_CREATE );            Log.d(getApplicationContext().getClass().getName(), "\n"                    + " время: " + new Date() + "\n+" +                    " Класс в процессе... " + this.getClass().getName() + "\n" +                    " метод в процессе... " + Thread.currentThread().getStackTrace()[2].getMethodName()                    + "    onServiceDisconnected  localBinderОбщий" + localBinderОбщий);        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                    + Thread.currentThread().getStackTrace()[2].getLineNumber());            new Class_Generation_Errors(context).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                    Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    // TODO: 26.09.2023    class ControllerSumChasy{        Long metodSumChasi(@NonNull Cursor cursorGetChasy){          ArrayList<Long> integerArrayListЧасы=new ArrayList<>();            try{                IntStream.iterate(1, i -> i + 1).limit(31 ).parallel().forEachOrdered(new IntConsumer() {                    @Override                    public void accept(int valueЧасы) {                      String Дни="d"+valueЧасы;                     String ЧасыОтработанные=   cursorGetChasy.getString(cursorGetChasy.getColumnIndex(Дни));                        if (ЧасыОтработанные!=null && !ЧасыОтработанные.isEmpty()  && ЧасыОтработанные.chars().allMatch( Character::isDigit )) {                            integerArrayListЧасы.add( Long.parseLong(ЧасыОтработанные));                        }                        Log.d(getApplicationContext().getClass().getName(), "\n"                                + " время: " + new Date() + "\n+" +                                " Класс в процессе... " + this.getClass().getName() + "\n" +                                " метод в процессе... " + Thread.currentThread().getStackTrace()[2].getMethodName()                                + "    onServiceDisconnected  cursorGetChasy" + cursorGetChasy+ " ЧасыОтработанные " +ЧасыОтработанные);                    }                });                Log.d(getApplicationContext().getClass().getName(), "\n"                        + " время: " + new Date() + "\n+" +                        " Класс в процессе... " + this.getClass().getName() + "\n" +                        " метод в процессе... " + Thread.currentThread().getStackTrace()[2].getMethodName()                        + "    onServiceDisconnected  cursorGetChasy" + cursorGetChasy+ " integerArrayListЧасы " +integerArrayListЧасы.size());        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                    + Thread.currentThread().getStackTrace()[2].getLineNumber());            new Class_Generation_Errors(context).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                    Thread.currentThread().getStackTrace()[2].getLineNumber());        }            return     integerArrayListЧасы.stream().mapToLong(Long::valueOf).count();        }    }}