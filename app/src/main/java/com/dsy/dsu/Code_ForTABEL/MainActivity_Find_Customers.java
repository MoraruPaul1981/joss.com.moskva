package com.dsy.dsu.Code_ForTABEL;// TODO: 08.09.2021  ------------------------import android.app.Activity;import android.app.ProgressDialog;import android.content.ContentValues;import android.content.Context;import android.content.Intent;import android.content.pm.ActivityInfo;import android.content.res.Configuration;import android.database.Cursor;import android.database.sqlite.SQLiteCursor;import android.graphics.drawable.Drawable;import android.os.Bundle;import android.os.Handler;import android.os.Looper;import android.os.Message;import android.text.Editable;import android.text.TextWatcher;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.view.WindowManager;import android.widget.AdapterView;import android.widget.BaseAdapter;import android.widget.Button;import android.widget.CursorAdapter;import android.widget.EditText;import android.widget.ImageView;import android.widget.ListView;import android.widget.ScrollView;import android.widget.SimpleCursorAdapter;import android.widget.TextView;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.annotation.UiThread;import androidx.appcompat.app.AlertDialog;import androidx.appcompat.app.AppCompatActivity;import com.dsy.dsu.AllDatabases.CREATE_DATABASE;import com.dsy.dsu.Business_logic_Only_Class.Class_GRUD_SQL_Operations;import com.dsy.dsu.Business_logic_Only_Class.DATE.Class_Generation_Data;import com.dsy.dsu.Business_logic_Only_Class.Class_Generation_Errors;import com.dsy.dsu.Business_logic_Only_Class.Class_Generation_UUID;import com.dsy.dsu.Business_logic_Only_Class.Class_Generation_Weekend_For_Tabels;import com.dsy.dsu.Business_logic_Only_Class.Class_MODEL_synchronized;import com.dsy.dsu.Business_logic_Only_Class.PUBLIC_CONTENT;import com.dsy.dsu.Business_logic_Only_Class.SubClassGetPublicId;import com.dsy.dsu.Business_logic_Only_Class.SubClassUpVersionDATA;import com.dsy.dsu.R;import com.google.android.material.dialog.MaterialAlertDialogBuilder;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Collections;import java.util.Date;import java.util.GregorianCalendar;import java.util.LinkedHashMap;import java.util.LinkedList;import java.util.List;import java.util.Locale;import java.util.Map;import java.util.TimeZone;import java.util.concurrent.TimeUnit;import java.util.concurrent.locks.Condition;import java.util.concurrent.locks.ReentrantLock;import io.reactivex.rxjava3.core.Flowable;import io.reactivex.rxjava3.functions.Action;import io.reactivex.rxjava3.functions.Consumer;import io.reactivex.rxjava3.schedulers.Schedulers;public class MainActivity_Find_Customers extends AppCompatActivity {    private   Configuration config;    private ScrollView  ГлавныйКонтейнерДляПосикаТабелей; ////главный linelayuout    private Activity activity;    private CREATE_DATABASE   Create_Database_СсылкаНАБазовыйКласс;    private List<String> АрайЛИстФИОВсеДляПосика=  Collections.synchronizedList(new LinkedList<String>());    private  Map<Long, String> ХэшФИОВсеДляПосика;    private ProgressDialog progressDialog;    private  String finalПоискФИОЧерезLIKE;    private   Integer  ИндексСтрокКомпонентовТабеля=0;    private  Button     КнопкаОтправкиСотрудникаДляТабеля;    private  EditText   ЗначениеПоискаФИОИзменяетПользоатель ;    private    String FullNameCFO;    private    String ИмесяцвИГодСразу;    private Long MainParentUUID;    private  Integer Position;    private Long CurrenrsСhildUUID;    private  Integer МЕсяцТабелей;    private  Integer ГодТабелей;    private   Integer DigitalNameCFO;    private ListView ЛистСДаннымиФИО;    private   Button КнопкаНазад;    private  Cursor Курсор_ПолучаемВсюТаюлицуФИОДляПосикаТабеля=null;    private    Context context;    private   ScrollView ГлавныйКойтейнерПоискаФИОСотрудника;    private Message  message;    @Override    protected void onCreate(Bundle savedInstanceState) {        try{            super.onCreate(savedInstanceState);            context =this;            getSupportActionBar().hide(); ///скрывать тул бар            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);            getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);            ХэшФИОВсеДляПосика=     Collections.synchronizedMap(new LinkedHashMap<Long, String>());            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LOCKED);            activity=this;            getWindow().addFlags(WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD                    | WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON                    | WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);            Create_Database_СсылкаНАБазовыйКласс=new CREATE_DATABASE(getApplicationContext());            setContentView(R.layout.activity_main__find_customer);            Log.d(this.getClass().getName(), "   ");            Locale locale = new Locale("rus");            Locale.setDefault(locale);            config =                    getBaseContext().getResources().getConfiguration();            config.setLocale(locale);            createConfigurationContext(config);            Log.d(  this.getClass().getName(), " метод посика уже существующего сотрудника в базе андройжа");            ГлавныйКонтейнерДляПосикаТабелей = (ScrollView ) findViewById(R.id.ГлавныйКойтейнерПоискаФИОСотрудника);            КнопкаОтправкиСотрудникаДляТабеля = (Button) findViewById(R.id.КнопкаОтправкиСотрудникаДляТабеля);            ЗначениеПоискаФИОИзменяетПользоатель = (EditText) findViewById(R.id.editTextДляПосикаСотрудникаСоздаваемогоТабеля);            ЛистСДаннымиФИО = (ListView) findViewById(R.id.ЛистДляПосикаПоТабелюРодительская);            ГлавныйКойтейнерПоискаФИОСотрудника  = (ScrollView) findViewById(R.id. ГлавныйКойтейнерПоискаФИОСотрудника);            ЗначениеПоискаФИОИзменяетПользоатель.addTextChangedListener(СлушательПолученияДанных);            КнопкаНазад= findViewById(R.id.imagimageViewСтрелкаНазадПодборСотрудник);            ЛистСДаннымиФИО.setBackgroundResource(R.drawable.textlines_tabel_row_color_green_mini);            Методandler();            ///////////// //TODO пришли два значения месяц и год после успешного создание ТАБЕЛЯ            методGetVaribalesToActivityFindCustomers();            // TODO: 17.04.2023            Log.d(this.getClass().getName(),"\n" + " class " + Thread.currentThread().getStackTrace()[2].getClassName() + "\n" +                    " metod " + Thread.currentThread().getStackTrace()[2].getMethodName() + "\n" +                    " line " + Thread.currentThread().getStackTrace()[2].getLineNumber() + "\n");        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            // TODO: 01.09.2021 метод вызова            new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    @Override    protected void onStart() {        super.onStart();        try{            ///todo созадние кода для возврата на предыдущее актвити            МетодПриНАжатииНаКнопкуBACK();            МетодПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск(null);            МетодОбработкиКликаПоЯчейкамСотрудникаВыбранным();            ////todo метод обработки кнопки котрая и отправляеть подобраных сотрудников для ТАБЕЛЯ  в другую активити            МетодРаботуКнопкиКотораяОтправляетПодобранныхСотрудников();        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            // TODO: 01.09.2021 метод вызова            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    //todo метод возврата к предыдущему активти    private void МетодПриНАжатииНаКнопкуBACK() {        КнопкаНазад.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Log.d(this.getClass().getName(), " кликнем для созданни новго сотрдника при нажатии  ");                ///todo код которыц возврящет предыдущий актвитики кнопка back                методBackToActivityListPeoples();            }        });    }    private void методGetVaribalesToActivityFindCustomers() {        try{            Intent ИнтентGetVaribalseFindCustomers = getIntent();          Bundle bundleFindCustomers=(Bundle)  ИнтентGetVaribalseFindCustomers.getExtras();            MainParentUUID=    bundleFindCustomers.getLong("MainParentUUID", 0);            Position=    bundleFindCustomers.getInt("Position", 0);            ГодТабелей=  bundleFindCustomers.getInt("ГодТабелей", 0);            МЕсяцТабелей=  bundleFindCustomers.getInt("МЕсяцТабелей",0);            DigitalNameCFO=   bundleFindCustomers.getInt("DigitalNameCFO", 0);            FullNameCFO=  bundleFindCustomers.getString("FullNameCFO", "");            ИмесяцвИГодСразу= bundleFindCustomers.getString("ИмесяцвИГодСразу", "");            CurrenrsСhildUUID= bundleFindCustomers.getLong("CurrenrsСhildUUID", 0l);            // TODO: 17.04.2023            Log.d(this.getClass().getName(),"\n" + " class " + Thread.currentThread().getStackTrace()[2].getClassName() + "\n" +                    " metod " + Thread.currentThread().getStackTrace()[2].getMethodName() + "\n" +                    " line " + Thread.currentThread().getStackTrace()[2].getLineNumber() + "\n"  +  "bundleFindCustomers " +bundleFindCustomers.toString());        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }/////TODO МЕТОД ПОИСКА И ЗАГРУЩКИ ВСЕХ ПОЛЬЗОВАТЕЛЬ ГОТОВЫ И ПОИК ИХ ЧЕРЕЗ LIKE    protected void МетодПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск(String ПоискФИОЧерезLIKE)            throws InterruptedException {        Class_GRUD_SQL_Operations class_grud_sql_operationsДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск;        try {            finalПоискФИОЧерезLIKE = ПоискФИОЧерезLIKE;            //////TODO ПРИ ПЕРВОМ ЗАПУСКЕ КОГДА Ы НИЧЕГО НЕ ВЫБРАЛИ И ПЕРВЙ ЗАПУС ПОСЫЛВАЕТ ЧТОВ СТРОКИ            if (finalПоискФИОЧерезLIKE == null) {                ///                //////todo если пустой то без like                Log.d(this.getClass().getName(), "finalПоискФИОЧерезLIKE  " + finalПоискФИОЧерезLIKE);                ////                //////todo выбор только like                ////TODO ПОЛУЧАЕМ ВСЕ ДАННЫЕ ПО ТАБЛИЦУ ФИО ДЛЯ ПОСИКА                class_grud_sql_operationsДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск=new Class_GRUD_SQL_Operations(getApplicationContext());                ///                class_grud_sql_operationsДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск.concurrentHashMapНабор.put("НазваниеОбрабоатываемойТаблицы","fio");                ///////                class_grud_sql_operationsДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск.concurrentHashMapНабор.put("СтолбцыОбработки","name,_id,uuid,BirthDate,snils");                //            /*        class_grud_sql_operations. concurrentHashMapНабор.put("ФорматПосика","uuid=?    AND status_send !=? AND month_tabels=? AND  year_tabels =? AND fio IS NOT NULL ");                    ///"_id > ?   AND _id< ?"                    //////                    class_grud_sql_operations. concurrentHashMapНабор.put("УсловиеПоиска1",finalПолученныйUUID);                    ///                    class_grud_sql_operations. concurrentHashMapНабор.put("УсловиеПоиска2","Удаленная");                    ///                    class_grud_sql_operations. concurrentHashMapНабор.put("УсловиеПоиска3",МЕсяцДляКурсораТабелей);                    //                    class_grud_sql_operations. concurrentHashMapНабор.put("УсловиеПоиска4",ГодДляКурсораТабелей);////УсловиеПоискаv4,........УсловиеПоискаv5 .......*/                ////TODO другие поля                ///classGrudSqlOperations. concurrentHashMapНабор.put("ПоляГрупировки",null);                ////                //class_grud_sql_operations. concurrentHashMapНабор.put("УсловиеГрупировки",null);                ////                class_grud_sql_operationsДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск.concurrentHashMapНабор.put("УсловиеСортировки","name ASC");                ////                /// class_grud_sql_operations. concurrentHashMapНабор.put("УсловиеЛимита","1");                ////                // TODO: 12.10.2021  Ссылка Менеджер Потоков                PUBLIC_CONTENT  Class_Engine_SQLГдеНаходитьсяМенеджерПотоков =new PUBLIC_CONTENT(getApplicationContext());                // TODO: 27.08.2021  ПОЛУЧЕНИЕ ДАННЫХ ОТ КЛАССА GRUD-ОПЕРАЦИИ                Курсор_ПолучаемВсюТаюлицуФИОДляПосикаТабеля= (SQLiteCursor)  new Class_GRUD_SQL_Operations(getApplicationContext()).                        new GetData(getApplicationContext()).getdata(class_grud_sql_operationsДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск.                                concurrentHashMapНабор,                        Class_Engine_SQLГдеНаходитьсяМенеджерПотоков.МенеджерПотоков                        ,Create_Database_СсылкаНАБазовыйКласс.getССылкаНаСозданнуюБазу());                Log.d(this.getClass().getName(), "GetData "+Курсор_ПолучаемВсюТаюлицуФИОДляПосикаТабеля  );/*                // TODO: 07.09.2021  _old                Курсор_ПолучаемВсюТаюлицуФИОДляПосикаТабеля = new Class_MODEL_synchronized(getApplicationContext()).                        КурсорУниверсальныйДляБазыДанных("fio", new String[]{"name,_id,uuid,BirthDate,snils"},                                null, null, null, null, "name ASC", null);///"SELECT name  FROM MODIFITATION_Client WHERE name=?",НазваниеТаблицНаСервере +"%"  // KEY_NAME + " LIKE ?"                // new String[] { filter+"%" }, // new String[] {"%"+ filter+ "%" }, n                Log.d(this.getClass().getName(), " UBLIC_CONTENT.  АрайЛИстФИОВсеДляПосикаПослеПосика.size()  " + PUBLIC_CONTENT.АрайЛИстФИОВсеДляПосикаПослеПосика.size() +                        " Курсор_ПолучаемВсюТаюлицуФИОДляПосикаТабеля .getCount() " + Курсор_ПолучаемВсюТаюлицуФИОДляПосикаТабеля.getCount());*/                /////TODO если справочник был уже загружен то мы его не заполянм а с него и загружемся                ////todo проверяем куроср                МетодЗаполненияАктивтиДаннымиИзБазыДляПосикаПоФИО();                Log.d(this.getClass().getName(), " загрузка справочника ФИО без распарсивания а сразу");                //todo КУРСОР ЧЕРЕЗ ПОИСК LIKE  ПОСИК ЧЕРЕЗ LIKE  КОГДА ПОЛЬЗОВАТЕЛЬ ВЫБРАН ЧТО ТО КОНТЕРТНО            } else if (finalПоискФИОЧерезLIKE.length() > 0) {                Log.d(this.getClass().getName(), "finalПоискФИОЧерезLIKE  " + finalПоискФИОЧерезLIKE);                final String ВПотокеfinalПоискФИОЧерезLIKE = finalПоискФИОЧерезLIKE;                //////todo выбор только like                ////TODO ПОЛУЧАЕМ ВСЕ ДАННЫЕ ПО ТАБЛИЦУ ФИО ДЛЯ ПОСИКА                class_grud_sql_operationsДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск=new Class_GRUD_SQL_Operations(getApplicationContext());                ///                class_grud_sql_operationsДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск.concurrentHashMapНабор.put("НазваниеОбрабоатываемойТаблицы","fio");                ///////                class_grud_sql_operationsДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск.concurrentHashMapНабор.put("СтолбцыОбработки","name,_id,uuid,BirthDate,snils");                //                class_grud_sql_operationsДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск.concurrentHashMapНабор.put("ФорматПосика","name LIKE ? ");                ///"_id > ?   AND _id< ?"                //////                class_grud_sql_operationsДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск.concurrentHashMapНабор.put("УсловиеПоиска1",ВПотокеfinalПоискФИОЧерезLIKE + "%");                ///       /*         class_grud_sql_operationsДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск. concurrentHashMapНабор.put("УсловиеПоиска2","Удаленная");                    ///                class_grud_sql_operationsДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск. concurrentHashMapНабор.put("УсловиеПоиска3",МЕсяцДляКурсораТабелей);                    //                class_grud_sql_operationsДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск. concurrentHashMapНабор.put("УсловиеПоиска4",ГодДляКурсораТабелей);////УсловиеПоискаv4,........УсловиеПоискаv5 .......*/                ////TODO другие поля                ///classGrudSqlOperations. concurrentHashMapНабор.put("ПоляГрупировки",null);                ////                //class_grud_sql_operations. concurrentHashMapНабор.put("УсловиеГрупировки",null);                ////                class_grud_sql_operationsДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск.concurrentHashMapНабор.put("УсловиеСортировки","date_update DESC");                ////                class_grud_sql_operationsДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск.concurrentHashMapНабор.put("УсловиеЛимита","500");                ////                // TODO: 12.10.2021  Ссылка Менеджер Потоков                PUBLIC_CONTENT  Class_Engine_SQLГдеНаходитьсяМенеджерПотоков =new PUBLIC_CONTENT (getApplicationContext());                // TODO: 27.08.2021  ПОЛУЧЕНИЕ ДАННЫХ ОТ КЛАССА GRUD-ОПЕРАЦИИ                Курсор_ПолучаемВсюТаюлицуФИОДляПосикаТабеля= (SQLiteCursor)  new Class_GRUD_SQL_Operations(getApplicationContext()).                        new GetData(getApplicationContext()).getdata(class_grud_sql_operationsДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск.concurrentHashMapНабор,                        Class_Engine_SQLГдеНаходитьсяМенеджерПотоков.МенеджерПотоков,Create_Database_СсылкаНАБазовыйКласс.getССылкаНаСозданнуюБазу());                Log.d(this.getClass().getName(), "GetData "+Курсор_ПолучаемВсюТаюлицуФИОДляПосикаТабеля  );                // TODO: 07.09.2021  _old/*                Курсор_ПолучаемВсюТаюлицуФИОДляПосикаТабеля = new Class_MODEL_synchronized(getApplicationContext()).                        КурсорУниверсальныйДляБазыДанных("fio", new String[]{"name,_id,uuid,BirthDate,snils"},                                "name LIKE ?", new String[]{ВПотокеfinalПоискФИОЧерезLIKE + "%"}, null, null, "date_update DESC", "500");///"SELECT name  FROM MODIFITATION_Client WHERE name=?",                // НазваниеТаблицНаСервере +"%"  // KEY_NAME + " LIKE ?"                // new String[] { filter+"%" }, // new String[] {"%"+ filter+ "%" }, n*/                               /* Курсор_ПолучаемВсюТаюлицуФИОДляПосикаТабеля = new Class_MODEL_synchronized(getApplicationContext()).                                        КурсорУниверсальныйДляБазыДанных("fio", new String[]{"name,id,uuid,BirthDate,snils"},                                                "name LIKE ?", new String[]{"%" + finalПоискФИОЧерезLIKE + "%"}, null, null, "date_update DESC", "100");///"SELECT name  FROM MODIFITATION_Client WHERE name=?",                                // НазваниеТаблицНаСервере +"%"  // KEY_NAME + " LIKE ?"*/                // new String[] { filter+"%" }, // new String[] {"%"+ filter+ "%" }, n                ////todo проверяем куроср                МетодЗаполненияАктивтиДаннымиИзБазыДляПосикаПоФИО();                Log.d(this.getClass().getName(), "finalПоискФИОЧерезLIKE  " + finalПоискФИОЧерезLIKE);                ////TODO ЕСЛИ ПОЛСЛЕ ВЫБОРКИ ИДЕМ НАЗАД И У НАС ""            } else {                //////todo если пустой то без like                Log.d(this.getClass().getName(), "finalПоискФИОЧерезLIKE  " + finalПоискФИОЧерезLIKE);                //////todo выбор только like                ////TODO ПОЛУЧАЕМ ВСЕ ДАННЫЕ ПО ТАБЛИЦУ ФИО ДЛЯ ПОСИКА                ////TODO ПОЛУЧАЕМ ВСЕ ДАННЫЕ ПО ТАБЛИЦУ ФИО ДЛЯ ПОСИКА                class_grud_sql_operationsДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск=new Class_GRUD_SQL_Operations(getApplicationContext());                ///                class_grud_sql_operationsДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск.concurrentHashMapНабор.put("НазваниеОбрабоатываемойТаблицы","fio");                ///////                class_grud_sql_operationsДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск.concurrentHashMapНабор.put("СтолбцыОбработки","name,_id,uuid,BirthDate,snils");                //            /*        class_grud_sql_operations. concurrentHashMapНабор.put("ФорматПосика","uuid=?    AND status_send !=? AND month_tabels=? AND  year_tabels =? AND fio IS NOT NULL ");                    ///"_id > ?   AND _id< ?"                    //////                    class_grud_sql_operations. concurrentHashMapНабор.put("УсловиеПоиска1",finalПолученныйUUID);                    ///                    class_grud_sql_operations. concurrentHashMapНабор.put("УсловиеПоиска2","Удаленная");                    ///                    class_grud_sql_operations. concurrentHashMapНабор.put("УсловиеПоиска3",МЕсяцДляКурсораТабелей);                    //                    class_grud_sql_operations. concurrentHashMapНабор.put("УсловиеПоиска4",ГодДляКурсораТабелей);////УсловиеПоискаv4,........УсловиеПоискаv5 .......*/                ////TODO другие поля                ///classGrudSqlOperations. concurrentHashMapНабор.put("ПоляГрупировки",null);                ////                //class_grud_sql_operations. concurrentHashMapНабор.put("УсловиеГрупировки",null);                ////                class_grud_sql_operationsДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск.concurrentHashMapНабор.put("УсловиеСортировки","date_update DESC");                ////                /// class_grud_sql_operations. concurrentHashMapНабор.put("УсловиеЛимита","1");                ////                // TODO: 12.10.2021  Ссылка Менеджер Потоков                PUBLIC_CONTENT  Class_Engine_SQLГдеНаходитьсяМенеджерПотоков =new PUBLIC_CONTENT (getApplicationContext());                // TODO: 27.08.2021  ПОЛУЧЕНИЕ ДАННЫХ ОТ КЛАССА GRUD-ОПЕРАЦИИ                ///                Курсор_ПолучаемВсюТаюлицуФИОДляПосикаТабеля= (SQLiteCursor)  new Class_GRUD_SQL_Operations(getApplicationContext()).                        new GetData(getApplicationContext()).getdata(class_grud_sql_operationsДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск.concurrentHashMapНабор,                        Class_Engine_SQLГдеНаходитьсяМенеджерПотоков.МенеджерПотоков,Create_Database_СсылкаНАБазовыйКласс.getССылкаНаСозданнуюБазу());                Log.d(this.getClass().getName(), "GetData "+Курсор_ПолучаемВсюТаюлицуФИОДляПосикаТабеля  );                // TODO: 07.09.2021  _old/*                Курсор_ПолучаемВсюТаюлицуФИОДляПосикаТабеля = new Class_MODEL_synchronized(getApplicationContext()).                        КурсорУниверсальныйДляБазыДанных("fio", new String[]{"name,_id,uuid,BirthDate,snils"},                                null, null, null, null, "date_update DESC", null);///"SELECT name  FROM MODIFITATION_Client WHERE name=?",НазваниеТаблицНаСервере +"%"  // KEY_NAME + " LIKE ?"                ///////*/                // new String[] { filter+"%" }, // new String[] {"%"+ filter+ "%" }, n                Log.d(this.getClass().getName(),  " + Курсор_ПолучаемВсюТаюлицуФИОДляПосикаТабеля.getCount()  "+Курсор_ПолучаемВсюТаюлицуФИОДляПосикаТабеля .getCount() );                /////TODO если справочник был уже загружен то мы его не заполянм а с него и загружемся                ////todo проверяем куроср                МетодЗаполненияАктивтиДаннымиИзБазыДляПосикаПоФИО();            }            //поймать ошибку всего классаIOException | MyException e    NumberFormatException        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            // TODO: 01.09.2021 метод вызова            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    //todo метод заполнения активтии из таблицы фио//todo метод не ПОСТРЕДТСВЕНО АПОЛЯНЕТ LISTVIEW ДАНЫМИ    private void МетодЗаполненияАктивтиДаннымиИзБазыДляПосикаПоФИО() {        try{            ЛистСДаннымиФИО.setClickable(true);            try{                ГлавныйКонтейнерДляПосикаТабелей.removeAllViews();            } catch (Exception e) {                //   e.printStackTrace(); /*           ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());*/            }            МетодФинальнойВставкиДАнныхДляПосикаСотрудников();        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            // TODO: 01.09.2021 метод вызова            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    ////todo Метод Вставки ДАнных    private void МетодФинальнойВставкиДАнныхДляПосикаСотрудников() {        ИндексСтрокКомпонентовТабеля=0;        Log.d(this.getClass().getName()," ИндексСтрокКомпонентовТабеля "+ИндексСтрокКомпонентовТабеля);        try {                    SimpleCursorAdapter dataAdapter = new SimpleCursorAdapter(getApplicationContext(), R.layout.list_item,                            Курсор_ПолучаемВсюТаюлицуФИОДляПосикаТабеля, new String[]{"name"}, new int[]{android.R.id.text1}, CursorAdapter.FLAG_REGISTER_CONTENT_OBSERVER);                    SimpleCursorAdapter.ViewBinder binding = new SimpleCursorAdapter.ViewBinder() {                        @Override                        public boolean setViewValue(View view, Cursor cursor, int columnIndex) {                            int ИндексФИО = cursor.getColumnIndex("name");                            ////                            int ИндексДеньРождения = cursor.getColumnIndex("BirthDate");                            ////                            Drawable icon = null;                            //                            StringBuffer БуферФИОиДатыРождения=new StringBuffer();                            if (ИндексФИО == columnIndex) {                                icon = getResources().getDrawable(R.mipmap.icon_dsu1_tabels_for_find_item);                                icon.setBounds(0, 1, 60, 60);                                ((TextView) view).   setPadding(10,10,10,10);                                ((TextView) view).setCompoundDrawables(icon, null, null, null);                                /*   TextView tvColor = (TextView) view;                                 */                                ///                                String ФИОДляПОиска = cursor.getString(ИндексФИО);                                String ДатаРОжденияДляПОиска = cursor.getString(ИндексДеньРождения);                                //                                if(ДатаРОжденияДляПОиска==null){                                    ДатаРОжденияДляПОиска="нет";                                }                                БуферФИОиДатыРождения.append("    ").append(ФИОДляПОиска).append("\n").                                        append("   ").append("(").append(ДатаРОжденияДляПОиска).append(")").append(" г.");                                Log.d(this.getClass().getName(), " БуферФИОиДатыРождения.toString()" + БуферФИОиДатыРождения.toString());//////TODO заполняем simple двнными                                ((TextView) view).setText(БуферФИОиДатыРождения.toString());                                ///                                return true;                            } else {                                Log.e(this.getClass().getName(), "view.getId() " + view.getId());                            }                            return false;                        }                    };            dataAdapter.setViewBinder(binding);            ЛистСДаннымиФИО.setAdapter(dataAdapter);            //TODO ЗАПОЛЕНЕИЯ АДАПТЕРА            // АдаптерДляСпинераДата = new ArrayAdapter<String>(getApplicationContext(), R.layout.list_item,  АрайЛИстФИОВсеДляПосика);//ХэшФИОВсеДляПосика // АрайЛИстФИОВсеДляПосика // simple_list_item_checked //simple_list_item_multiple_choice            try {                ГлавныйКонтейнерДляПосикаТабелей.removeAllViews();            } catch (Exception e) {                //   e.printStackTrace();            }            ЛистСДаннымиФИО.setBackgroundResource(R.drawable.textlines_tabeltwo);            ///TODO КОПИРУЕМ в пабик            ЛистСДаннымиФИО.deferNotifyDataSetChanged();            try {                ГлавныйКонтейнерДляПосикаТабелей.addView(ЛистСДаннымиФИО);            } catch (Exception e) {                // e.printStackTrace();            }            ЛистСДаннымиФИО.deferNotifyDataSetChanged();            //////        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            // TODO: 01.09.2021 метод вызова            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    ///////////    private void МетодОбработкиКликаПоЯчейкамСотрудникаВыбранным() {        ЛистСДаннымиФИО.setOnItemClickListener(new AdapterView.OnItemClickListener() {            @Override            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {//TODO ПРИНУДИТЕЛЬНО ЗАПОЛНЯЕМ SETTAG                if (Курсор_ПолучаемВсюТаюлицуФИОДляПосикаТабеля.getCount()>0){                    Log.d(this.getClass().getName(), "  Курсор_СамиФИОДляПоиска.getCount()" + Курсор_ПолучаемВсюТаюлицуФИОДляПосикаТабеля.getCount());                    Курсор_ПолучаемВсюТаюлицуФИОДляПосикаТабеля.moveToFirst();                    while (Курсор_ПолучаемВсюТаюлицуФИОДляПосикаТабеля.move(position)){                        long UUIDПолучаемДляОправкиВФИОпослеПосика=Курсор_ПолучаемВсюТаюлицуФИОДляПосикаТабеля.getLong(2);                        ((TextView) parent.getChildAt(0)).setTag(UUIDПолучаемДляОправкиВФИОпослеПосика);//////ВЫДЕЛЕМ ЖИРНЫМ ЦВЕТОМ ДАТЫ             /* TextView textView=  (TextView) parent.getChildAt((int) id);                textView.setTextSize(25);*/                        Log.d(this.getClass().getName()," UUIDПолучаемДляОправкиВФИОпослеПосика " +UUIDПолучаемДляОправкиВФИОпослеПосика);                        break;                    }//todo ЗАПОЛЯЕМ UUID И ИМЯ ФИО                    TextView textView = (TextView) view;                    long UUIDgetTagДляПосикаПолученныйИзListView= (long) ((TextView) parent.getChildAt(0)).getTag();//////ВЫДЕЛЕМ ЖИРНЫМ ЦВЕТОМ ДАТЫ                    String СамоЗначениеФИОДляПосикаПолученныйИзListView = textView.getText().toString(); // получаем текст нажатого элемента                    //Toast.makeText(getApplicationContext(), " Вы выбрали ФИО : " + СамоЗначениеФИОДляПосикаПолученныйИзListView   , Toast.LENGTH_LONG).show();                    //  Toast.makeText(getApplicationContext(), " Вы выбрали : " + String.valueOf(UUIDgetTagДляПосикаПолученныйИзListView ) , Toast.LENGTH_LONG).show();                    //TODO ПОЛУЧЕНЫЕ ЗНАЧЕНИЯ UUID  И ФИО ЗАПОЛЯНЕМ В ХЭШМЭП                    if (UUIDgetTagДляПосикаПолученныйИзListView>0 && СамоЗначениеФИОДляПосикаПолученныйИзListView!=null  ){                        ///                        /////todo заполение хэша сотрудниками котрые мы  ПОДОБРАЛИ                        ХэшФИОВсеДляПосика.put(UUIDgetTagДляПосикаПолученныйИзListView, СамоЗначениеФИОДляПосикаПолученныйИзListView);                        Log.d(this.getClass().getName(), "  ХэшФИОВсеДляПосика.size() " + ХэшФИОВсеДляПосика.size() + "  ХэшФИОВсеДляПосика.toString() " + ХэшФИОВсеДляПосика.toString());                        ////// todo оформление                        КнопкаОтправкиСотрудникаДляТабеля.setVisibility(View.VISIBLE);                        //todo после вставки обнуляем переменные                        UUIDgetTagДляПосикаПолученныйИзListView=0;                        СамоЗначениеФИОДляПосикаПолученныйИзListView=null;                    }else{                        Log.e(this.getClass().getName(), " UUID отрицательный сотрудника "+UUIDgetTagДляПосикаПолученныйИзListView);                    }                }}        });        //////todo    }    ////todo метод отправки полученых сотрудников на другую активти    private void МетодРаботуКнопкиКотораяОтправляетПодобранныхСотрудников() {        try{            КнопкаОтправкиСотрудникаДляТабеля.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    Log.d(this.getClass().getName(), " кликнем для созданни новго сотрдника при нажатии  ");                    ///////TODO перед созданием определяем не пустые ли значения                    if (ХэшФИОВсеДляПосика.size()>0) {///todo ВСТАВКИ ВЫБРАНОГО СОТРУЖИНКА КОТОРРЫЙ УЖЕ ЕСТЬ В  БАЗЕ                        МетодВставкаВТабель();                    } else {                        Toast aa = Toast.makeText(getApplicationContext(), "OPEN",Toast.LENGTH_SHORT);                        ImageView cc = new ImageView(getApplicationContext());                        cc.setImageResource(R.drawable.icon_dsu1_add_organisazio_error);//icon_dsu1_synchronisazia_dsu1_success                        aa.setView(cc);                        aa.show();                        Toast.makeText(getApplicationContext(), "Вы не выбрали не одного сотрудника (выберите и повторите попытку).", Toast.LENGTH_SHORT).show();                    }                }            });        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            // TODO: 01.09.2021 метод вызова            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    ///todo сообщение на активти ПОДБОР СОТРУДНИКА КОТОРЫЙ УЖЕ ЕСТЬ В БАЗЕ И ОТПРАВИТЬ ЕГО НА ДРУГТУЮ АКТИВНОСТЬ ПО ЗАПОДЕНИЮ В ТАБЕЛЬ    @UiThread    protected void СообщениеКотороеСпрашиваетТочноЛиНужноСоздатьНовогоСотрудника(String ШабкаДиалога, final String СообщениеДиалога, boolean статус) {        ///////СОЗДАЕМ ДИАЛОГ ДА ИЛИ НЕТ///////СОЗДАЕМ ДИАЛОГ ДА ИЛИ НЕТ        try {//////сам вид            final AlertDialog alertDialog = new MaterialAlertDialogBuilder(this)                    .setTitle(ШабкаДиалога)                    .setMessage(СообщениеДиалога)                    .setPositiveButton("Да", null)                    .setNeutralButton("Ещё", null)                    .setNegativeButton("Очистить", null)                    .setIcon(R.drawable.icon_dsu1_new_customer7 )// //icon_dsu1_new_customer_success                    .show();/////////кнопка            final Button MessageBoxОтправкаУжеСуществещегоСотрудника = alertDialog.getButton(AlertDialog.BUTTON_POSITIVE);            MessageBoxОтправкаУжеСуществещегоСотрудника .setOnClickListener(new View.OnClickListener() {                ///MessageBoxUpdate метод CLICK для DIALOBOX                @Override                public void onClick(View v) {                    //удаляем с экрана Диалог                    alertDialog.dismiss();                    Log.d(this.getClass().getName(), " ХэшФИОВсеДляПосика.size()" + ХэшФИОВсеДляПосика.size() + " ХэшФИОВсеДляПосика.toString() " +ХэшФИОВсеДляПосика.toString());///todo ВСТАВКИ ВЫБРАНОГО СОТРУЖИНКА КОТОРРЫЙ УЖЕ ЕСТЬ В  БАЗЕ                    МетодВставкаВТабель();                }            });/////////кнопка            final Button MessageBoxUpdateЗАкрытьСозданиеТабеля = alertDialog.getButton(AlertDialog.BUTTON_NEUTRAL);            MessageBoxUpdateЗАкрытьСозданиеТабеля.setOnClickListener(new View.OnClickListener() {                ///MessageBoxUpdate метод CLICK для DIALOBOX                @Override                public void onClick(View v) {                    //удаляем с экрана Диалог                    alertDialog.dismiss();///запуск метода обновления через DIALOGBOX                }            });/////////кнопка            final Button MessageBoxUpdateОчиститьСозданиеТабеля = alertDialog.getButton(AlertDialog.BUTTON_NEGATIVE);            MessageBoxUpdateОчиститьСозданиеТабеля.setOnClickListener(new View.OnClickListener() {                ///MessageBoxUpdate метод CLICK для DIALOBOX                @Override                public void onClick(View v) {                    //удаляем с экрана Диалог                    alertDialog.dismiss();                    ///TODO ПОСЛЕ ОТПРАВКИ ОДНУЛЯЕМ ПЕРЕДВАЕМЫЙ хэш                    ХэшФИОВсеДляПосика.clear();                    //  ХэшФИОВсеДляПосика=null;                    ///TODO ошибка                    ///todo/////////TODO ЗАПОЛЕНИЕ                    ////TODO SET УСТАНОВКА ДАНЫХ В АДАПТЕР                    try {                        МетодПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск(null);                    } catch (InterruptedException e) {                        e.printStackTrace();                    }///запуск метода обновления через DIALOGBOX                }            });        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                    + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                    Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    ////todo добавления уже действущего сотрдника////todo добавления уже действущего сотрдника    private  void МетодВставкаВТабель() {        try{            progressDialog= new ProgressDialog(this);            Log.d(this.getClass().getName(), " ХэшФИОВсеДляПосика  "+ХэшФИОВсеДляПосика.values());            ////TODO КОД ПОСЛЕ ПОДБОРА  СУЩЕСТВУЕЩЕГО СОТРУДНИКА И ВСТАКА ЕГО В ДЕЙСТВУЩЕЙ ТАБЕЛЬ            //////todo РАСПРСИВАЕМ ПРИШЕДШИЙ ХЭШМАП С ПОДОБРАНЫМИ СОТРУНИКАМИ  цикл for            StringBuffer stringBufferЕслиНеВставленныйЗначения=new StringBuffer();            if ( ХэшФИОВсеДляПосика.size()>0) {                progressDialog.setIndeterminate(true);                progressDialog.setCancelable(false);                progressDialog.setTitle("Сотрудника/ов в Табель");                progressDialog.setMessage("Добавление...");                progressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);                progressDialog.setMax(ХэшФИОВсеДляПосика.size());                progressDialog.setProgress(0);                progressDialog.setCanceledOnTouchOutside(false);                progressDialog.show();                ГлавныйКойтейнерПоискаФИОСотрудника.setClickable(false);            }else {                Toast.makeText(getApplicationContext(), "Нет данных для вставки", Toast.LENGTH_SHORT).show();            }            final int[] ТекущаяУспешнаяОперацияПоДобаленеиСотрудниковВТАбель = {0};            ReentrantLock locker = new ReentrantLock(); // создаем блокировку            Condition condition = locker.newCondition(); // получаем условие, связанное с блокировкой*/            Integer ПубличноеID=    new SubClassGetPublicId().ПубличныйID(context);      Flowable flowableВставкаНовыхСотрудников=      Flowable.fromIterable(ХэшФИОВсеДляПосика.entrySet())              .onBackpressureBuffer(ХэшФИОВсеДляПосика.entrySet().size(),true)              .subscribeOn(Schedulers.single())              .doOnNext(new Consumer<Map.Entry<Long, String>>() {                  @Override                  public void accept(Map.Entry<Long, String> longStringEntry) throws Throwable {                      try {                          Log.d(this.getClass().getName(), "  ХэшФИОВсеДляПосика.keySet().stream().count() "+ ХэшФИОВсеДляПосика.keySet().stream().count()+" longStringEntry "+longStringEntry);                          Log.d(this.getClass().getName(), "  ХэшФИОВсеДляПосика.keySet().stream().count() "+ ХэшФИОВсеДляПосика.keySet().stream().count());                          /////TODO СОН                          locker.lock();                          ///TODO сама вставка                          long РезультатВставкиСотрудника = 0l;                          Long CurrentFIOUUID = 0l;                          String ФИОДляВставки = new String();                          CurrentFIOUUID =longStringEntry.getKey();                          Log.w(getApplicationContext().getClass().getName(),                                  "CurrentFIOUUID[0]"                                          +CurrentFIOUUID);                          ФИОДляВставки =longStringEntry.getValue();                          ФИОДляВставки = ФИОДляВставки.replaceAll("\\n+", "");                          int НачалоДатыВФИО= ФИОДляВставки.indexOf("(");                          if(НачалоДатыВФИО>=0){                              ФИОДляВставки= ФИОДляВставки.substring(0, НачалоДатыВФИО);                          }                          ФИОДляВставки = ФИОДляВставки.trim();                          Log.w(getApplicationContext().getClass().getName(),                                  "ФИОДляВставки[0][0]"                                          +ФИОДляВставки);                          Log.d(this.getClass().getName(), " CurrentFIOUUID " + CurrentFIOUUID +                                  " entry.getValue( " + longStringEntry.getValue());                          Log.d(this.getClass().getName(), " CurrentFIOUUID[0] "                                  + CurrentFIOUUID );                          Long UUIDGeneratorINset  = (Long) new Class_Generation_UUID(getApplicationContext()).МетодГенерацииUUID( );                          ///TODO вставка сотрудников из активти просто много сотрудникв                          if (CurrentFIOUUID >0 ) {                              РезультатВставкиСотрудника = МетодОпределенияВставкиУжеСущетсвующегоСотрудникаЧерезПоиск(CurrentFIOUUID,  UUIDGeneratorINset,ПубличноеID);                              Log.d(this.getClass().getName(), " РезультатВставкиСотрудника[0]" + РезультатВставкиСотрудника);                              // TODO: 03.10.2021  нет такой сотркудник уже сть или нет UUID на текущее строчке для сотрудника                          }else {                              Log.d(this.getClass().getName(), " CurrentFIOUUID[0][0]" +                                      CurrentFIOUUID);                          }                          // TODO: 03.10.2021  второя событие   вставка ВС,СУББ Понедельник                          if ( РезультатВставкиСотрудника>0) {                              // TODO: 17.04.2023                                Integer РезультатВставкаВыходныхДНей=                                      new Class_Generation_Weekend_For_Tabels(getApplicationContext()).МетодТретийАвтоматическаяВставкаВыходныхДней( UUIDGeneratorINset,ГодТабелей,МЕсяцТабелей );                              Log.d(this.getClass().getName(), "   РезультатВставкаВыходныхДНей  "+  РезультатВставкаВыходныхДНей);                              Log.w(this.getClass().getName(), "успешно ДОБАВЛЕНО СОТУДНИК ЧРЕЗ ПОСИК ДВА "+РезультатВставкиСотрудника );                              Log.d(  this.getClass().getName(), " метод посика уже существующего сотрудника в базе андройжа");                              ((Activity) context).runOnUiThread(new Runnable() {                                  @Override                                  public void run() {                                      progressDialog.setIndeterminate(false);                                      ТекущаяУспешнаяОперацияПоДобаленеиСотрудниковВТАбель[0]++;                                      //progressDialog.incrementProgressBy(50);                                      //progressDialog.incrementSecondaryProgressBy(75);                                      progressDialog.setProgress(ТекущаяУспешнаяОперацияПоДобаленеиСотрудниковВТАбель[0]);                                      progressDialog.setMessage("Добавление..."+ ТекущаяУспешнаяОперацияПоДобаленеиСотрудниковВТАбель[0] +" из: ("+ХэшФИОВсеДляПосика.size()+")");                                  }                              });                          }else{                              stringBufferЕслиНеВставленныйЗначения.append(" Ошибка Сотрудник не был добавлен !!! ").append(ФИОДляВставки);                              Log.e(this.getClass().getName(), "Ошибка  новый сотрудник не вставилься" +stringBufferЕслиНеВставленныйЗначения.toString());                              ///TODO сообщаем об успешном создаении данных                              ((Activity) context).runOnUiThread(new Runnable() {                                  @Override                                  public void run() {                                      progressDialog.setMessage(stringBufferЕслиНеВставленныйЗначения.toString());                                  }                              });                          }                          locker.newCondition().await(300,TimeUnit.MILLISECONDS);                          locker.newCondition().signal();                      } catch (Exception e) {                          e.printStackTrace();                          Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                                  + Thread.currentThread().getStackTrace()[2].getLineNumber());                          new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                                  Thread.currentThread().getStackTrace()[2].getLineNumber());                      }finally {                          locker.unlock();                      }                      Log.d(this.getClass().getName(), "  ХэшФИОВсеДляПосика.keySet().stream().count() "+ ХэшФИОВсеДляПосика.keySet().stream().count());                  }              })              .doOnError(new Consumer<Throwable>() {                  @Override                  public void accept(Throwable throwable) throws Throwable {                      Log.e(this.getClass().getName(), "Ошибка " + throwable + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                              + Thread.currentThread().getStackTrace()[2].getLineNumber());                      new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(throwable.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                              Thread.currentThread().getStackTrace()[2].getLineNumber());                  }              })              .doOnComplete(new Action() {                     @Override                     public void run() throws Throwable {                         Log.d(this.getClass().getName(), "  ХэшФИОВсеДляПосика.keySet().stream().count() "+ ХэшФИОВсеДляПосика.keySet().stream().count());                         ///TODO после успешной встаки удаляем                         ((Activity) context).runOnUiThread(new Runnable() {                             @Override                             public void run() {                                 if (       stringBufferЕслиНеВставленныйЗначения.length()>0) {                                     Log.e(this.getClass().getName(), "Ошибка  новый сотрудник не вставилься" +stringBufferЕслиНеВставленныйЗначения.toString());                                     ///TODO сообщаем об успешном создаении данных                                     Toast.makeText(getApplicationContext(), stringBufferЕслиНеВставленныйЗначения.toString(), Toast.LENGTH_SHORT).show();                                 }                                 ХэшФИОВсеДляПосика.clear();                                 ГлавныйКонтейнерДляПосикаТабелей.setClickable(true);                                 progressDialog.setIndeterminate(false);                                 progressDialog.setProgress(ХэшФИОВсеДляПосика.size());                                 progressDialog.dismiss();                                 ГлавныйКонтейнерДляПосикаТабелей.forceLayout();                                 ////todo ошибка не встановы новый сотрудник                                 //todo после добавленияновго сотрдуника переходим на другое активти                                 методBackToActivityListPeoples();                                 Log.d(  this.getClass().getName(), " метод посика уже существующего сотрудника в базе андройжа");                             }                         });                     }                 });            flowableВставкаНовыхСотрудников.subscribe();        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }// TODO: 07.09.2021   метод если существующй сотрудник    protected   Long МетодОпределенияВставкиУжеСущетсвующегоСотрудникаЧерезПоиск( @NonNull  long CurrentFIOUUID,                                                                                  @NonNull Long UUIDGeneratorINset    ,@NonNull Integer ПубличноеID) {        long РезультатВставкиDATAtABELS = 0l;        try {            String ТаблицыОбработкиВставкиВЫбраногосоСОтрудникаВТАюкель = "data_tabels";                ContentValues АдаптерВставкиDATAtABELS = new ContentValues();////контрейнер для нового табеля                String СгенерированованныйДатаДляДаннойОперации = new Class_Generation_Data(getApplicationContext()).ГлавнаяДатаИВремяОперацийСБазойДанных();                АдаптерВставкиDATAtABELS.put("date_update", СгенерированованныйДатаДляДаннойОперации);            // TODO: 09.04.2023  курсор самим создаваемых табеляПОСИК ДАННЫХ ЧЕРЕЗ UUID                АдаптерВставкиDATAtABELS.put("user_update", ПубличноеID);                АдаптерВставкиDATAtABELS.put("status_carried_out", "False");              //  АдаптерВставкиDATAtABELS.putNull("_id");                АдаптерВставкиDATAtABELS.put("fio", CurrentFIOUUID);                АдаптерВставкиDATAtABELS.put("uuid", UUIDGeneratorINset);                АдаптерВставкиDATAtABELS.put("status_send", " ");                АдаптерВставкиDATAtABELS.put("uuid_tabel", MainParentUUID);//MainParentUUID                Log.e(this.getClass().getName(), "MainParentUUID" + MainParentUUID);// TODO: 08.10.2021 повышаем версию                Class_GRUD_SQL_Operations class_grud_sql_operationsПовышаемВерсиюДанныхПриСозданеииИзШаблонаСотрудника = new Class_GRUD_SQL_Operations(getApplicationContext());                // TODO: 18.03.2023  получаем ВЕСИЮ ДАННЫХ                Long РезультатУвеличинаяВерсияПриДОбаленеиНовгоСотрулникаИзПосика =                        new SubClassUpVersionDATA().МетодПовышаемВерсииCurrentTable("data_tabels",getApplicationContext(),new CREATE_DATABASE(getApplicationContext()).getССылкаНаСозданнуюБазу());                АдаптерВставкиDATAtABELS.put("current_table", РезультатУвеличинаяВерсияПриДОбаленеиНовгоСотрулникаИзПосика);                if (DigitalNameCFO > 0 && MainParentUUID > 0) {                    ////////todo подобранный СОТРУДНИК ДЛЯ ТАБЕЛЯ ИЗ АКТИВИТИ ПОСИК СОТРУДНИКА                    РезультатВставкиDATAtABELS = new Class_MODEL_synchronized(context).                            ВставкаДанныхЧерезКонтейнерТолькоПриСозданииНовогоСотрудникаУниверсальная(ТаблицыОбработкиВставкиВЫбраногосоСОтрудникаВТАюкель,                                    АдаптерВставкиDATAtABELS);                    Log.e(this.getClass().getName(), " РезультатВставкиDATAtABELS " + РезультатВставкиDATAtABELS);                } else {                    Log.e(this.getClass().getName(), " РезультатВставкиDATAtABELS " + РезультатВставкиDATAtABELS);                    getApplicationContext().getMainExecutor().execute(()->{                        Toast toast = Toast.makeText(getApplicationContext(), "Для вставки не хватает данных !!!", Toast.LENGTH_LONG);                    });                }            // TODO: 17.04.2023            Log.d(this.getClass().getName(),"\n" + " class " + Thread.currentThread().getStackTrace()[2].getClassName() + "\n" +                    " metod " + Thread.currentThread().getStackTrace()[2].getMethodName() + "\n" +                    " line " + Thread.currentThread().getStackTrace()[2].getLineNumber() + "\n"                    + " РезультатВставкиDATAtABELS "+РезультатВставкиDATAtABELS);    } catch (Exception e) {            e.fillInStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }        return РезультатВставкиDATAtABELS;    }    /////todo метод заполения аралилта и хэшмема    private void МетодЗаполенияАрайЛистаИХэшМэпаДляПосикаПоФИО(String ПолученыеФИО, String ПолученныеID, long ПолученныйUUID,String ПолученыеДатаРождения,String ПолученыеСНИЛС) {        try{            /////TODO НЕ ПОСТРДВСТВЕНО ЗАПОЛЯНЕМ LISTVIEW  ДАННЫМИ            АрайЛИстФИОВсеДляПосика.add(ПолученыеФИО );            Log.d(this.getClass().getName(), "  АрайЛИстФИОВсеДляПосика.size() " + АрайЛИстФИОВсеДляПосика.size() + " АрайЛИстФИОВсеДляМетокТабеля " +  АрайЛИстФИОВсеДляПосика.toString()+                    "  ПолученныйUUID  " +ПолученныйUUID);            /////todo заполения TAG uuid меток табеля            ЛистСДаннымиФИО.setTag(String.valueOf(ПолученныйUUID));        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            // TODO: 01.09.2021 метод вызова            new   Class_Generation_Errors(getApplication()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    // TODO КОД СЛУШАТЕЛЬ ПРИ НАЖАТИИ НА ТАБЕЛЬ Создаем экземпляр TextWatcher:    private final TextWatcher СлушательПолученияДанных = new TextWatcher() {        public void beforeTextChanged (CharSequence s,int start, int count, int after){            Log.d(this.getClass().getName(), "  beforeTextChanged  " + s.toString());            String ЗначениевПоискеФИО = s.toString();        }        public void onTextChanged (CharSequence s,int start, int before, int count){            Log.d(this.getClass().getName(), "  onTextChanged  " + s.toString());        }        //Задаем действия для TextView после смены введенных в EditText символов:        public void afterTextChanged (Editable s){            try {                //TODO ДАННЫЙ КОД НЕПОСТРЕДСТВЕННО ЗАРУСКАЕТ ОБНОВЛЕНИЕ ЛОКАЛЬНОЕ С АКТИВТИИ                Log.d(this.getClass().getName(), "  afterTextChanged " + s.toString());                String СамоЗначениеЯчейкиТабеля = s.toString();                Log.d(this.getClass().getName(), "  СамоЗначениеЯчейкиТабеля" + СамоЗначениеЯчейкиТабеля);                Log.d(this.getClass().getName(), "  СамоЗначениеЯчейкиТабеля" + СамоЗначениеЯчейкиТабеля);                ////TODO запускаем метод ЛОКАЛЬНОГО ОБНОВЛЕНИЕ ПОСЛЕ ПОЛУЧЕННЫХ ДАННЫХ                МетодПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск(СамоЗначениеЯчейкиТабеля); // TODO ПОСИК С LIKE                /////            } catch (Exception e) {                e.printStackTrace();                ///метод запись ошибок в таблицу                Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                        " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                // TODO: 01.09.2021 метод вызова                new   Class_Generation_Errors(getApplication()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                        Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());            } finally {            }        }    };    // TODO  конец КОД СЛУШАТЕЛЬ ПРИ НАЖАТИИ НА ТАБЕЛЬ Создаем экземпляр TextWatcher:    //TODO метод получени месяа для записи в одну колонку    private int МетодПолучениниеМесяцПриСозданииНовогоСОтрудника(String ДатаКоторуюНадоПеревестиИзТекставЦифру) throws ParseException {        int month = 0;        try{            System.out.println(" " + ДатаКоторуюНадоПеревестиИзТекставЦифру + " " + ДатаКоторуюНадоПеревестиИзТекставЦифру);            SimpleDateFormat formatмесяц = new SimpleDateFormat("LLLL  yyyy", new Locale("ru"));            // formatмесяц.setTimeZone(TimeZone.getTimeZone("UTC-03:00"));            formatмесяц.setTimeZone(TimeZone.getTimeZone("Europe/Moscow"));            Date date = formatмесяц.parse(ДатаКоторуюНадоПеревестиИзТекставЦифру);            GregorianCalendar calendar = (GregorianCalendar) GregorianCalendar.getInstance(new Locale("ru"));            calendar.setTime(date);            /////TODO ОБРАБАТЫВАЕМ ДАННЫЕ ДАТЫ ЯНВАРЬ            if (ДатаКоторуюНадоПеревестиИзТекставЦифру.matches("(.*)Январь(.*)")) {                month = calendar.get(Calendar.MONTH)+1;            } else                month = calendar.get(Calendar.MONTH) + 1;            ///////        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            // TODO: 01.09.2021 метод вызова            new   Class_Generation_Errors(getApplication()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }        return month;    }    //TODO метод получени месяа для записи в одну колонку    private int МетодПолучениниеГОдПриСозданииНовогоСОтрудника(String ДатаКоторуюНадоПеревестиИзТекставЦифру) throws ParseException {        int year= 0;        try{            System.out.println("ДатаКоторуюНадоПеревестиИзТекставЦифру " + ДатаКоторуюНадоПеревестиИзТекставЦифру);            SimpleDateFormat formatгод = new SimpleDateFormat("LLLL  yyyy", new Locale("ru"));            // formatгод.setTimeZone(TimeZone.getTimeZone("UTC-03:00"));            formatгод.setTimeZone(TimeZone.getTimeZone("Europe/Moscow"));            Date date = formatгод.parse(ДатаКоторуюНадоПеревестиИзТекставЦифру);            Calendar calendar = Calendar.getInstance(new Locale("ru"));            calendar.setTime(date);            if (ДатаКоторуюНадоПеревестиИзТекставЦифру.matches("(.*)Январь(.*)")) {                year = calendar.get(Calendar.YEAR);            } else                year = calendar.get(Calendar.YEAR);        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            // TODO: 01.09.2021 метод вызова            new   Class_Generation_Errors(getApplication()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }        return year;    }    //функция получающая время операции ДАННАЯ ФУНКЦИЯ ВРЕМЯ ПРИМЕНЯЕТЬСЯ ВО ВСЕЙ ПРОГРАММЕ    ///todo сообщение на активти создание новго сотрудника спрашиваем нужно ли создать    ///todo сообщение    @UiThread    protected void СообщениеСообщаетОСоздаенииНовогоСотрудника(String ШабкаДиалога,  String СообщениеДиалога,                                                               boolean статус ) {        ///////СОЗДАЕМ ДИАЛОГ ДА ИЛИ НЕТ///////СОЗДАЕМ ДИАЛОГ ДА ИЛИ НЕТ        int ФлагЗнака;        if (статус) {            ФлагЗнака = R.drawable.icon_dsu1_new_customer_success;//icon_dsu1_new_customer7        } else {            ФлагЗнака = R.drawable.icon_dsu1_new_customer_error;        }        try {//////сам вид            final AlertDialog alertDialog = new MaterialAlertDialogBuilder(this)                    .setTitle(ШабкаДиалога)                    .setMessage(СообщениеДиалога)                    .setPositiveButton("ОК", null)                    .setIcon(ФлагЗнака)                    .show();/////////кнопка            final Button MessageBoxUpdateСоздатьТабель = alertDialog.getButton(AlertDialog.BUTTON_POSITIVE);            MessageBoxUpdateСоздатьТабель.setOnClickListener(new View.OnClickListener() {                ///MessageBoxUpdate метод CLICK для DIALOBOX                @Override                public void onClick(View v) {                    //удаляем с экрана Диалог                    alertDialog.dismiss();                    Log.d(this.getClass().getName(), "  ФИНАЛ создание нового сотрудника ");                    методBackToActivityListPeoples();                }            });        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                    + Thread.currentThread().getStackTrace()[2].getLineNumber());            // TODO: 01.09.2021 метод вызова            new   Class_Generation_Errors(getApplication()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                    Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    ///todo финалный метод еотровый другому активти посылает данные    private void методBackToActivityListPeoples() {        try{            Intent ИнтентBackToActivityListPeoples = new Intent(getApplication(), MainActivity_List_Peoples.class);            ИнтентBackToActivityListPeoples.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);            Bundle dataFindCurstomers=new Bundle();            dataFindCurstomers.putLong("MainParentUUID", MainParentUUID);            dataFindCurstomers.putInt("Position",    Position);            dataFindCurstomers.putInt("ГодТабелей",     ГодТабелей);            dataFindCurstomers.putInt("МЕсяцТабелей", МЕсяцТабелей);            dataFindCurstomers.putInt("DigitalNameCFO",  DigitalNameCFO);            dataFindCurstomers.putString("FullNameCFO", FullNameCFO);            dataFindCurstomers.putString("ИмесяцвИГодСразу",    ИмесяцвИГодСразу);            dataFindCurstomers.putLong("CurrenrsСhildUUID",  CurrenrsСhildUUID);            ИнтентBackToActivityListPeoples.putExtras(dataFindCurstomers);            startActivity( ИнтентBackToActivityListPeoples);            // TODO: 17.04.2023            Log.d(this.getClass().getName(),"\n" + " class " + Thread.currentThread().getStackTrace()[2].getClassName() + "\n" +                    " metod " + Thread.currentThread().getStackTrace()[2].getMethodName() + "\n" +                    " line " + Thread.currentThread().getStackTrace()[2].getLineNumber() + "\n"                    + " dataFindCurstomers "+dataFindCurstomers);    } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplication()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    protected  View КонтентТабеляКоторыйМыИБудемЗаполнятьВнутриЦикла;    //TODO адаптер сомостоятельный для GridView    public class СоздаемСвойАдаптерДляГридМюу extends BaseAdapter {        @Override        public int getCount() {            return 0;        }        @Override        public Object getItem(int position) {            return null;        }        @Override        public long getItemId(int position) {            return 0;        }        @Override        public View getView(int position, View convertView, ViewGroup parent) {            LayoutInflater МеханизмЗагрузкиОдногЛайАутавДругой = getLayoutInflater();            if(convertView ==null){                /*КонтентТабеляКоторыйМыИБудемЗаполнятьВнутриЦикла = МеханизмЗагрузкиОдногЛайАутавДругой.inflate(R.layout.activity_main_grid_for_tables_two,//activity_main_find_customer_for_tables // activity_main_grid_for_tables                        ГлавныйКонтейнерТабель, false);*/            }            /*/////TODO ТАБЕЛЬ ФИО создаем textview названия дней понелельник вторик среда четеварг            ///////// todo фио            НазваниеДанныхВТабелеФИО = КонтентТабеляКоторыйМыИБудемЗаполнятьВнутриЦикла.findViewById(R.id.КонтейнерКудаЗагружаетьсяФИО);            ПосикДня = Курсор_ЗагружаемТабеляСозданный.getColumnIndex("uuid"); ////TODO СЮДА ПОЛЕ UUID            НазваниеСтолбикаДляЛобкальногоОбноления = Курсор_ЗагружаемТабеляСозданный.getColumnName(ПосикДня);            НазваниеДанныхВТабелеФИО.setTag(Курсор_ЗагружаемТабеляСозданный.getString(ПосикДня));            Log.d(this.getClass().getName(), " UUID пристваем Внутри ФИО  " + Курсор_ЗагружаемТабеляСозданный.getString(ПосикДня));            ////todo УСТАНАВЛИВАЕМ КЛИК НА ФИО            НазваниеДанныхВТабелеФИО.setOnLongClickListener(СлушательУдаланиеСотрудникаИзТабеля);            НазваниеДанныхВТабелеФИО.setOnClickListener(СлушательИнформацияОСотрудника);*/            return convertView;        }    }    private void Методandler() {        message=Message.obtain(new Handler(Looper.myLooper()),()->{            try{                Bundle bundle=   message.getData();                Log.i(this.getClass().getName(),  " Атоманически установкаОбновление ПО "+                        Thread.currentThread().getStackTrace()[2].getMethodName()+                        " время " +new Date().toLocaleString() + " binderДляПолучениеМатериалов ");                Log.i(this.getClass().getName(), "bundle " +bundle);                message.recycle();            } catch (Exception e) {                e.printStackTrace();                Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                        " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                        Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());            }        });    }}