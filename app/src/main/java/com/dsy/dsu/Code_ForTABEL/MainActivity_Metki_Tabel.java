package com.dsy.dsu.Code_ForTABEL;import android.app.Activity;import android.content.ContentValues;import android.content.Context;import android.content.Intent;import android.content.SharedPreferences;import android.content.pm.ActivityInfo;import android.content.res.Configuration;import android.database.sqlite.SQLiteCursor;import android.graphics.Color;import android.os.Bundle;import android.text.Editable;import android.text.TextWatcher;import android.util.Log;import android.view.LayoutInflater;import android.view.MotionEvent;import android.view.View;import android.view.ViewGroup;import android.view.WindowManager;import android.widget.AdapterView;import android.widget.ArrayAdapter;import android.widget.BaseAdapter;import android.widget.Button;import android.widget.EditText;import android.widget.ImageView;import android.widget.ListView;import android.widget.ScrollView;import android.widget.TextView;import android.widget.Toast;import androidx.appcompat.app.AppCompatActivity;import com.dsy.dsu.Business_logic_Only_Class.CREATE_DATABASE;import com.dsy.dsu.Business_logic_Only_Class.Class_GRUD_SQL_Operations;import com.dsy.dsu.Business_logic_Only_Class.Class_Generation_Errors;import com.dsy.dsu.Business_logic_Only_Class.PUBLIC_CONTENT;import com.dsy.dsu.Business_logic_Only_Class.SubClassUpVersionDATA;import com.dsy.dsu.Code_For_Services.Service_for_AdminissionMaterial;import com.dsy.dsu.R;import java.text.DateFormat;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Collections;import java.util.Date;import java.util.GregorianCalendar;import java.util.HashMap;import java.util.LinkedHashMap;import java.util.LinkedList;import java.util.List;import java.util.Locale;import java.util.Map;import java.util.TimeZone;import java.util.concurrent.CompletionService;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeoutException;public class MainActivity_Metki_Tabel extends AppCompatActivity {    private ScrollView  ГлавныйКонтейнерДляПосикаТабелей; ////главный linelayuout    private   View КонтентТабеляКоторыйМыИБудемЗаполнятьВнутриЦиклаДляПоиска;    private  EditText   ЗначениеУстановкиМеткиТАбеляИзменяетПользоатель ;    private  ListView ЛистСДаннымиМеткиТаебля=null ;    private Button КнопкаНазадМеткаТабеля;    private  Configuration config;    private  Integer   ПубличноеIDПолученныйИзСервлетаДляUUID=0;    private   String   ПолученныйПоследнийМесяцДляСортировкиЕгоВСпиноре;    private   CREATE_DATABASE Create_Database_СсылкаНАБазовыйКласс;    private    List<String> АрайЛИстФИОВсеДляМетокТабеля=  Collections.synchronizedList(new LinkedList<String>());    private    Map<Long, String> ХэшФИОДляПосикаМетокТабеля= Collections.synchronizedMap(new LinkedHashMap<Long, String>());    private PUBLIC_CONTENT Class_Engine_SQLГдеНаходитьсяМенеджерПотоков =null;    private  ArrayAdapter<String> АдаптерДляСпинераДата;    private  Integer  ИндексСтрокКомпонентовТабеля=0;    private  String ДепартаментТабеляФинал;    private  String UUIDТабеляФинал;    private  String МесяцТабеляФинал;    private   String ГодВырезалиИзБуфераТабель;    private    String ПолноеНазваниеЗагруженногТАбеля;    private String МЕсяцДляКурсораТабелей;    private  String ГодДляКурсораТабелей;    private  int МЕсяцПриВставкеНовогоСотрудника ;    private  int ГодПриВставкеНовогоСотрудника;    private long  РезультатВставкиНовогоТабеляЧерезКонтрейнерТаблицыТабельОбновление = 0;    private long  РезультатВставкиНовогоТабеляЧерезКонтрейнерТаблицыТабель=0;    private   SQLiteCursor Курсор_ПолучаемВсюТаюлицуМетоккТабелю=null;    private  Context context;    private  ScrollView ГлавныйКойтейнерПоискаФИОСотрудника;    private Activity activity;    private   HashMap<String,Long> ХэшЛовимUUIDIDНазваниеСтолбикаЛокальный;    private  int IDЧьиДанныеДляСотрудников;    private int ЦифровоеИмяНовгоТабеля;    private  String ПолноеИмяТабеляПослеСозданиеНовогоСотрудника;    private      Long    UUIDТабеляПослеУспешногоСозданиеСотрудникаВсехСотридников;       private  long РодительскийUUDТаблицыТабель=0;    private SharedPreferences sharedPreferencesХранилище;    private  Service_for_AdminissionMaterial.LocalBinderДляПолучениеМатериалов binder;    @Override    protected void onCreate(Bundle savedInstanceState) {        try{            super.onCreate(savedInstanceState);            setContentView(R.layout.activity_main__status_tables);            context =this;            activity=this;            Class_Engine_SQLГдеНаходитьсяМенеджерПотоков =new PUBLIC_CONTENT(getApplicationContext());            getSupportActionBar().hide(); ///скрывать тул бар            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LOCKED);            getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);            Create_Database_СсылкаНАБазовыйКласс=new CREATE_DATABASE(getApplicationContext());            getWindow().addFlags(WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD                    | WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON                    | WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);            Log.d(this.getClass().getName(), "   ");            // Locale locale = Locale.ROOT;            Locale locale = new Locale("rus");            Locale.setDefault(locale);            config =                    getBaseContext().getResources().getConfiguration();            config.setLocale(locale);            createConfigurationContext(config);            Log.d(  this.getClass().getName(), " метод посика уже существующего сотрудника в базе андройжа");            ЛистСДаннымиМеткиТаебля = (ListView) findViewById(R.id.ЛистДляУстановкиМеткиТАбеляРодительская);            ГлавныйКойтейнерПоискаФИОСотрудника  = (ScrollView) findViewById(R.id. ГлавныйКойтейнерМетокТабеляСотрудника);            КнопкаНазадМеткаТабеля= findViewById(R.id.СтрелкаНазадУстановкиМеткиТабеля);// TODO: 14.10.2022  получением данные из хранилища            sharedPreferencesХранилище=getApplicationContext().getSharedPreferences("sharedPreferencesХранилище", Context.MODE_MULTI_PROCESS);            Log.d(  this.getClass().getName(), "sharedPreferencesХранилище"+  sharedPreferencesХранилище.getString("sharedPreferencesХранилищеkey","")    );            sharedPreferencesХранилище.registerOnSharedPreferenceChangeListener(new SharedPreferences.OnSharedPreferenceChangeListener() {                @Override                public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {                    Log.d(  this.getClass().getName(), " sharedPreferences "+sharedPreferences);                }            });            Bundle data=     getIntent().getExtras();            if (data!=null) {                binder=  (Service_for_AdminissionMaterial.LocalBinderДляПолучениеМатериалов) data.getBinder("binder");            }        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());             // TODO: 01.09.2021 метод вызова            new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),                    this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    @Override    protected void onStart() {        super.onStart();        try{        МетодПолучениеДАнныхЧерезИнтрентДляУстановкиСловаВЯчейкутабеля();    } catch (Exception e) {        e.printStackTrace();        ///метод запись ошибок в таблицу        Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());        // TODO: 01.09.2021 метод вызова        new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),                this.getClass().getName(),                Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());    }}    @Override    protected void onResume() {        super.onResume();                try{                    МетодОбработкиКликаПоЯчейкамСотрудникаВыбранным();                    МетодПриНАжатииНаКнопкуBACK();                    МетодПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск(null,Class_Engine_SQLГдеНаходитьсяМенеджерПотоков.МенеджерПотоков);                } catch (Exception e) {                    e.printStackTrace();                    ///метод запись ошибок в таблицу                    Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                            " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                // TODO: 01.09.2021 метод вызова            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),           this.getClass().getName(),                            Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());                }            }    @Override    protected void onDestroy() {        super.onDestroy();        //////TODO  данный код срабатывает когда произошда ошивка в базе    }    //todo метод возврата к предыдущему активти    private void МетодПриНАжатииНаКнопкуBACK() {        try{            /////            КнопкаНазадМеткаТабеля.setOnTouchListener(new View.OnTouchListener() {                @Override                public boolean onTouch(View v, MotionEvent event) {                    Log.d(this.getClass().getName(), " кликнем для созданни новго сотрдника при нажатии  ");                    ///todo код которыц возврящет предыдущий актвитики кнопка back                    МетодФинальныйКоторыйОтправлетДванныеДругомуАктивти();                    return false;                }            });        ///    } catch (Exception e) {        e.printStackTrace();        ///метод запись ошибок в таблицу        Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());    // TODO: 01.09.2021 метод вызова            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),           this.getClass().getName(),                Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());    }    }    private void МетодПолучениеДАнныхЧерезИнтрентДляУстановкиСловаВЯчейкутабеля() {        try{            Intent Интент_МеткиТАбеля= getIntent();            ДепартаментТабеляФинал= Интент_МеткиТАбеля .getStringExtra("ДепартаментТабеляФинал");            UUIDТабеляФинал= Интент_МеткиТАбеля .getStringExtra("UUIDТабеляФинал");            МесяцТабеляФинал= Интент_МеткиТАбеля .getStringExtra("МесяцТабеляФинал");            ГодВырезалиИзБуфераТабель= Интент_МеткиТАбеля .getStringExtra("ГодВырезалиИзБуфераТабель");            ПолноеНазваниеЗагруженногТАбеля= Интент_МеткиТАбеля .getStringExtra("ДепартаментТабеляВКоторомИНадоСоздатьНовогоСотрудника");            МЕсяцДляКурсораТабелей= Интент_МеткиТАбеля .getStringExtra("МЕсяцДляКурсораТабелей");            ГодДляКурсораТабелей= Интент_МеткиТАбеля .getStringExtra("ГодДляКурсораТабелей");            Log.d(  this.getClass().getName(), " ПолноеНазваниеЗагруженногТАбеля" +ПолноеНазваниеЗагруженногТАбеля                    + "  UUIDТабеляФинал " +UUIDТабеляФинал  + " МесяцТабеляФинал " +МесяцТабеляФинал+ " МЕсяцДляКурсораТабелей "                    +МЕсяцДляКурсораТабелей + " ГодДляКурсораТабелей " +ГодДляКурсораТабелей);            IDЧьиДанныеДляСотрудников= Интент_МеткиТАбеля .getIntExtra("IDЧьиДанныеДляСотрудников",0);            ПолноеИмяТабеляПослеСозданиеНовогоСотрудника= Интент_МеткиТАбеля .getStringExtra("ДепартаментТабеляИзВсехСотрудниковВТАбеле");            UUIDТабеляПослеУспешногоСозданиеСотрудникаВсехСотридников= Интент_МеткиТАбеля .getLongExtra("UUIDТабеляФиналПослеВыбораИзВсехСотрудниковВТАбеле",0l);            МесяцТабеляФинал= Интент_МеткиТАбеля .getStringExtra("МесяцТабеляФиналИзВсехСотрудниковВТАбеле");            ГодДляКурсораТабелей= Интент_МеткиТАбеля .getStringExtra("ГодФиналИзВсехСотрудниковВТАбеле");            ЦифровоеИмяНовгоТабеля= Интент_МеткиТАбеля.getIntExtra("ЦифровоеИмяНовгоТабеля",0);            if  (ДепартаментТабеляФинал==null  || ПолноеНазваниеЗагруженногТАбеля ==null){                ДепартаментТабеляФинал =ПолноеИмяТабеляПослеСозданиеНовогоСотрудника;               ПолноеНазваниеЗагруженногТАбеля= ПолноеИмяТабеляПослеСозданиеНовогоСотрудника;            }           if( UUIDТабеляФинал==null) {               UUIDТабеляФинал=String.valueOf(UUIDТабеляПослеУспешногоСозданиеСотрудникаВсехСотридников);           }            ХэшЛовимUUIDIDНазваниеСтолбикаЛокальный=new HashMap<>();             ХэшЛовимUUIDIDНазваниеСтолбикаЛокальный = (HashMap<String,Long>)Интент_МеткиТАбеля.getSerializableExtra("HashMap");            Log.d(this.getClass().getName(), "  ХэшЛовимUUIDIDНазваниеСтолбикаЛокальный   " +  ХэшЛовимUUIDIDНазваниеСтолбикаЛокальный.values());            ПолученныйПоследнийМесяцДляСортировкиЕгоВСпиноре =                    Интент_МеткиТАбеля.getStringExtra("ПолученныйПоследнийМесяцДляСортировкиЕгоВСпиноре");            Log.d(this.getClass().getName(), "  ПолученныйПоследнийМесяцДляСортировкиЕгоВСпиноре " + ПолученныйПоследнийМесяцДляСортировкиЕгоВСпиноре);            РодительскийUUDТаблицыТабель = Интент_МеткиТАбеля.getLongExtra("РодительскийUUDТаблицыТабель", 0);            Log.d(this.getClass().getName(), "  РодительскийUUDТаблицыТабель " + РодительскийUUDТаблицыТабель);        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                   new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    protected void МетодПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск(String ПоискФИОЧерезLIKE, CompletionService МенеджерПотоковВнутри) {        //todo перед созданием нового уьиваем из папмятт        /////TODO ЕСЛИ ОРГАНИЗАЦИЯ ДОБАВЛИСЬ ПОКАЗЫВАЕМ ЭТО ПОЛЬЗОВАТЕЛЮ        Toast aa = Toast.makeText(getApplicationContext(), "OPEN",Toast.LENGTH_SHORT);        //////        ImageView cc = new ImageView(getApplicationContext());        ///        Class_GRUD_SQL_Operations class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск=new Class_GRUD_SQL_Operations(getApplicationContext());        try {            String finalПоискФИОЧерезLIKE = ПоискФИОЧерезLIKE;            //////todo если пустой то без like            ////TODO ПОЛУЧАЕМ ВСЕ ДАННЫЕ ПО ТАБЛИЦУ ФИО ДЛЯ ПОСИКА            // TODO: 26.08.2021 НОВЫЙ ВЫЗОВ НОВОГО КЛАСС GRUD - ОПЕРАЦИИ            ///            class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("НазваниеОбрабоатываемойТаблицы","metki_tabel");            ///////            class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("СтолбцыОбработки","*");            //            /*        class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ФорматПосика","uuid=?    AND status_send !=? AND month_tabels=? AND  year_tabels =? AND fio IS NOT NULL ");                    ///"_id > ?   AND _id< ?"                    //////                    class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска1",finalПолученныйUUID);                    ///                    class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска2","Удаленная");                    ///                    class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска3",МЕсяцДляКурсораТабелей);                    //                    class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска4",ГодДляКурсораТабелей);////УсловиеПоискаv4,........УсловиеПоискаv5 .......*/            ////TODO другие поля            ///classGrudSqlOperations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ПоляГрупировки",null);            ////            //class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеГрупировки",null);            ////            class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеСортировки","date_update DESC");            ////            /// class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеЛимита","1");            ////            // TODO: 27.08.2021  ПОЛУЧЕНИЕ ДАННЫХ ОТ КЛАССА GRUD-ОПЕРАЦИИ            Курсор_ПолучаемВсюТаюлицуМетоккТабелю=null;            Курсор_ПолучаемВсюТаюлицуМетоккТабелю= (SQLiteCursor)  class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск.                    new GetData(getApplicationContext()).getdata(class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций,                    МенеджерПотоковВнутри,Create_Database_СсылкаНАБазовыйКласс.getССылкаНаСозданнуюБазу());            ////////            Log.d(this.getClass().getName(), "GetData "  +Курсор_ПолучаемВсюТаюлицуМетоккТабелю);/*            // TODO: 07.09.2021     ___old                ////TODO ПОЛУЧАЕМ ВСЕ ДАННЫЕ ПО ТАБЛИЦУ ФИО ДЛЯ ПОСИКА                            Курсор_ПолучаемВсюТаюлицуМетоккТабелю = new Class_MODEL_synchronized(getApplicationContext()).                                    КурсорУниверсальныйДляБазыДанных("metki_tabel", new String[]{"*"},                                    null, null,  null, null, "date_update DESC", null);///"SELECT name  FROM MODIFITATION_Client WHERE name=?",НазваниеТаблицНаСервере +"%"  // KEY_NAME + " LIKE ?"                     ////*/                /////////////////////////todo посик через Like            ////todo проверяем куроср            if (Курсор_ПолучаемВсюТаюлицуМетоккТабелю.getCount()>0){                ////                Курсор_ПолучаемВсюТаюлицуМетоккТабелю.moveToFirst();                ///////                Log.d(this.getClass().getName(), " Курсор_ПолучаемВсюТаюлицуМетоккТабелю.getCount()  " +Курсор_ПолучаемВсюТаюлицуМетоккТабелю.getCount() );                /////// //TODO инизалицируем ХЭШМАП                //TODO увелисиваем размер арайоиста                АрайЛИстФИОВсеДляМетокТабеля=new LinkedList<>();                ////                Log.d(this.getClass().getName()," АрайЛИстФИОВсеДляМетокТабеля.size() " +АрайЛИстФИОВсеДляМетокТабеля.size());                //TODO МЕТОД ЗАПОЛЕНИЯ ДАННЫМИ ПОИСКА ТАБЕЛЯ*/                МетодЗаполненияАктивтиДаннымиИзБазыДляЗаполенияМетокТабеля();                /////todo            }else{                Log.d(this.getClass().getName()," НЕт данных для ТАблицы Метки"+Курсор_ПолучаемВсюТаюлицуМетоккТабелю.getCount() );            }            //поймать ошибку всего классаIOException | MyException e    NumberFormatException        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());             // TODO: 01.09.2021 метод вызова            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),           this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    //todo метод заполнения активтии из таблицы фио//todo метод не ПОСТРЕДТСВЕНО АПОЛЯНЕТ LISTVIEW ДАНЫМИ    private void МетодЗаполненияАктивтиДаннымиИзБазыДляЗаполенияМетокТабеля() {        try{            ///todo перед заполенеем данных удалем возможные комнопенты на активити            try{                ГлавныйКонтейнерДляПосикаТабелей.removeAllViews();            } catch (Exception e) {              //  e.printStackTrace(); /*           ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());*/            }            Курсор_ПолучаемВсюТаюлицуМетоккТабелю.moveToFirst();            ХэшФИОДляПосикаМетокТабеля.clear();            ///////TODO тест код/*     Cursor       Курсор_ПолучаемВсюТаюлицуSimple = new Class_MODEL_synchronized(getApplicationContext()).КурсорУниверсальныйДляБазыДанных("tabels", new String[]{"_id,fio"},                    null, null, null, null, "date_update DESC", null);///"SELECT name  FROM MODIFITATION_Client WHERE name=?",            // НазваниеТаблицНаСервере +"%"  // KEY_NAME + " LIKE ?"            // new String[] { filter+"%" }, // new String[] {"%"+ filter+ "%" }, n            // формируем столбцы сопоставления          String[] from = new String[] { "fio"};            int[] to = new int[] { R.id.text2};          simpleCursorAdapter= new SimpleCursorAdapter(this,  R.layout.item_simple, Курсор_ПолучаемВсюТаюлицуSimple, from, to);CharSequence F= simpleCursorAdapter.convertToString(Курсор_ПолучаемВсюТаюлицуSimple);            final StringBuilder sb = new StringBuilder(F.length());            sb.append(F);            //simpleCursorAdapter.getCursor();            Log.d(this.getClass().getName(), "simpleCursorAdapter " + simpleCursorAdapter + " F " + F.toString() + " sb " + sb.toString());*/                           ////todo циклы заполения            ////todo начинаем цикл            do {   ///                //                ////TODO ДДАНЫЕ ИЗ БАЗЫ САМИ ФИО            int ИндексМетка=Курсор_ПолучаемВсюТаюлицуМетоккТабелю.getColumnIndex("metka");                String ПолученыеМетка=    Курсор_ПолучаемВсюТаюлицуМетоккТабелю.getString(ИндексМетка);                Log.d(this.getClass().getName(), " ПолученыеМетка " +ПолученыеМетка);                int ИндексПолноеМетка=Курсор_ПолучаемВсюТаюлицуМетоккТабелю.getColumnIndex("fullname_metka");                //////////////                String  ПолученыеПолноеМетка=Курсор_ПолучаемВсюТаюлицуМетоккТабелю.getString(ИндексПолноеМетка);                Log.d(this.getClass().getName(), "ПолученыеПолноеМетка " +ПолученыеПолноеМетка);                int ИндексUUIDМеткиМетки=Курсор_ПолучаемВсюТаюлицуМетоккТабелю.getColumnIndex("id");                long ПолученныйUUIDМеткиМетки=Курсор_ПолучаемВсюТаюлицуМетоккТабелю.getLong(ИндексUUIDМеткиМетки);                ///TODO ЧТО ПРИ КЛИКЕ ПОНИМАТЬ КАКАУЮ ЯЧЕЙКУ МЫ КЛИКНУЛИ МЫЗАПИСЫВАЕМ UUID ФИО В КОМПОНЕТ setTag                Log.d(this.getClass().getName()," ИндексСтрокКомпонентовТабеля "+ИндексСтрокКомпонентовТабеля +                        " ЛистСДаннымиМеткиТаебля.getTag() " +   ЛистСДаннымиМеткиТаебля.getTag() +                        "  ЛистСДаннымиМеткиТаебля.getId()) " +ЛистСДаннымиМеткиТаебля.getId()+                        " ПолученыеФИО " +ПолученыеМетка + " ПолученныйUUIDМеткиМетки " +ПолученныйUUIDМеткиМетки );                ///TODO ЗАПОЛЕНИЕЯ АРАЙЛИСТА И хЭШМЭПА                МетодЗаполенияАрайЛистаИХэшМэпаДляПосикаПоМетокТабеля(ПолученыеПолноеМетка,ПолученыеМетка,ПолученныйUUIDМеткиМетки);/*///TODO клик                МетодОбработкиКликаПоЯчейкамСотрудникаВыбранным();*/                //METHOD WHICH WILL HANDLE DYNAMIC INSERTION                //////TODO заврешаем уикл загрузки данных на ктивити табель                ////todo увеличитваем элемент                ИндексСтрокКомпонентовТабеля++;                ////////            } while (Курсор_ПолучаемВсюТаюлицуМетоккТабелю.moveToNext());            //////todo            ////TODO ПОСЛЕ ТОГО КАК ЗАПОЛНИЛИ АРАЙЛИСТ ПРИСВАИВАЕМ ВСЕ КОМПОНЕЕТЫ В LINEARLOUT            //TODO ЗАПОЛЕНЕИЯ АДАПТЕРА           АдаптерДляСпинераДата = new ArrayAdapter<String>(this, R.layout.list_item,  АрайЛИстФИОВсеДляМетокТабеля);//ХэшФИОДляПосикаМетокТабеля // АрайЛИстФИОВсеДляМетокТабеля // simple_list_item_checked //simple_list_item_multiple_choice            //////////////////TODO ЗАПОЛЕНИЕ                    ////TODO SET УСТАНОВКА ДАНЫХ В АДАПТЕР            ЛистСДаннымиМеткиТаебля.setAdapter(АдаптерДляСпинераДата);                   // ЛистСДаннымиМеткиТаебля.setBackgroundResource(R.drawable.textlines_tabeltwo);                    ЛистСДаннымиМеткиТаебля.setBackgroundResource(R.drawable.textlines_tabel_row_color_green);                    //////                                                                                   ///todoметод работает внутти listview                   try {                       ////todo главное добаление                       ГлавныйКонтейнерДляПосикаТабелей.addView(ЛистСДаннымиМеткиТаебля);                   } catch (Exception e) {                       // e.printStackTrace();//                ///метод запись ошибок в таблицу//                Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +//                        " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());      /*       // TODO: 01.09.2021 метод вызова            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),           this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());*/                                                                                   }                    //////            ЛистСДаннымиМеткиТаебля.deferNotifyDataSetChanged();            ЛистСДаннымиМеткиТаебля.invalidate();            ЛистСДаннымиМеткиТаебля.requestLayout();            //TODO чистим патять            ИндексСтрокКомпонентовТабеля=0;            Log.d(this.getClass().getName()," ИндексСтрокКомпонентовТабеля "+ИндексСтрокКомпонентовТабеля);        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());             // TODO: 01.09.2021 метод вызова            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),           this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    ///////////    private void МетодОбработкиКликаПоЯчейкамСотрудникаВыбранным() {        try{            //////                /////////       ЛистСДаннымиМеткиТаебля.setOnItemClickListener(new AdapterView.OnItemClickListener() {            @Override            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {                try {//TODO ПРИНУДИТЕЛЬНО ЗАПОЛНЯЕМ SETTAG                    ////// todo оформление                    if (Курсор_ПолучаемВсюТаюлицуМетоккТабелю != null) {                        if (Курсор_ПолучаемВсюТаюлицуМетоккТабелю.getCount() > 0) {                            ((TextView) view).setBackgroundColor(Color.GRAY);                            Log.d(this.getClass().getName(), "  Курсор_СамиФИОДляПоиска.getCount()" + Курсор_ПолучаемВсюТаюлицуМетоккТабелю.getCount());                            Курсор_ПолучаемВсюТаюлицуМетоккТабелю.moveToFirst();                            while (Курсор_ПолучаемВсюТаюлицуМетоккТабелю.move(position)) {                                long UUIDПолучаемДляОправкиПослеПосикаМетокТабеля = Курсор_ПолучаемВсюТаюлицуМетоккТабелю.getLong(0);                                //////                                Log.d(this.getClass().getName(), " UUIDПолучаемДляОправкиПослеПосикаМетокТабеля " + UUIDПолучаемДляОправкиПослеПосикаМетокТабеля);                                ///////                                ((TextView) parent.getChildAt(0)).setTag(UUIDПолучаемДляОправкиПослеПосикаМетокТабеля);//////ВЫДЕЛЕМ ЖИРНЫМ ЦВЕТОМ ДАТЫ                             TextView textView=  (TextView) parent.getChildAt((int) id);                                Log.d(this.getClass().getName(), " UUIDПолучаемДляОправкиПослеПосикаМетокТабеля " + UUIDПолучаемДляОправкиПослеПосикаМетокТабеля);                                break;                            }//todo ЗАПОЛЯЕМ UUID И ИМЯ ФИО                            TextView textView = (TextView) view;                            long UUIDgetTagДляПосикаПолученныйИзListView = (long) ((TextView) parent.getChildAt(0)).getTag();//////ВЫДЕЛЕМ ЖИРНЫМ ЦВЕТОМ ДАТЫ                            String СамоЗначениеМеткиДляУстановкивТабелеПолученныйИзListView = textView.getText().toString().trim(); // получаем текст нажатого элемента                            ///////TODO вытасиваем само значение МЕЖДУ СКОБКАМИ                            Log.d(this.getClass().getName(), " СамоЗначениеМеткиДляУстановкивТабелеПолученныйИзListView " + СамоЗначениеМеткиДляУстановкивТабелеПолученныйИзListView+" UUIDgetTagДляПосикаПолученныйИзListView  " +UUIDgetTagДляПосикаПолученныйИзListView );                            int ЛовимПервуюСкобку = СамоЗначениеМеткиДляУстановкивТабелеПолученныйИзListView.indexOf("(") + 1;                            int ЛовимВторуюСкобку = СамоЗначениеМеткиДляУстановкивТабелеПолученныйИзListView.indexOf(")");                            СамоЗначениеМеткиДляУстановкивТабелеПолученныйИзListView = СамоЗначениеМеткиДляУстановкивТабелеПолученныйИзListView.substring(ЛовимПервуюСкобку, ЛовимВторуюСкобку);                            //////                            Log.d(this.getClass().getName(), " СамоЗначениеМеткиДляУстановкивТабелеПолученныйИзListView " + СамоЗначениеМеткиДляУстановкивТабелеПолученныйИзListView);                            //Toast.makeText(getApplicationContext(), " Вы выбрали ФИО : " + СамоЗначениеМеткиДляУстановкивТабелеПолученныйИзListView   , Toast.LENGTH_LONG).show();                            //  Toast.makeText(getApplicationContext(), " Вы выбрали : " + String.valueOf(UUIDgetTagДляПосикаПолученныйИзListView ) , Toast.LENGTH_LONG).show();                            //TODO ПОЛУЧЕНЫЕ ЗНАЧЕНИЯ UUID  И ФИО ЗАПОЛЯНЕМ В ХЭШМЭП                            if (UUIDgetTagДляПосикаПолученныйИзListView != 0 && СамоЗначениеМеткиДляУстановкивТабелеПолученныйИзListView != null && ХэшФИОДляПосикаМетокТабеля.size() <= 1) {                                ХэшФИОДляПосикаМетокТабеля=new HashMap<>();                                /////todo заполение хэша сотрудниками котрые мы  ПОДОБРАЛИ                                ХэшФИОДляПосикаМетокТабеля.put(UUIDgetTagДляПосикаПолученныйИзListView, СамоЗначениеМеткиДляУстановкивТабелеПолученныйИзListView);                                Log.d(this.getClass().getName(), "  ХэшФИОДляПосикаМетокТабеля.size() " + ХэшФИОДляПосикаМетокТабеля.size() +                                        "  ХэшФИОДляПосикаМетокТабеля.toString() " + ХэшФИОДляПосикаМетокТабеля.toString());                                ////todo ПРИ КЛИКЕ ПО СТРОЧКЕ В МЕТКА ПЕРЕНАПРАВЛЯЕТ МЕТОД НА ЗАПИСЬ ВЫБНОГО В БАЗУ ASYTASK                                МетодРаботуКнопкиКотораяОтправляетПодобранныхСотрудников();                                //todo после вставки обнуляем переменные                                UUIDgetTagДляПосикаПолученныйИзListView = 0;                                СамоЗначениеМеткиДляУстановкивТабелеПолученныйИзListView = null;                            }                        }                    }                    /////                } catch (Exception e) {                    e.printStackTrace();                    ///метод запись ошибок в таблицу                    Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                            " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                     // TODO: 01.09.2021 метод вызова            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),           this.getClass().getName(),                            Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());                }            }        });        //////todo    } catch (Exception e) {        e.printStackTrace();        ///метод запись ошибок в таблицу        Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());         // TODO: 01.09.2021 метод вызова            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),           this.getClass().getName(),                Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());    }    }    ////todo метод отправки полученых сотрудников на другую активти    private void МетодРаботуКнопкиКотораяОтправляетПодобранныхСотрудников() {        try{                    Log.d(this.getClass().getName(), " кликнем для созданни новго сотрдника при нажатии  " + " ХэшФИОДляПосикаМетокТабеля " + ХэшФИОДляПосикаМетокТабеля.values());                    if (ХэшФИОДляПосикаМетокТабеля!=null){                    ///////TODO перед созданием определяем не пустые ли значения                    if (ХэшФИОДляПосикаМетокТабеля.size() == 1) {                        ////////                        ////todo запускаем сообщение которое спрашиваемт установить ли в табель ВЫБРАННУЮ МЕТКУ        ///todo ВСТАВКИ ВЫБРАНОГО СОТРУЖИНКА КОТОРРЫЙ УЖЕ ЕСТЬ В  БАЗЕ   Integer резуьттатВставкиМеткиТабеля=     МетодЗапускаВставкиВыбраннойМеткиТабеляВГотовыйТабель();        ////            МетодЗапускаетьсяПослеУспешнойВставкиМеткивТабель(резуьттатВставкиМеткиТабеля);            ////            ////////TODO ФИНАЛ ПЕРЕХОД НА ДРУГОЕ АКТВИТИ                         /*  // TODO: 01.07.2021  после локальной обнолвения поробуем вотрунть синхронизацию локальную  в фоне и порстмортрим что будет                            Integer РезультатФоновойСинхронизации=          new Class_MODEL_synchronized(getApplicationContext()).                                    МетодЗапускаФоновойСинхронизацииДополнительноНаSingleТабеле(getApplicationContext());                            Log.d(this.getClass().getName(), " РезультатФоновойСинхронизации "+РезультатФоновойСинхронизации);*/                            //TODO финальный метод после успешной ввставки метки табеля                            МетодФинальныйКоторыйОтправлетДванныеДругомуАктивти();                    }                }        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());             // TODO: 01.09.2021 метод вызова            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),           this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    //TODO метод который запускаеться после встаки данных на метки в табель    private void МетодЗапускаетьсяПослеУспешнойВставкиМеткивТабель(Integer РезультатМетсиТабеляВставки) {  try{      Log.d(this.getClass().getName(), "  PUBLIC_CONTENT.КоличествоУспешныхОбновлений  "  +РезультатМетсиТабеляВставки  );      /////TODO УСПЕШНОЕ  ДОБАВЛЕНИЕ ВЫБРАННЫХ СОТРУДНИКОВ В ТАБЕЛЬ      if (  РезультатМетсиТабеляВставки>0){ //;////ПРИ УСПЕШНОЙ ВСТАВКИ ДАННЫХ  ПЕРЕДАЕМ СТАТИЧНОМУ СЁЧИКК  ОБНОВЛЕНИЙ ЧТО НАДО УВЕЛИЧИТ ЗНАЧЕНИЕ НА 1+>0) {          ((Activity) context) .runOnUiThread(new Runnable() {              @Override              public void run() {          Toast aa = Toast.makeText(getApplicationContext(), "OPEN",Toast.LENGTH_SHORT);          ImageView cc = new ImageView(getApplicationContext());     //     cc.setImageResource(R.drawable.icon_dsu1_add_organisazio_success);//icon_dsu1_synchronisazia_dsu1_success          aa.setView(cc);          aa.show();              }          });      }else{          Log.e(this.getClass().getName(), "Ошибка  новый сотрудник не вставилься" );          ///TODO сообщаем об успешном создаении данных          ((Activity) context) .runOnUiThread(new Runnable() {              @Override              public void run() {                  Toast aa = Toast.makeText(getApplicationContext(), "OPEN", Toast.LENGTH_SHORT);                  ImageView cc = new ImageView(getApplicationContext());                  cc.setImageResource(R.drawable.icon_dsu1_add_organisazio_error);//icon_dsu1_synchronisazia_dsu1_success                  aa.setView(cc);                  aa.show();                  ///////              }});      }///TODO после успешной встаки удаляем      ХэшЛовимUUIDIDНазваниеСтолбикаЛокальный.clear();      ХэшФИОДляПосикаМетокТабеля.clear();      ///TODO ПОСЛЕ ОТПРАВКИ ОДНУЛЯЕМ ПЕРЕДВАЕМЫЙ хэш      ///TODO ошибка      Курсор_ПолучаемВсюТаюлицуМетоккТабелю.close();    } catch (Exception e) {        e.printStackTrace();        ///метод запись ошибок в таблицу        Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());         // TODO: 01.09.2021 метод вызова            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),           this.getClass().getName(),                Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());    }    }    ///todo сообщение на активти ПОДБОР СОТРУДНИКА КОТОРЫЙ УЖЕ ЕСТЬ В БАЗЕ И ОТПРАВИТЬ ЕГО НА ДРУГТУЮ АКТИВНОСТЬ ПО ЗАПОДЕНИЮ В ТАБЕЛЬ    ////todo добавления уже действущего сотрдника////todo добавления уже действущего сотрдника    private  Integer МетодЗапускаВставкиВыбраннойМеткиТабеляВГотовыйТабель() {        Integer РезультатВставкиМетвиТабеля=0;        try{            ///TODO засыпаем цикл чтобы он не падал            //  TimeUnit.MILLISECONDS.sleep(100);            ///todo перед вставкой обнуляем            //TODO ЗАПУСКАЕМ ФУТУРЕ            Log.d(this.getClass().getName(), " ХэшФИОДляПосикаМетокТабеля  "+ХэшФИОДляПосикаМетокТабеля.values());            ////TODO КОД ПОСЛЕ ПОДБОРА  СУЩЕСТВУЕЩЕГО СОТРУДНИКА И ВСТАКА ЕГО В ДЕЙСТВУЩЕЙ ТАБЕЛЬ            //////todo РАСПРСИВАЕМ ПРИШЕДШИЙ ХЭШМАП С ПОДОБРАНЫМИ СОТРУНИКАМИ  цикл for                    Log.d(this.getClass().getName(), " asyncTask ");//////todo сохраняем выбранных сотрудников в ТЕКУЩИЙ ТАБЕЛЬ                    for (Map.Entry<Long, String> entry : ХэшФИОДляПосикаМетокТабеля.entrySet()) {                        /////TODO СОН                        final Long UUIDДанныйПришелПослеВЫбораУжеСуществующегоСотрудника=entry.getKey();                        final String ФИОДляВставки =entry.getValue();                        Log.d(this.getClass().getName(), " UUIDДанныйПришелПослеВЫбораУжеСуществующегоСотрудника " +UUIDДанныйПришелПослеВЫбораУжеСуществующегоСотрудника+                                " entry.getValue( " + entry.getValue());//TODO  ОЧИЩАЕМ ПАМТЬ                        ///TODO ЗАПУСКАЕМ  ПуллПамяти                        try{                            ///TODO FUTURE                 РезультатВставкиМетвиТабеля=           МетодОпределенияВставкиВыбранойМеткиТабеляЧерезПоиск(UUIDДанныйПришелПослеВЫбораУжеСуществующегоСотрудника,ФИОДляВставки);                            //TODO ЗАПУСКАЕМ ФУТУРЕ                            ///TODO удаляем из хэшмапа внутри цыкла после успешной вставки цикл чтобы он не падал                            /////////TODO ПОСЛЕ ВСТАВКИ РАЗБЛОРИКУМ ПОТОК                            Log.d(this.getClass().getName(), " РезультатВставкиМетвиТабеля " +РезультатВставкиМетвиТабеля);                        } catch (Exception e) {                            //  Block of code to handle errors                            e.printStackTrace();                            ///метод запись ошибок в таблицу                            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                                    + Thread.currentThread().getStackTrace()[2].getLineNumber());                                   new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                                    Thread.currentThread().getStackTrace()[2].getLineNumber());                        }                    }/////TODO END FOR            ///////        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                   new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }        return  РезультатВставкиМетвиТабеля;    }    protected   Integer МетодОпределенияВставкиВыбранойМеткиТабеляЧерезПоиск(long UUIDДанныйПришелПослеВЫбораУжеСуществующегоСотрудника,String ФИОДляВставки) {        ///todo САМА ВСТВКА ТАБЛИЦА ТАЕБЛЬ        Integer РезультатОбовленияСтатусаМеткиВТабеле = 0;        try{            ////todo месяц и год нового сотрудника            МЕсяцПриВставкеНовогоСотрудника = МетодПолучениниеМесяцПриСозданииНовогоСОтрудника(МесяцТабеляФинал);            ГодПриВставкеНовогоСотрудника = МетодПолучениниеГОдПриСозданииНовогоСОтрудника(МесяцТабеляФинал);            Log.d(this.getClass().getName(), " МЕсяцПриВставкеНовогоСотрудника  " +МЕсяцПриВставкеНовогоСотрудника                    + "  ГодПриВставкеНовогоСотрудника " +ГодПриВставкеНовогоСотрудника + " UUIDТабеляФинал " +UUIDТабеляФинал);            /////TODO КОД ЧИСТА ВСТАВКИ НОВОГО ТАБЕЛЯ И В НЕГО ОВГО СОТРУЖНИКА            ///TODO ТАБЛИЦА ТАБЕЛЬ ТОЛЬКО ВВСТАВКА ТАБЕЛЬ            ContentValues  АдаптерДляУстановкиВыбраннойМеткиТабеля = new ContentValues();////контрейнер для нового табеля            ///TODO сами данные таблица TABEL вставка            String ЯчейкаТабеляКудаВставляемВыбрануюМетку = null;            /////            Long UUIDсотрудникаКтоВыбралМеткуТабеля = null;            ////TODO ТУТ МЫ ПАРСИМ ХЭШ МЭП И ВСТАВЛЯЕМ ЕГО ВТАБЕЛЬ ВЫБРАННУЮ МЕТКУ ТАБЕЛЯ            for (Map.Entry<String, Long> ХэшДеньВТАбеле : ХэшЛовимUUIDIDНазваниеСтолбикаЛокальный.entrySet()) {                //////////////////                 ЯчейкаТабеляКудаВставляемВыбрануюМетку = ХэшДеньВТАбеле.getKey();                 ////////               UUIDсотрудникаКтоВыбралМеткуТабеля =ХэшДеньВТАбеле.getValue();                // TODO: 25.05.2021                break;            }            Long     UUIDМетки = null;            String   НазваниеВыбранойМетки = null;            ////TODO ТУТ МЫ ПАРСИМ ХЭШ МЭП И ВЫТАСКИВАЕМ САМУ МЕТКУ ТАБЕЛЯ ВЫБРАНОГО НА АКТИВТИ МЕТКИ ТАБЕЛЯ            for (Map.Entry< Long,String> ХэшСамаМетка :  ХэшФИОДляПосикаМетокТабеля.entrySet()) {                //////////////////           UUIDМетки = ХэшСамаМетка.getKey();           НазваниеВыбранойМетки =ХэшСамаМетка.getValue();                break;            }            ////TODO полученные результаты            Log.d(this.getClass().getName(), " ЯчейкаТабеляКудаВставляемВыбрануюМетку  " +ЯчейкаТабеляКудаВставляемВыбрануюМетку                    + " UUIDсотрудникаКтоВыбралМеткуТабеля " +UUIDсотрудникаКтоВыбралМеткуТабеля+ "\n"+          " UUIDМетки "+UUIDМетки+ "НазваниеВыбранойМетки    " + НазваниеВыбранойМетки   );            АдаптерДляУстановкиВыбраннойМеткиТабеля.put( ЯчейкаТабеляКудаВставляемВыбрануюМетку , НазваниеВыбранойМетки);            String ДатаПриВыбореСотрудникаВставка=ГлавнаяДатаИВремяОперацийСБазойДанных();            АдаптерДляУстановкиВыбраннойМеткиТабеля.put("date_update", ДатаПриВыбореСотрудникаВставка);            Class_GRUD_SQL_Operations        class_grud_sql_operationsПовышаемВерсиюДанныхПриСозданеииИзШаблонаСотрудника=new Class_GRUD_SQL_Operations(getApplicationContext());            // TODO: 18.03.2023  получаем ВЕСИЮ ДАННЫХ            Long РезультатУвеличинаяВерсияДАныхЧата =                    new SubClassUpVersionDATA().МетодПовышаемВерсииCurrentTable(    "data_tabels",getApplicationContext(),Create_Database_СсылкаНАБазовыйКласс.getССылкаНаСозданнуюБазу());            Log.d(this.getClass().getName(), " РезультатУвеличинаяВерсияДАныхЧата  " + РезультатУвеличинаяВерсияДАныхЧата);            АдаптерДляУстановкиВыбраннойМеткиТабеля.put("current_table", РезультатУвеличинаяВерсияДАныхЧата);            Log.d(this.getClass().getName(), "   current_table УВЕЛИЧИВАЕМ ВЕРИСЮ ДАННЫХ ВНУТРИ ТАБЛИЦЫ  РезультатУвеличинаяВерсияДАныхЧата" +  РезультатУвеличинаяВерсияДАныхЧата);            Integer Результат_ПриписиИзменнийВерсииДанныхВФонеПослеОбработкиТекущийТаблицы =0;            Class_GRUD_SQL_Operations class_grud_sql_operationsОпределенияВставкиВыбранойМеткиТабеляЧерезПоиск=new Class_GRUD_SQL_Operations(getApplicationContext());            String ТекущаяТаблицыДляВставкиМетки="data_tabels";            class_grud_sql_operationsОпределенияВставкиВыбранойМеткиТабеляЧерезПоиск.                    concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("НазваниеОбрабоатываемойТаблицы",ТекущаяТаблицыДляВставкиМетки);            class_grud_sql_operationsОпределенияВставкиВыбранойМеткиТабеляЧерезПоиск.                    concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("Флаг_ЧерезКакоеПолеОбновлением","uuid");            class_grud_sql_operationsОпределенияВставкиВыбранойМеткиТабеляЧерезПоиск.                    concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ЗначениеФлагОбновления",UUIDсотрудникаКтоВыбралМеткуТабеля);            class_grud_sql_operationsОпределенияВставкиВыбранойМеткиТабеляЧерезПоиск.                    concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ЗнакФлагОбновления","=");            ////TODO КОНТЕЙНЕР ДЛЯ ОБНОВЛЕНИЯ            class_grud_sql_operationsОпределенияВставкиВыбранойМеткиТабеляЧерезПоиск                    .contentValuesДляSQLBuilder_Для_GRUD_Операций.putAll(АдаптерДляУстановкиВыбраннойМеткиТабеля);            РезультатОбовленияСтатусаМеткиВТабеле= (Integer)  class_grud_sql_operationsОпределенияВставкиВыбранойМеткиТабеляЧерезПоиск.                    new UpdateData(getApplicationContext()).updatedata(class_grud_sql_operationsОпределенияВставкиВыбранойМеткиТабеляЧерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций,                    class_grud_sql_operationsОпределенияВставкиВыбранойМеткиТабеляЧерезПоиск.contentValuesДляSQLBuilder_Для_GRUD_Операций,                    Class_Engine_SQLГдеНаходитьсяМенеджерПотоков.МенеджерПотоков,Create_Database_СсылкаНАБазовыйКласс.getССылкаНаСозданнуюБазу());            Log.d(this.getClass().getName(), " РезультатОбовленияСтатусаМеткиВТабеле[0] " +  РезультатОбовленияСтатусаМеткиВТабеле);            Log.d(this.getClass().getName(), " РезультатВставкиПодобраногоСотрудниковВТабель" + РезультатОбовленияСтатусаМеткиВТабеле);            //////TODO ПОСЛЕ УСПЕШНОЙ ВСТВКИ ВЫБАРНЫХ СОТРУДНИКА МЕНЯЕМ ВЕРСИЮ ДАННЫХ ДАТЫ НА УКАЗАНОЙ ТАБЛИЦЕ            ///TODO проверка встаки из уже выбраный сотрудников            if (РезультатОбовленияСтатусаМеткиВТабеле> 0 ) {                /////TODO ПОСЛЕ УСПЕШНОЙ ВСТАВКИ УВЕЛИЧИВАЕМ СЧЕТЧИК                АдаптерДляУстановкиВыбраннойМеткиТабеля.clear();                ////                Log.d(this.getClass().getName(), " РезультатОбовленияСтатусаМеткиВТабеле[0] ВСТАВКА МЕТКИ НОВОЙ"                        +РезультатОбовленияСтатусаМеткиВТабеле);            }else{                Log.e(this.getClass().getName(), "Ошибка  новый сотрудник не вставилься" );                Toast.makeText(getApplicationContext(), " Метка в табель не сохранилась !!!! "  , Toast.LENGTH_LONG).show();            }        } catch (Exception e) {            e.fillInStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                   new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }return  РезультатОбовленияСтатусаМеткиВТабеле;    }    protected  Long МетодПолучениеОрганизацииНепосрдственодляДанногоСОтрудника() throws InterruptedException, ExecutionException, TimeoutException {        Long названиеорганизациидлясотркдника=0l;////TODO КУРСОР ПРОВЕЯЕТ ПЕРВЫЙ ЭТО ЗАПУСК ИЛИ НЕТ       SQLiteCursor Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего = null;       //        Class_GRUD_SQL_Operations class_grud_sql_operationsПолучениеОрганизацииНепосрдственодляДанногоСОтрудника=new Class_GRUD_SQL_Operations(getApplicationContext());        ///////////////////////////////////        // ID        // TODO: 26.08.2021 НОВЫЙ ВЫЗОВ НОВОГО КЛАСС GRUD - ОПЕРАЦИИ        Class_GRUD_SQL_Operations class_grud_sql_operationsПолучаемНаБазуUUIDфиоПолучаемИзТаблицыФИОИМЯ= new Class_GRUD_SQL_Operations(getApplicationContext());        ///        class_grud_sql_operationsПолучаемНаБазуUUIDфиоПолучаемИзТаблицыФИОИМЯ. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("СамFreeSQLКОд",                " SELECT id  FROM successlogin  ORDER BY date_update DESC ;");        // TODO: 12.10.2021  Ссылка Менеджер Потоков        PUBLIC_CONTENT  Class_Engine_SQLГдеНаходитьсяМенеджерПотоков =new PUBLIC_CONTENT (getApplicationContext());        ///////        SQLiteCursor            Курсор_ПолучаемПубличныйID= (SQLiteCursor) class_grud_sql_operationsПолучаемНаБазуUUIDфиоПолучаемИзТаблицыФИОИМЯ.                new GetаFreeData(getApplicationContext()).getfreedata(class_grud_sql_operationsПолучаемНаБазуUUIDфиоПолучаемИзТаблицыФИОИМЯ. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций,                Class_Engine_SQLГдеНаходитьсяМенеджерПотоков.МенеджерПотоков,Create_Database_СсылкаНАБазовыйКласс.getССылкаНаСозданнуюБазу());        if(Курсор_ПолучаемПубличныйID.getCount()>0){            ///            Курсор_ПолучаемПубличныйID.moveToFirst();            /////            ПубличноеIDПолученныйИзСервлетаДляUUID=         Курсор_ПолучаемПубличныйID.getInt(0);///            Log.d(this.getClass().getName(), " ПубличноеIDПолученныйИзСервлетаДляUUID  " + ПубличноеIDПолученныйИзСервлетаДляUUID);        }        try {            // TODO: 26.08.2021 НОВЫЙ ВЫЗОВ НОВОГО КЛАСС GRUD - ОПЕРАЦИИ            ///            class_grud_sql_operationsПолучениеОрганизацииНепосрдственодляДанногоСОтрудника. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("НазваниеОбрабоатываемойТаблицы","SuccessLogin");            ///////            class_grud_sql_operationsПолучениеОрганизацииНепосрдственодляДанногоСОтрудника. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("СтолбцыОбработки","organizations");            //            class_grud_sql_operationsПолучениеОрганизацииНепосрдственодляДанногоСОтрудника. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ФорматПосика","id=? AND organizations IS NOT NULL ");                    ///"_id > ?   AND _id< ?"                    //////            class_grud_sql_operationsПолучениеОрганизацииНепосрдственодляДанногоСОтрудника. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска1",ПубличноеIDПолученныйИзСервлетаДляUUID);                    ///               /*     class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска2","Удаленная");                    ///                    class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска3",МЕсяцДляКурсораТабелей);                    //                    class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска4",ГодДляКурсораТабелей);////УсловиеПоискаv4,........УсловиеПоискаv5 .......            ////TODO другие поля*/            ///classGrudSqlOperations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ПоляГрупировки",null);            ////            //class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеГрупировки",null);            ////            ///class_grud_sql_operationsПолучениеИмяСистемы. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеСортировки","date_update");            ////            /// class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеЛимита","1");            ////            // TODO: 27.08.2021  ПОЛУЧЕНИЕ ДАННЫХ ОТ КЛАССА GRUD-ОПЕРАЦИИ            Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего= (SQLiteCursor)  new Class_GRUD_SQL_Operations(getApplicationContext()).                    new GetData(getApplicationContext()).getdata(class_grud_sql_operationsПолучениеОрганизацииНепосрдственодляДанногоСОтрудника. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций,                    Class_Engine_SQLГдеНаходитьсяМенеджерПотоков.МенеджерПотоков,Create_Database_СсылкаНАБазовыйКласс.getССылкаНаСозданнуюБазу());            Log.d(this.getClass().getName(), "GetData "  +Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего);         /*            // TODO: 07.09.2021    _______old            Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего =                    new Class_MODEL_synchronized(getApplicationContext()).КурсорУниверсальныйДляБазыДанных("SuccessLogin",                            new String[]{"organizations"}, "id=? AND organizations IS NOT NULL", new String[]{PUBLIC_CONTENT.ПубличноеIDПолученныйИзСервлетаДляUUID}, null, null, null, null);//"SuccessLogin", "date_update","id=","1",null,null,null,null*/              // TODO: 07.09.2021  результат запроса        if (Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего.getCount() > 0) { //TODO ЕСЛИ ДАННЫЙ UUID НЕ ПУСТОЙ ЭТО ЗНАЧИТ ЧТО ЭТОТ ТАБЕЛЬ УЖЕ СУЩЕТСВЕТ И НАМ НАДО ОБНОВИТЬ            ////TODO ТАБЕЛЬ УЖЕ ЕСТЬ И МЫ ЕГО ОБНОЫЛЕНИЯ ПубличноеИмяНовогоТабеля            Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего.moveToFirst();            //todo определяем есть uuid в строчке или нет            Log.d(this.getClass().getName(), "Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего  " +                    Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего.getCount());            названиеорганизациидлясотркдника= Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего.getLong(0);            /////            Log.d(this.getClass().getName(), " названиеорганизациидлясотркдника " +                    названиеорганизациидлясотркдника);                        ///todo вырубаем курсор            Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего.close();        }        } catch (Exception e) {            ///////TODO error            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());            /////        }        return  названиеорганизациидлясотркдника;    }    /////todo метод заполения аралилта и хэшмема    protected void МетодЗаполенияАрайЛистаИХэшМэпаДляПосикаПоМетокТабеля( String ПолученыеПолноеМетка,String ПолученыеМетка,Long ПолученныйUUIDМеткиМетки) {        try{            /////TODO НЕ ПОСТРДВСТВЕНО ЗАПОЛЯНЕМ LISTVIEW  ДАННЫМИ            АрайЛИстФИОВсеДляМетокТабеля.add("\n"+ПолученыеПолноеМетка+ "   ("+ПолученыеМетка+")"+"\n"+"\n" );            Log.d(this.getClass().getName(), "  АрайЛИстФИОВсеДляМетокТабеля.size() " + АрайЛИстФИОВсеДляМетокТабеля.size()                    + " АрайЛИстФИОВсеДляМетокТабеля " +АрайЛИстФИОВсеДляМетокТабеля.toString() + " ПолученныйUUIDМеткиМетки  "            +ПолученныйUUIDМеткиМетки);     /////todo заполения TAG uuid меток табеля            ЛистСДаннымиМеткиТаебля.setTag(String.valueOf(ПолученныйUUIDМеткиМетки));        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());             // TODO: 01.09.2021 метод вызова            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),           this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    // TODO КОД СЛУШАТЕЛЬ ПРИ НАЖАТИИ НА ТАБЕЛЬ Создаем экземпляр TextWatcher:    private final TextWatcher СлушательПолученияДанных = new TextWatcher() {        public void beforeTextChanged (CharSequence s,int start, int count, int after){            Log.d(this.getClass().getName(), "  beforeTextChanged  " + s.toString());            String ЗначениевПоискеФИО = s.toString();        }        public void onTextChanged (CharSequence s,int start, int before, int count){            Log.d(this.getClass().getName(), "  onTextChanged  " + s.toString());        }        //Задаем действия для TextView после смены введенных в EditText символов:        public void afterTextChanged (Editable s){            try {                //TODO ДАННЫЙ КОД НЕПОСТРЕДСТВЕННО ЗАРУСКАЕТ ОБНОВЛЕНИЕ ЛОКАЛЬНОЕ С АКТИВТИИ                Log.d(this.getClass().getName(), "  afterTextChanged " + s.toString());                String СамоЗначениеЯчейкиТабеля = s.toString();                Log.d(this.getClass().getName(), "  СамоЗначениеЯчейкиТабеля" + СамоЗначениеЯчейкиТабеля);                Log.d(this.getClass().getName(), "  СамоЗначениеЯчейкиТабеля" + СамоЗначениеЯчейкиТабеля);                ////TODO запускаем метод ЛОКАЛЬНОГО ОБНОВЛЕНИЕ ПОСЛЕ ПОЛУЧЕННЫХ ДАННЫХ                МетодПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск(СамоЗначениеЯчейкиТабеля,Class_Engine_SQLГдеНаходитьсяМенеджерПотоков.МенеджерПотоков); // TODO ПОСИК С LIKE                /////            } catch (Exception e) {                e.printStackTrace();                ///метод запись ошибок в таблицу                Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                        " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                 // TODO: 01.09.2021 метод вызова            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),           this.getClass().getName(),                        Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());            } finally {            }        }    };    //TODO метод получени месяа для записи в одну колонку    private int МетодПолучениниеМесяцПриСозданииНовогоСОтрудника(String ДатаКоторуюНадоПеревестиИзТекставЦифру) throws ParseException {        int month = 0;        try{            System.out.println(" " + ДатаКоторуюНадоПеревестиИзТекставЦифру + " " + ДатаКоторуюНадоПеревестиИзТекставЦифру);            SimpleDateFormat formatмесяц = new SimpleDateFormat("LLLL  yyyy", new Locale("ru"));            // formatмесяц.setTimeZone(TimeZone.getTimeZone("UTC-03:00"));            formatмесяц.setTimeZone(TimeZone.getTimeZone("Europe/Moscow"));            Date date = formatмесяц.parse(ДатаКоторуюНадоПеревестиИзТекставЦифру);            GregorianCalendar calendar = (GregorianCalendar) GregorianCalendar.getInstance(new Locale("ru"));            calendar.setTime(date);            /////TODO ОБРАБАТЫВАЕМ ДАННЫЕ ДАТЫ ЯНВАРЬ            if (ДатаКоторуюНадоПеревестиИзТекставЦифру.matches("(.*)Январь(.*)")) {                month = calendar.get(Calendar.MONTH)+1;            } else                month = calendar.get(Calendar.MONTH) + 1;            ///////        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());             // TODO: 01.09.2021 метод вызова            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),           this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }        return month;    }    //TODO метод получени месяа для записи в одну колонку    private int МетодПолучениниеГОдПриСозданииНовогоСОтрудника(String ДатаКоторуюНадоПеревестиИзТекставЦифру) throws ParseException {        int year= 0;        try{            System.out.println("ДатаКоторуюНадоПеревестиИзТекставЦифру " + ДатаКоторуюНадоПеревестиИзТекставЦифру);            SimpleDateFormat formatгод = new SimpleDateFormat("LLLL  yyyy", new Locale("ru"));            // formatгод.setTimeZone(TimeZone.getTimeZone("UTC-03:00"));            formatгод.setTimeZone(TimeZone.getTimeZone("Europe/Moscow"));            Date date = formatгод.parse(ДатаКоторуюНадоПеревестиИзТекставЦифру);            Calendar calendar = Calendar.getInstance(new Locale("ru"));            calendar.setTime(date);            if (ДатаКоторуюНадоПеревестиИзТекставЦифру.matches("(.*)Январь(.*)")) {                year = calendar.get(Calendar.YEAR);            } else                year = calendar.get(Calendar.YEAR);        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());             // TODO: 01.09.2021 метод вызова            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),           this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }        return year;    }    //функция получающая время операции ДАННАЯ ФУНКЦИЯ ВРЕМЯ ПРИМЕНЯЕТЬСЯ ВО ВСЕЙ ПРОГРАММЕ    public String ГлавнаяДатаИВремяОперацийСБазойДанных() {        Date Дата = Calendar.getInstance().getTime();        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS", new Locale("ru"));//"yyyy-MM-dd HH:mm:ss.SSS"//"yyyy-MM-dd'T'HH:mm:ss'Z'"        //  dateFormat.setTimeZone(TimeZone.getTimeZone("UTC-03:00"));        dateFormat.setTimeZone(TimeZone.getTimeZone("Europe/Moscow"));        Log.d(this.getClass().getName(), " ГЛАВНАЯ ДАТА ПРОГРАММЫ ДСУ-1 : " + dateFormat.format(Дата));        return dateFormat.format(Дата);    }    ///todo сообщение на активти создание новго сотрудника спрашиваем нужно ли создать    ///todo сообщение    ///todo финалный метод еотровый другому активти посылает данные    private void МетодФинальныйКоторыйОтправлетДванныеДругомуАктивти() {        try{            Intent Интент_ИзМетокТабеляВSingleТабель = new Intent();            Интент_ИзМетокТабеляВSingleТабель.setClass(getApplicationContext(), MainActivity_Tabel_Single_People.class); // Т    MainActivity_List_Peoples.class            Интент_ИзМетокТабеляВSingleТабель.putExtra("setIDСамогоТабеляВКотромМыНаходились", 1);            Интент_ИзМетокТабеляВSingleТабель.putExtra("ДепартаментТабеляПослеПодбора", ДепартаментТабеляФинал);            Интент_ИзМетокТабеляВSingleТабель.putExtra("UUIDТабеляПослеПодбора", UUIDТабеляФинал);            Интент_ИзМетокТабеляВSingleТабель.putExtra("UUIDТабеляПослеПодбораУниверсальный", Long.parseLong(UUIDТабеляФинал));            Интент_ИзМетокТабеляВSingleТабель.putExtra("РодительскийUUDТаблицыТабель", Long.parseLong(UUIDТабеляФинал));            Log.d(  this.getClass().getName(), " РодительскийUUDТаблицыТабель" +UUIDТабеляФинал);            Интент_ИзМетокТабеляВSingleТабель.putExtra("ЦифровоеИмяНовгоТабеляБольШИеБуквыАктивти", ЦифровоеИмяНовгоТабеля);            Интент_ИзМетокТабеляВSingleТабель.putExtra("UUIDТабеляКнопкаBACKУниверсальный", UUIDТабеляФинал);            Интент_ИзМетокТабеляВSingleТабель.putExtra("МесяцТабеляПослеПодбора", МесяцТабеляФинал);            Интент_ИзМетокТабеляВSingleТабель.putExtra("ПолноеНазваниеЗагруженногТАбеляПослеПодбора",ДепартаментТабеляФинал);            Интент_ИзМетокТабеляВSingleТабель.putExtra("МЕсяцДляКурсораТабелейПослеПодбора", МЕсяцПриВставкеНовогоСотрудника);            Интент_ИзМетокТабеляВSingleТабель.putExtra("ГодДляКурсораТабелейПослеПодбора",ГодПриВставкеНовогоСотрудника);            Интент_ИзМетокТабеляВSingleТабель.putExtra("ГодДляКурсораТабелейПослеПодбора",IDЧьиДанныеДляСотрудников);            Интент_ИзМетокТабеляВSingleТабель.putExtra("ЦифровоеИмяНовгоТабеляБольШИеБуквыАктивти", ЦифровоеИмяНовгоТабеля);            Интент_ИзМетокТабеляВSingleТабель.putExtra("ПолученныйПоследнийМесяцДляСортировкиЕгоВСпиноре",                    ПолученныйПоследнийМесяцДляСортировкиЕгоВСпиноре);            Интент_ИзМетокТабеляВSingleТабель.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);            Интент_ИзМетокТабеляВSingleТабель.putExtra("РодительскийUUDТаблицыТабель", РодительскийUUDТаблицыТабель);            Log.d(this.getClass().getName(),    "  РодительскийUUDТаблицыТабель " + РодительскийUUDТаблицыТабель);            startActivity(Интент_ИзМетокТабеляВSingleТабель);        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());             // TODO: 01.09.2021 метод вызова            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),           this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    protected  View КонтентТабеляКоторыйМыИБудемЗаполнятьВнутриЦикла;    //TODO адаптер сомостоятельный для GridView    public class СоздаемСвойАдаптерДляГридМюу extends BaseAdapter {        @Override        public int getCount() {            return 0;        }        @Override        public Object getItem(int position) {            return null;        }        @Override        public long getItemId(int position) {            return 0;        }        @Override        public View getView(int position, View convertView, ViewGroup parent) {            LayoutInflater МеханизмЗагрузкиОдногЛайАутавДругой = getLayoutInflater();            if(convertView ==null){                /*КонтентТабеляКоторыйМыИБудемЗаполнятьВнутриЦикла = МеханизмЗагрузкиОдногЛайАутавДругой.inflate(R.layout.activity_main_grid_for_tables_two,//activity_main_find_customer_for_tables // activity_main_grid_for_tables                        ГлавныйКонтейнерТабель, false);*/            }            /*/////TODO ТАБЕЛЬ ФИО создаем textview названия дней понелельник вторик среда четеварг            ///////// todo фио            НазваниеДанныхВТабелеФИО = КонтентТабеляКоторыйМыИБудемЗаполнятьВнутриЦикла.findViewById(R.id.КонтейнерКудаЗагружаетьсяФИО);            ПосикДня = Курсор_ЗагружаемТабеляСозданный.getColumnIndex("uuid"); ////TODO СЮДА ПОЛЕ UUID            НазваниеСтолбикаДляЛобкальногоОбноления = Курсор_ЗагружаемТабеляСозданный.getColumnName(ПосикДня);            НазваниеДанныхВТабелеФИО.setTag(Курсор_ЗагружаемТабеляСозданный.getString(ПосикДня));            Log.d(this.getClass().getName(), " UUID пристваем Внутри ФИО  " + Курсор_ЗагружаемТабеляСозданный.getString(ПосикДня));            ////todo УСТАНАВЛИВАЕМ КЛИК НА ФИО            НазваниеДанныхВТабелеФИО.setOnLongClickListener(СлушательУдаланиеСотрудникаИзТабеля);            НазваниеДанныхВТабелеФИО.setOnClickListener(СлушательИнформацияОСотрудника);*/            return convertView;        }    }}