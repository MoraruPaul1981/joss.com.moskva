package com.dsy.dsu.Code_ForTABEL;import android.app.Activity;import android.content.ContentValues;import android.content.Context;import android.content.Intent;import android.content.SharedPreferences;import android.content.pm.ActivityInfo;import android.content.res.Configuration;import android.database.sqlite.SQLiteCursor;import android.graphics.Color;import android.os.Bundle;import android.text.Editable;import android.text.TextWatcher;import android.util.Log;import android.view.LayoutInflater;import android.view.MotionEvent;import android.view.View;import android.view.ViewGroup;import android.view.WindowManager;import android.widget.AdapterView;import android.widget.ArrayAdapter;import android.widget.BaseAdapter;import android.widget.Button;import android.widget.EditText;import android.widget.ImageView;import android.widget.ListView;import android.widget.ScrollView;import android.widget.TextView;import android.widget.Toast;import androidx.appcompat.app.AppCompatActivity;import com.dsy.dsu.Business_logic_Only_Class.CREATE_DATABASE;import com.dsy.dsu.Business_logic_Only_Class.Class_GRUD_SQL_Operations;import com.dsy.dsu.Business_logic_Only_Class.Class_Generation_Errors;import com.dsy.dsu.Business_logic_Only_Class.PUBLIC_CONTENT;import com.dsy.dsu.Business_logic_Only_Class.SubClassUpVersionDATA;import com.dsy.dsu.R;import java.text.DateFormat;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Collections;import java.util.Date;import java.util.GregorianCalendar;import java.util.HashMap;import java.util.LinkedHashMap;import java.util.LinkedList;import java.util.List;import java.util.Locale;import java.util.Map;import java.util.TimeZone;import java.util.concurrent.CompletionService;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeoutException;public class MainActivity_Metki_Tabel extends AppCompatActivity {    private ScrollView  ГлавныйКонтейнерДляПосикаТабелей; ////главный linelayuout    private   View КонтентТабеляКоторыйМыИБудемЗаполнятьВнутриЦиклаДляПоиска;    private  EditText   ЗначениеУстановкиМеткиТАбеляИзменяетПользоатель ;    private  ListView ЛистСДаннымиМеткиТаебля=null ;    private Button КнопкаНазадМеткаТабеля;    private  Configuration config;    private  Integer   ПубличноеIDПолученныйИзСервлетаДляUUID=0;    private   CREATE_DATABASE Create_Database_СсылкаНАБазовыйКласс;    private    List<String> АрайЛИстФИОВсеДляМетокТабеля=  Collections.synchronizedList(new LinkedList<String>());    private PUBLIC_CONTENT Class_Engine_SQLГдеНаходитьсяМенеджерПотоков =null;    private  ArrayAdapter<String> АдаптерДляСпинераДата;    private  Integer  ИндексСтрокКомпонентовТабеля=0;    private  String FullNameCFO;    Integer Position;    private  Long CurrenrsСhildUUID;    private  Integer МЕсяцТабелей;    private   Integer ГодТабелей;    private    String ИмесяцвИГодСразу;    private String МЕсяцДляКурсораТабелей;    private  String ГодДляКурсораТабелей;    private long  РезультатВставкиНовогоТабеляЧерезКонтрейнерТаблицыТабельОбновление = 0;    private long  РезультатВставкиНовогоТабеляЧерезКонтрейнерТаблицыТабель=0;    private   SQLiteCursor Курсор_ПолучаемВсюТаюлицуМетоккТабелю=null;    private  Context context;    private  ScrollView ГлавныйКойтейнерПоискаФИОСотрудника;    private Activity activity;    private  int IDЧьиДанныеДляСотрудников;    private Integer DigitalNameCFO;    private  String ПолноеИмяТабеляПослеСозданиеНовогоСотрудника;    private      Long    UUIDТабеляПослеУспешногоСозданиеСотрудникаВсехСотридников;    private SharedPreferences sharedPreferencesХранилище;    String ЯчейкаДляЗаписиМетки;    String ЯчейкаСодержимоеДляЗаписиМетки;    @Override    protected void onCreate(Bundle savedInstanceState) {        try{            super.onCreate(savedInstanceState);            setContentView(R.layout.activity_main__status_tables);            context =this;            activity=this;            Class_Engine_SQLГдеНаходитьсяМенеджерПотоков =new PUBLIC_CONTENT(getApplicationContext());            getSupportActionBar().hide(); ///скрывать тул бар            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LOCKED);            getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);            Create_Database_СсылкаНАБазовыйКласс=new CREATE_DATABASE(getApplicationContext());            getWindow().addFlags(WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD                    | WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON                    | WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);            Log.d(this.getClass().getName(), "   ");            // Locale locale = Locale.ROOT;            Locale locale = new Locale("rus");            Locale.setDefault(locale);            config =                    getBaseContext().getResources().getConfiguration();            config.setLocale(locale);            createConfigurationContext(config);            Log.d(  this.getClass().getName(), " метод посика уже существующего сотрудника в базе андройжа");            ЛистСДаннымиМеткиТаебля = (ListView) findViewById(R.id.ЛистДляУстановкиМеткиТАбеляРодительская);            ГлавныйКойтейнерПоискаФИОСотрудника  = (ScrollView) findViewById(R.id. ГлавныйКойтейнерМетокТабеляСотрудника);            КнопкаНазадМеткаТабеля= findViewById(R.id.СтрелкаНазадУстановкиМеткиТабеля);// TODO: 14.10.2022  получением данные из хранилища            sharedPreferencesХранилище=getApplicationContext().getSharedPreferences("sharedPreferencesХранилище", Context.MODE_MULTI_PROCESS);            Log.d(  this.getClass().getName(), "sharedPreferencesХранилище"+  sharedPreferencesХранилище.getString("sharedPreferencesХранилищеkey","")    );            sharedPreferencesХранилище.registerOnSharedPreferenceChangeListener(new SharedPreferences.OnSharedPreferenceChangeListener() {                @Override                public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {                    Log.d(  this.getClass().getName(), " sharedPreferences "+sharedPreferences);                }            });        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),                    this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    @Override    protected void onStart() {        super.onStart();        try{        методПеременныеFromMainAcivitySingleTabel();            МетодОбработкиКликаПоЯчейкамСотрудникаВыбранным();            МетодПриНАжатииНаКнопкуBACK();            МетодПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск(null,Class_Engine_SQLГдеНаходитьсяМенеджерПотоков.МенеджерПотоков);    } catch (Exception e) {        e.printStackTrace();        Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());        new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),                this.getClass().getName(),                Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());    }}    //todo метод возврата к предыдущему активти    private void МетодПриНАжатииНаКнопкуBACK() {        try{            КнопкаНазадМеткаТабеля.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    Log.d(this.getClass().getName(), " кликнем для созданни новго сотрдника при нажатии  ");                    ///todo код которыц возврящет предыдущий актвитики кнопка back                    МетодФинальныйКоторыйОтправлетДванныеДругомуАктивти();                }            });    } catch (Exception e) {        e.printStackTrace();        Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),           this.getClass().getName(),                Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());    }    }    private void методПеременныеFromMainAcivitySingleTabel() {        try{            Intent Интент_МеткиТАбеля= getIntent();            Bundle bundleИзMainActitivySingleTabelPeople=Интент_МеткиТАбеля.getExtras();            // TODO: 10.04.2023            Position=    bundleИзMainActitivySingleTabelPeople.getInt("Position", 0);            ГодТабелей=  bundleИзMainActitivySingleTabelPeople.getInt("ГодТабелей", 0);            МЕсяцТабелей=  bundleИзMainActitivySingleTabelPeople.getInt("МЕсяцТабелей",0);            DigitalNameCFO=   bundleИзMainActitivySingleTabelPeople.getInt("DigitalNameCFO", 0);            FullNameCFO=  bundleИзMainActitivySingleTabelPeople.getString("FullNameCFO", "");            ИмесяцвИГодСразу= bundleИзMainActitivySingleTabelPeople.getString("ИмесяцвИГодСразу", "");            CurrenrsСhildUUID= bundleИзMainActitivySingleTabelPeople.getLong("CurrenrsСhildUUID", 0l);           ЯчейкаДляЗаписиМетки=bundleИзMainActitivySingleTabelPeople.getString("ЯчейкаДляЗаписиМетки", "");;           ЯчейкаСодержимоеДляЗаписиМетки=bundleИзMainActitivySingleTabelPeople.getString("ЯчейкаСодержимоеДляЗаписиМетки", "");;            Log.d(this.getClass().getName(),"\n" + " class " + Thread.currentThread().getStackTrace()[2].getClassName() + "\n" +                    " metod " + Thread.currentThread().getStackTrace()[2].getMethodName() + "\n" +                    " line " + Thread.currentThread().getStackTrace()[2].getLineNumber() + "\n"                    + " FullNameCFO "+FullNameCFO+ " CurrenrsСhildUUID " +CurrenrsСhildUUID                    + " ГодТабелей " +ГодТабелей +" МЕсяцТабелей " +МЕсяцТабелей   + " DigitalNameCFO "+DigitalNameCFO+                    " Position " +Position+ " ИмесяцвИГодСразу " +ИмесяцвИГодСразу);        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                   new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    protected void МетодПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск(String ПоискФИОЧерезLIKE,                                                                                         CompletionService МенеджерПотоковВнутри) {        try {            Toast aa = Toast.makeText(getApplicationContext(), "OPEN",Toast.LENGTH_SHORT);            ImageView cc = new ImageView(getApplicationContext());            Class_GRUD_SQL_Operations class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск                    =new Class_GRUD_SQL_Operations(getApplicationContext());            String finalПоискФИОЧерезLIKE = ПоискФИОЧерезLIKE;            class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск.                    concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("НазваниеОбрабоатываемойТаблицы","metki_tabel");            ///////            class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск.                    concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("СтолбцыОбработки","*");            class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск.                    concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеСортировки","date_update DESC");            Курсор_ПолучаемВсюТаюлицуМетоккТабелю= (SQLiteCursor)  class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск.                    new GetData(getApplicationContext()).getdata(class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск.                            concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций,                    МенеджерПотоковВнутри,Create_Database_СсылкаНАБазовыйКласс.getССылкаНаСозданнуюБазу());            if (Курсор_ПолучаемВсюТаюлицуМетоккТабелю.getCount()>0){                Курсор_ПолучаемВсюТаюлицуМетоккТабелю.moveToFirst();                Log.d(this.getClass().getName(), " Курсор_ПолучаемВсюТаюлицуМетоккТабелю.getCount()  " +Курсор_ПолучаемВсюТаюлицуМетоккТабелю.getCount() );                АрайЛИстФИОВсеДляМетокТабеля=new LinkedList<>();                Log.d(this.getClass().getName()," АрайЛИстФИОВсеДляМетокТабеля.size() " +АрайЛИстФИОВсеДляМетокТабеля.size());                //TODO МЕТОД ЗАПОЛЕНИЯ ДАННЫМИ ПОИСКА ТАБЕЛЯ*/                МетодЗаполненияАктивтиДаннымиИзБазыДляЗаполенияМетокТабеля();            }else{                Log.d(this.getClass().getName()," НЕт данных для ТАблицы Метки"+Курсор_ПолучаемВсюТаюлицуМетоккТабелю.getCount() );            }        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),           this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    private void МетодЗаполненияАктивтиДаннымиИзБазыДляЗаполенияМетокТабеля() {        try{            try{                ГлавныйКонтейнерДляПосикаТабелей.removeAllViews();            } catch (Exception e) {            }            Курсор_ПолучаемВсюТаюлицуМетоккТабелю.moveToFirst();            do {                ////TODO ДДАНЫЕ ИЗ БАЗЫ САМИ ФИО            int ИндексМетка=Курсор_ПолучаемВсюТаюлицуМетоккТабелю.getColumnIndex("metka");                String ПолученыеМетка=    Курсор_ПолучаемВсюТаюлицуМетоккТабелю.getString(ИндексМетка);                Log.d(this.getClass().getName(), " ПолученыеМетка " +ПолученыеМетка);                int ИндексПолноеМетка=Курсор_ПолучаемВсюТаюлицуМетоккТабелю.getColumnIndex("fullname_metka");                //////////////                String  ПолученыеПолноеМетка=Курсор_ПолучаемВсюТаюлицуМетоккТабелю.getString(ИндексПолноеМетка);                Log.d(this.getClass().getName(), "ПолученыеПолноеМетка " +ПолученыеПолноеМетка);                int ИндексUUIDМеткиМетки=Курсор_ПолучаемВсюТаюлицуМетоккТабелю.getColumnIndex("id");                long ПолученныйUUIDМеткиМетки=Курсор_ПолучаемВсюТаюлицуМетоккТабелю.getLong(ИндексUUIDМеткиМетки);                ///TODO ЗАПОЛЕНИЕЯ АРАЙЛИСТА И хЭШМЭПА                МетодЗаполенияАрайЛистаИХэшМэпаДляПосикаПоМетокТабеля(ПолученыеПолноеМетка,ПолученыеМетка,ПолученныйUUIDМеткиМетки);                ИндексСтрокКомпонентовТабеля++;            } while (Курсор_ПолучаемВсюТаюлицуМетоккТабелю.moveToNext());           АдаптерДляСпинераДата = new ArrayAdapter<String>(this, R.layout.list_item,  АрайЛИстФИОВсеДляМетокТабеля);//ХэшФИОДляПосикаМетокТабеля // АрайЛИстФИОВсеДляМетокТабеля // simple_list_item_checked //simple_list_item_multiple_choice            ЛистСДаннымиМеткиТаебля.setAdapter(АдаптерДляСпинераДата);                    ЛистСДаннымиМеткиТаебля.setBackgroundResource(R.drawable.textlines_tabel_row_color_green);                       ////todo главное добаление        ГлавныйКонтейнерДляПосикаТабелей.addView(ЛистСДаннымиМеткиТаебля);            ЛистСДаннымиМеткиТаебля.deferNotifyDataSetChanged();            ЛистСДаннымиМеткиТаебля.requestLayout();            Log.d(this.getClass().getName()," ИндексСтрокКомпонентовТабеля "+ИндексСтрокКомпонентовТабеля);        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),           this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    ///////////    private void МетодОбработкиКликаПоЯчейкамСотрудникаВыбранным() {        try{       ЛистСДаннымиМеткиТаебля.setOnItemClickListener(new AdapterView.OnItemClickListener() {            @Override            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {                try {                    if (Курсор_ПолучаемВсюТаюлицуМетоккТабелю != null) {                        if (Курсор_ПолучаемВсюТаюлицуМетоккТабелю.getCount() > 0) {                            ((TextView) view).setBackgroundColor(Color.GRAY);                            Log.d(this.getClass().getName(), "  Курсор_СамиФИОДляПоиска.getCount()" + Курсор_ПолучаемВсюТаюлицуМетоккТабелю.getCount());                            Курсор_ПолучаемВсюТаюлицуМетоккТабелю.moveToFirst();                            while (Курсор_ПолучаемВсюТаюлицуМетоккТабелю.move(position)) {                                long UUIDПолучаемДляОправкиПослеПосикаМетокТабеля = Курсор_ПолучаемВсюТаюлицуМетоккТабелю.getLong(0);                                Log.d(this.getClass().getName(), " UUIDПолучаемДляОправкиПослеПосикаМетокТабеля " + UUIDПолучаемДляОправкиПослеПосикаМетокТабеля);                                ((TextView) parent.getChildAt(0)).setTag(UUIDПолучаемДляОправкиПослеПосикаМетокТабеля);//////ВЫДЕЛЕМ ЖИРНЫМ ЦВЕТОМ ДАТЫ                             TextView textView=  (TextView) parent.getChildAt((int) id);                                Log.d(this.getClass().getName(), " UUIDПолучаемДляОправкиПослеПосикаМетокТабеля " + UUIDПолучаемДляОправкиПослеПосикаМетокТабеля);                                break;                            }                            TextView textView = (TextView) view;                            long UUIDgetTagДляПосикаПолученныйИзListView = (long) ((TextView) parent.getChildAt(0)).getTag();//////ВЫДЕЛЕМ ЖИРНЫМ ЦВЕТОМ ДАТЫ                            String СамоЗначениеМеткиДляУстановкивТабелеПолученныйИзListView = textView.getText().toString().trim(); // получаем текст нажатого элемента                            Log.d(this.getClass().getName(), " СамоЗначениеМеткиДляУстановкивТабелеПолученныйИзListView "                                    + СамоЗначениеМеткиДляУстановкивТабелеПолученныйИзListView+" UUIDgetTagДляПосикаПолученныйИзListView  "                                    +UUIDgetTagДляПосикаПолученныйИзListView );                            int ЛовимПервуюСкобку = СамоЗначениеМеткиДляУстановкивТабелеПолученныйИзListView.indexOf("(") + 1;                            int ЛовимВторуюСкобку = СамоЗначениеМеткиДляУстановкивТабелеПолученныйИзListView.indexOf(")");                            СамоЗначениеМеткиДляУстановкивТабелеПолученныйИзListView =                                    СамоЗначениеМеткиДляУстановкивТабелеПолученныйИзListView.substring(ЛовимПервуюСкобку, ЛовимВторуюСкобку);                            Log.d(this.getClass().getName(), " СамоЗначениеМеткиДляУстановкивТабелеПолученныйИзListView "                                    + СамоЗначениеМеткиДляУстановкивТабелеПолученныйИзListView);                            if (UUIDgetTagДляПосикаПолученныйИзListView != 0 && СамоЗначениеМеткиДляУстановкивТабелеПолученныйИзListView != null) {                                ////todo ПРИ КЛИКЕ ПО СТРОЧКЕ В МЕТКА ПЕРЕНАПРАВЛЯЕТ МЕТОД НА ЗАПИСЬ ВЫБНОГО В БАЗУ ASYTASK                                МетодРаботуКнопкиКотораяОтправляетПодобранныхСотрудников();                            }                        }                    }                } catch (Exception e) {                    e.printStackTrace();                    Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                            " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),           this.getClass().getName(),                            Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());                }            }        });    } catch (Exception e) {        e.printStackTrace();        Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());         // TODO: 01.09.2021 метод вызова            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),           this.getClass().getName(),                Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());    }    }    ////todo метод отправки полученых сотрудников на другую активти    private void МетодРаботуКнопкиКотораяОтправляетПодобранныхСотрудников() {        try{   Integer резуьттатВставкиМеткиТабеля=     МетодЗапускаВставкиВыбраннойМеткиТабеляВГотовыйТабель();            МетодЗапускаетьсяПослеУспешнойВставкиМеткивТабель(резуьттатВставкиМеткиТабеля);                            МетодФинальныйКоторыйОтправлетДванныеДругомуАктивти();        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());             // TODO: 01.09.2021 метод вызова            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),           this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    //TODO метод который запускаеться после встаки данных на метки в табель    private void МетодЗапускаетьсяПослеУспешнойВставкиМеткивТабель(Integer РезультатМетсиТабеляВставки) {  try{      /////TODO УСПЕШНОЕ  ДОБАВЛЕНИЕ ВЫБРАННЫХ СОТРУДНИКОВ В ТАБЕЛЬ      if (  РезультатМетсиТабеляВставки>0){ //;////ПРИ УСПЕШНОЙ ВСТАВКИ ДАННЫХ  ПЕРЕДАЕМ СТАТИЧНОМУ СЁЧИКК  ОБНОВЛЕНИЙ ЧТО НАДО УВЕЛИЧИТ ЗНАЧЕНИЕ НА 1+>0) {          ((Activity) context) .runOnUiThread(new Runnable() {              @Override              public void run() {          Toast aa = Toast.makeText(getApplicationContext(), "OPEN",Toast.LENGTH_SHORT);          ImageView cc = new ImageView(getApplicationContext());     //     cc.setImageResource(R.drawable.icon_dsu1_add_organisazio_success);//icon_dsu1_synchronisazia_dsu1_success          aa.setView(cc);          aa.show();              }          });      }else{          Log.e(this.getClass().getName(), "Ошибка  новый сотрудник не вставилься" );          ///TODO сообщаем об успешном создаении данных          ((Activity) context) .runOnUiThread(new Runnable() {              @Override              public void run() {                  Toast aa = Toast.makeText(getApplicationContext(), "OPEN", Toast.LENGTH_SHORT);                  ImageView cc = new ImageView(getApplicationContext());                  cc.setImageResource(R.drawable.icon_dsu1_add_organisazio_error);//icon_dsu1_synchronisazia_dsu1_success                  aa.setView(cc);                  aa.show();                  ///////              }});      }      Курсор_ПолучаемВсюТаюлицуМетоккТабелю.close();    } catch (Exception e) {        e.printStackTrace();        Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());         // TODO: 01.09.2021 метод вызова            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),           this.getClass().getName(),                Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());    }    }    private  Integer МетодЗапускаВставкиВыбраннойМеткиТабеляВГотовыйТабель() {        Integer РезультатВставкиМетвиТабеля=0;        try{             РезультатВставкиМетвиТабеля=           методЗаписиНовойМетки();                 Log.d(this.getClass().getName(), " РезультатВставкиМетвиТабеля " +РезультатВставкиМетвиТабеля);        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                   new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }        return  РезультатВставкиМетвиТабеля;    }    protected   Integer методЗаписиНовойМетки() {        ///todo САМА ВСТВКА ТАБЛИЦА ТАЕБЛЬ        Integer РезультатОбовленияСтатусаМеткиВТабеле = 0;        try{            ContentValues  АдаптерДляУстановкиВыбраннойМеткиТабеля = new ContentValues();            АдаптерДляУстановкиВыбраннойМеткиТабеля.put( ЯчейкаДляЗаписиМетки ,  ЯчейкаСодержимоеДляЗаписиМетки);            String ДатаПриВыбореСотрудникаВставка=ГлавнаяДатаИВремяОперацийСБазойДанных();            АдаптерДляУстановкиВыбраннойМеткиТабеля.put("date_update", ДатаПриВыбореСотрудникаВставка);            Class_GRUD_SQL_Operations        class_grud_sql_operationsПовышаемВерсиюДанныхПриСозданеииИзШаблонаСотрудника=                    new Class_GRUD_SQL_Operations(getApplicationContext());            // TODO: 18.03.2023  получаем ВЕСИЮ ДАННЫХ            Long РезультатУвеличинаяВерсияДАныхЧата =                    new SubClassUpVersionDATA().МетодПовышаемВерсииCurrentTable(    "data_tabels"                            ,getApplicationContext(),Create_Database_СсылкаНАБазовыйКласс.getССылкаНаСозданнуюБазу());            Log.d(this.getClass().getName(), " РезультатУвеличинаяВерсияДАныхЧата  " + РезультатУвеличинаяВерсияДАныхЧата);            АдаптерДляУстановкиВыбраннойМеткиТабеля.put("current_table", РезультатУвеличинаяВерсияДАныхЧата);            Log.d(this.getClass().getName(), "   current_table УВЕЛИЧИВАЕМ ВЕРИСЮ ДАННЫХ ВНУТРИ ТАБЛИЦЫ  РезультатУвеличинаяВерсияДАныхЧата" +                    РезультатУвеличинаяВерсияДАныхЧата);            Integer Результат_ПриписиИзменнийВерсииДанныхВФонеПослеОбработкиТекущийТаблицы =0;            Class_GRUD_SQL_Operations class_grud_sql_operationsОпределенияВставкиВыбранойМеткиТабеляЧерезПоиск=new Class_GRUD_SQL_Operations(getApplicationContext());            String ТекущаяТаблицыДляВставкиМетки="data_tabels";            class_grud_sql_operationsОпределенияВставкиВыбранойМеткиТабеляЧерезПоиск.                    concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("НазваниеОбрабоатываемойТаблицы",ТекущаяТаблицыДляВставкиМетки);            class_grud_sql_operationsОпределенияВставкиВыбранойМеткиТабеляЧерезПоиск.                    concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("Флаг_ЧерезКакоеПолеОбновлением","uuid");            class_grud_sql_operationsОпределенияВставкиВыбранойМеткиТабеляЧерезПоиск.                    concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ЗначениеФлагОбновления",CurrenrsСhildUUID);            class_grud_sql_operationsОпределенияВставкиВыбранойМеткиТабеляЧерезПоиск.                    concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ЗнакФлагОбновления","=");            ////TODO КОНТЕЙНЕР ДЛЯ ОБНОВЛЕНИЯ            class_grud_sql_operationsОпределенияВставкиВыбранойМеткиТабеляЧерезПоиск                    .contentValuesДляSQLBuilder_Для_GRUD_Операций.putAll(АдаптерДляУстановкиВыбраннойМеткиТабеля);            РезультатОбовленияСтатусаМеткиВТабеле= (Integer)  class_grud_sql_operationsОпределенияВставкиВыбранойМеткиТабеляЧерезПоиск.                    new UpdateData(getApplicationContext()).updatedata(class_grud_sql_operationsОпределенияВставкиВыбранойМеткиТабеляЧерезПоиск.                            concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций,                    class_grud_sql_operationsОпределенияВставкиВыбранойМеткиТабеляЧерезПоиск.contentValuesДляSQLBuilder_Для_GRUD_Операций,                    Class_Engine_SQLГдеНаходитьсяМенеджерПотоков.МенеджерПотоков,Create_Database_СсылкаНАБазовыйКласс.getССылкаНаСозданнуюБазу());            if (РезультатОбовленияСтатусаМеткиВТабеле> 0 ) {                Log.e(this.getClass().getName(), "Смена метки табеля"+РезультатОбовленияСтатусаМеткиВТабеле );            }else{                Log.e(this.getClass().getName(), "Ошибка  новый сотрудник не вставилься" );                Toast.makeText(getApplicationContext(), " Метка в табель не сохранилась !!!! "+РезультатОбовленияСтатусаМеткиВТабеле  , Toast.LENGTH_LONG).show();            }        } catch (Exception e) {            e.fillInStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                   new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }return  РезультатОбовленияСтатусаМеткиВТабеле;    }    protected  Long МетодПолучениеОрганизацииНепосрдственодляДанногоСОтрудника() throws InterruptedException, ExecutionException, TimeoutException {        Long названиеорганизациидлясотркдника=0l;////TODO КУРСОР ПРОВЕЯЕТ ПЕРВЫЙ ЭТО ЗАПУСК ИЛИ НЕТ       SQLiteCursor Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего = null;       //        Class_GRUD_SQL_Operations class_grud_sql_operationsПолучениеОрганизацииНепосрдственодляДанногоСОтрудника=new Class_GRUD_SQL_Operations(getApplicationContext());        ///////////////////////////////////        // ID        // TODO: 26.08.2021 НОВЫЙ ВЫЗОВ НОВОГО КЛАСС GRUD - ОПЕРАЦИИ        Class_GRUD_SQL_Operations class_grud_sql_operationsПолучаемНаБазуUUIDфиоПолучаемИзТаблицыФИОИМЯ= new Class_GRUD_SQL_Operations(getApplicationContext());        ///        class_grud_sql_operationsПолучаемНаБазуUUIDфиоПолучаемИзТаблицыФИОИМЯ. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("СамFreeSQLКОд",                " SELECT id  FROM successlogin  ORDER BY date_update DESC ;");        // TODO: 12.10.2021  Ссылка Менеджер Потоков        PUBLIC_CONTENT  Class_Engine_SQLГдеНаходитьсяМенеджерПотоков =new PUBLIC_CONTENT (getApplicationContext());        ///////        SQLiteCursor            Курсор_ПолучаемПубличныйID= (SQLiteCursor) class_grud_sql_operationsПолучаемНаБазуUUIDфиоПолучаемИзТаблицыФИОИМЯ.                new GetаFreeData(getApplicationContext()).getfreedata(class_grud_sql_operationsПолучаемНаБазуUUIDфиоПолучаемИзТаблицыФИОИМЯ. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций,                Class_Engine_SQLГдеНаходитьсяМенеджерПотоков.МенеджерПотоков,Create_Database_СсылкаНАБазовыйКласс.getССылкаНаСозданнуюБазу());        if(Курсор_ПолучаемПубличныйID.getCount()>0){            ///            Курсор_ПолучаемПубличныйID.moveToFirst();            /////            ПубличноеIDПолученныйИзСервлетаДляUUID=         Курсор_ПолучаемПубличныйID.getInt(0);///            Log.d(this.getClass().getName(), " ПубличноеIDПолученныйИзСервлетаДляUUID  " + ПубличноеIDПолученныйИзСервлетаДляUUID);        }        try {            // TODO: 26.08.2021 НОВЫЙ ВЫЗОВ НОВОГО КЛАСС GRUD - ОПЕРАЦИИ            ///            class_grud_sql_operationsПолучениеОрганизацииНепосрдственодляДанногоСОтрудника. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("НазваниеОбрабоатываемойТаблицы","SuccessLogin");            ///////            class_grud_sql_operationsПолучениеОрганизацииНепосрдственодляДанногоСОтрудника. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("СтолбцыОбработки","organizations");            //            class_grud_sql_operationsПолучениеОрганизацииНепосрдственодляДанногоСОтрудника. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ФорматПосика","id=? AND organizations IS NOT NULL ");                    ///"_id > ?   AND _id< ?"                    //////            class_grud_sql_operationsПолучениеОрганизацииНепосрдственодляДанногоСОтрудника. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска1",ПубличноеIDПолученныйИзСервлетаДляUUID);                    ///               /*     class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска2","Удаленная");                    ///                    class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска3",МЕсяцДляКурсораТабелей);                    //                    class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска4",ГодДляКурсораТабелей);////УсловиеПоискаv4,........УсловиеПоискаv5 .......            ////TODO другие поля*/            ///classGrudSqlOperations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ПоляГрупировки",null);            ////            //class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеГрупировки",null);            ////            ///class_grud_sql_operationsПолучениеИмяСистемы. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеСортировки","date_update");            ////            /// class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеЛимита","1");            ////            // TODO: 27.08.2021  ПОЛУЧЕНИЕ ДАННЫХ ОТ КЛАССА GRUD-ОПЕРАЦИИ            Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего= (SQLiteCursor)  new Class_GRUD_SQL_Operations(getApplicationContext()).                    new GetData(getApplicationContext()).getdata(class_grud_sql_operationsПолучениеОрганизацииНепосрдственодляДанногоСОтрудника. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций,                    Class_Engine_SQLГдеНаходитьсяМенеджерПотоков.МенеджерПотоков,Create_Database_СсылкаНАБазовыйКласс.getССылкаНаСозданнуюБазу());            Log.d(this.getClass().getName(), "GetData "  +Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего);         /*            // TODO: 07.09.2021    _______old            Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего =                    new Class_MODEL_synchronized(getApplicationContext()).КурсорУниверсальныйДляБазыДанных("SuccessLogin",                            new String[]{"organizations"}, "id=? AND organizations IS NOT NULL", new String[]{PUBLIC_CONTENT.ПубличноеIDПолученныйИзСервлетаДляUUID}, null, null, null, null);//"SuccessLogin", "date_update","id=","1",null,null,null,null*/              // TODO: 07.09.2021  результат запроса        if (Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего.getCount() > 0) { //TODO ЕСЛИ ДАННЫЙ UUID НЕ ПУСТОЙ ЭТО ЗНАЧИТ ЧТО ЭТОТ ТАБЕЛЬ УЖЕ СУЩЕТСВЕТ И НАМ НАДО ОБНОВИТЬ            ////TODO ТАБЕЛЬ УЖЕ ЕСТЬ И МЫ ЕГО ОБНОЫЛЕНИЯ ПубличноеИмяНовогоТабеля            Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего.moveToFirst();            //todo определяем есть uuid в строчке или нет            Log.d(this.getClass().getName(), "Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего  " +                    Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего.getCount());            названиеорганизациидлясотркдника= Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего.getLong(0);            /////            Log.d(this.getClass().getName(), " названиеорганизациидлясотркдника " +                    названиеорганизациидлясотркдника);                        ///todo вырубаем курсор            Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего.close();        }        } catch (Exception e) {            ///////TODO error            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());            /////        }        return  названиеорганизациидлясотркдника;    }    /////todo метод заполения аралилта и хэшмема    protected void МетодЗаполенияАрайЛистаИХэшМэпаДляПосикаПоМетокТабеля( String ПолученыеПолноеМетка,String ПолученыеМетка,Long ПолученныйUUIDМеткиМетки) {        try{            /////TODO НЕ ПОСТРДВСТВЕНО ЗАПОЛЯНЕМ LISTVIEW  ДАННЫМИ            АрайЛИстФИОВсеДляМетокТабеля.add("\n"+ПолученыеПолноеМетка+ "   ("+ПолученыеМетка+")"+"\n"+"\n" );            Log.d(this.getClass().getName(), "  АрайЛИстФИОВсеДляМетокТабеля.size() " + АрайЛИстФИОВсеДляМетокТабеля.size()                    + " АрайЛИстФИОВсеДляМетокТабеля " +АрайЛИстФИОВсеДляМетокТабеля.toString() + " ПолученныйUUIDМеткиМетки  "            +ПолученныйUUIDМеткиМетки);     /////todo заполения TAG uuid меток табеля            ЛистСДаннымиМеткиТаебля.setTag(String.valueOf(ПолученныйUUIDМеткиМетки));        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());             // TODO: 01.09.2021 метод вызова            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),           this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    // TODO КОД СЛУШАТЕЛЬ ПРИ НАЖАТИИ НА ТАБЕЛЬ Создаем экземпляр TextWatcher:    private final TextWatcher СлушательПолученияДанных = new TextWatcher() {        public void beforeTextChanged (CharSequence s,int start, int count, int after){            Log.d(this.getClass().getName(), "  beforeTextChanged  " + s.toString());            String ЗначениевПоискеФИО = s.toString();        }        public void onTextChanged (CharSequence s,int start, int before, int count){            Log.d(this.getClass().getName(), "  onTextChanged  " + s.toString());        }        //Задаем действия для TextView после смены введенных в EditText символов:        public void afterTextChanged (Editable s){            try {                //TODO ДАННЫЙ КОД НЕПОСТРЕДСТВЕННО ЗАРУСКАЕТ ОБНОВЛЕНИЕ ЛОКАЛЬНОЕ С АКТИВТИИ                Log.d(this.getClass().getName(), "  afterTextChanged " + s.toString());                String СамоЗначениеЯчейкиТабеля = s.toString();                Log.d(this.getClass().getName(), "  СамоЗначениеЯчейкиТабеля" + СамоЗначениеЯчейкиТабеля);                Log.d(this.getClass().getName(), "  СамоЗначениеЯчейкиТабеля" + СамоЗначениеЯчейкиТабеля);                ////TODO запускаем метод ЛОКАЛЬНОГО ОБНОВЛЕНИЕ ПОСЛЕ ПОЛУЧЕННЫХ ДАННЫХ                МетодПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск(СамоЗначениеЯчейкиТабеля,Class_Engine_SQLГдеНаходитьсяМенеджерПотоков.МенеджерПотоков); // TODO ПОСИК С LIKE                /////            } catch (Exception e) {                e.printStackTrace();                ///метод запись ошибок в таблицу                Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                        " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                 // TODO: 01.09.2021 метод вызова            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),           this.getClass().getName(),                        Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());            } finally {            }        }    };    //TODO метод получени месяа для записи в одну колонку    private int МетодПолучениниеМесяцПриСозданииНовогоСОтрудника(String ДатаКоторуюНадоПеревестиИзТекставЦифру) throws ParseException {        int month = 0;        try{            System.out.println(" " + ДатаКоторуюНадоПеревестиИзТекставЦифру + " " + ДатаКоторуюНадоПеревестиИзТекставЦифру);            SimpleDateFormat formatмесяц = new SimpleDateFormat("LLLL  yyyy", new Locale("ru"));            // formatмесяц.setTimeZone(TimeZone.getTimeZone("UTC-03:00"));            formatмесяц.setTimeZone(TimeZone.getTimeZone("Europe/Moscow"));            Date date = formatмесяц.parse(ДатаКоторуюНадоПеревестиИзТекставЦифру);            GregorianCalendar calendar = (GregorianCalendar) GregorianCalendar.getInstance(new Locale("ru"));            calendar.setTime(date);            /////TODO ОБРАБАТЫВАЕМ ДАННЫЕ ДАТЫ ЯНВАРЬ            if (ДатаКоторуюНадоПеревестиИзТекставЦифру.matches("(.*)Январь(.*)")) {                month = calendar.get(Calendar.MONTH)+1;            } else                month = calendar.get(Calendar.MONTH) + 1;            ///////        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());             // TODO: 01.09.2021 метод вызова            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),           this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }        return month;    }    //TODO метод получени месяа для записи в одну колонку    private int МетодПолучениниеГОдПриСозданииНовогоСОтрудника(String ДатаКоторуюНадоПеревестиИзТекставЦифру) throws ParseException {        int year= 0;        try{            System.out.println("ДатаКоторуюНадоПеревестиИзТекставЦифру " + ДатаКоторуюНадоПеревестиИзТекставЦифру);            SimpleDateFormat formatгод = new SimpleDateFormat("LLLL  yyyy", new Locale("ru"));            // formatгод.setTimeZone(TimeZone.getTimeZone("UTC-03:00"));            formatгод.setTimeZone(TimeZone.getTimeZone("Europe/Moscow"));            Date date = formatгод.parse(ДатаКоторуюНадоПеревестиИзТекставЦифру);            Calendar calendar = Calendar.getInstance(new Locale("ru"));            calendar.setTime(date);            if (ДатаКоторуюНадоПеревестиИзТекставЦифру.matches("(.*)Январь(.*)")) {                year = calendar.get(Calendar.YEAR);            } else                year = calendar.get(Calendar.YEAR);        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());             // TODO: 01.09.2021 метод вызова            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),           this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }        return year;    }    //функция получающая время операции ДАННАЯ ФУНКЦИЯ ВРЕМЯ ПРИМЕНЯЕТЬСЯ ВО ВСЕЙ ПРОГРАММЕ    public String ГлавнаяДатаИВремяОперацийСБазойДанных() {        Date Дата = Calendar.getInstance().getTime();        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS", new Locale("ru"));//"yyyy-MM-dd HH:mm:ss.SSS"//"yyyy-MM-dd'T'HH:mm:ss'Z'"        //  dateFormat.setTimeZone(TimeZone.getTimeZone("UTC-03:00"));        dateFormat.setTimeZone(TimeZone.getTimeZone("Europe/Moscow"));        Log.d(this.getClass().getName(), " ГЛАВНАЯ ДАТА ПРОГРАММЫ ДСУ-1 : " + dateFormat.format(Дата));        return dateFormat.format(Дата);    }    ///todo сообщение на активти создание новго сотрудника спрашиваем нужно ли создать    ///todo сообщение    ///todo финалный метод еотровый другому активти посылает данные    private void МетодФинальныйКоторыйОтправлетДванныеДругомуАктивти() {        try{            Intent intentBackSingleTabel = new Intent();            intentBackSingleTabel.setClass(getApplicationContext(), MainActivity_Tabel_Single_People.class); // Т    MainActivity_List_Peoples.class            Bundle bundleИзMetkiTabel= intentBackSingleTabel.getExtras();            // TODO: 10.04.2023  ОТПРАВЛЯЕММ ПЕРЕМЕННЫЕ            bundleИзMetkiTabel.putLong("CurrenrsСhildUUID", CurrenrsСhildUUID);            bundleИзMetkiTabel.putInt("Position", Position);            bundleИзMetkiTabel.putInt("ГодТабелей", ГодТабелей);            bundleИзMetkiTabel.putInt("МЕсяцТабелей",МЕсяцТабелей);            bundleИзMetkiTabel.putInt("DigitalNameCFO", DigitalNameCFO);            bundleИзMetkiTabel.getString("FullNameCFO", FullNameCFO);            bundleИзMetkiTabel.putString("ИмесяцвИГодСразу", ИмесяцвИГодСразу.trim());            startActivity(intentBackSingleTabel);            Log.d(this.getClass().getName(),"\n" + " class " + Thread.currentThread().getStackTrace()[2].getClassName() + "\n" +                    " metod " + Thread.currentThread().getStackTrace()[2].getMethodName() + "\n" +                    " line " + Thread.currentThread().getStackTrace()[2].getLineNumber() + "\n"                    + " FullNameCFO "+FullNameCFO+ " CurrenrsСhildUUID " +CurrenrsСhildUUID                    + " ГодТабелей " +ГодТабелей +" МЕсяцТабелей " +МЕсяцТабелей   + " DigitalNameCFO "+DigitalNameCFO+                    " Position " +Position+ " ИмесяцвИГодСразу " +ИмесяцвИГодСразу);        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),           this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    protected  View КонтентТабеляКоторыйМыИБудемЗаполнятьВнутриЦикла;    //TODO адаптер сомостоятельный для GridView    public class СоздаемСвойАдаптерДляГридМюу extends BaseAdapter {        @Override        public int getCount() {            return 0;        }        @Override        public Object getItem(int position) {            return null;        }        @Override        public long getItemId(int position) {            return 0;        }        @Override        public View getView(int position, View convertView, ViewGroup parent) {            LayoutInflater МеханизмЗагрузкиОдногЛайАутавДругой = getLayoutInflater();            if(convertView ==null){                /*КонтентТабеляКоторыйМыИБудемЗаполнятьВнутриЦикла = МеханизмЗагрузкиОдногЛайАутавДругой.inflate(R.layout.activity_main_grid_for_tables_two,//activity_main_find_customer_for_tables // activity_main_grid_for_tables                        ГлавныйКонтейнерТабель, false);*/            }            /*/////TODO ТАБЕЛЬ ФИО создаем textview названия дней понелельник вторик среда четеварг            ///////// todo фио            НазваниеДанныхВТабелеФИО = КонтентТабеляКоторыйМыИБудемЗаполнятьВнутриЦикла.findViewById(R.id.КонтейнерКудаЗагружаетьсяФИО);            ПосикДня = Курсор_ЗагружаемТабеляСозданный.getColumnIndex("uuid"); ////TODO СЮДА ПОЛЕ UUID            НазваниеСтолбикаДляЛобкальногоОбноления = Курсор_ЗагружаемТабеляСозданный.getColumnName(ПосикДня);            НазваниеДанныхВТабелеФИО.setTag(Курсор_ЗагружаемТабеляСозданный.getString(ПосикДня));            Log.d(this.getClass().getName(), " UUID пристваем Внутри ФИО  " + Курсор_ЗагружаемТабеляСозданный.getString(ПосикДня));            ////todo УСТАНАВЛИВАЕМ КЛИК НА ФИО            НазваниеДанныхВТабелеФИО.setOnLongClickListener(СлушательУдаланиеСотрудникаИзТабеля);            НазваниеДанныхВТабелеФИО.setOnClickListener(СлушательИнформацияОСотрудника);*/            return convertView;        }    }}