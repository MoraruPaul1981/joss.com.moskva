package com.dsy.dsu.Code_ForTABEL;import android.app.Activity;import android.content.Context;import android.content.Intent;import android.content.SharedPreferences;import android.content.pm.ActivityInfo;import android.content.res.Configuration;import android.database.Cursor;import android.database.sqlite.SQLiteCursor;import android.graphics.Color;import android.graphics.Typeface;import android.os.Bundle;import android.os.Handler;import android.os.Looper;import android.os.Message;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.view.WindowManager;import android.view.animation.Animation;import android.view.animation.AnimationUtils;import android.widget.AdapterView;import android.widget.ArrayAdapter;import android.widget.BaseAdapter;import android.widget.Button;import android.widget.EditText;import android.widget.ImageView;import android.widget.ListView;import android.widget.ScrollView;import android.widget.TextView;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.appcompat.app.AppCompatActivity;import androidx.cursoradapter.widget.CursorAdapter;import androidx.cursoradapter.widget.SimpleCursorAdapter;import com.dsy.dsu.Business_logic_Only_Class.CREATE_DATABASE;import com.dsy.dsu.Business_logic_Only_Class.Class_GRUD_SQL_Operations;import com.dsy.dsu.Business_logic_Only_Class.Class_Generation_Errors;import com.dsy.dsu.Business_logic_Only_Class.PUBLIC_CONTENT;import com.dsy.dsu.R;import com.google.android.material.textview.MaterialTextView;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Date;import java.util.GregorianCalendar;import java.util.Locale;import java.util.TimeZone;import java.util.concurrent.CompletionService;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeoutException;public class MainActivity_Metki_Tabel extends AppCompatActivity {    private ScrollView scrollViewMetkiTabels; ////главный linelayuout    private   View КонтентТабеляКоторыйМыИБудемЗаполнятьВнутриЦиклаДляПоиска;    private  EditText   ЗначениеУстановкиМеткиТАбеляИзменяетПользоатель ;    private  ListView ЛистСДаннымиМеткиТаебля=null ;    private Button КнопкаНазадМеткаТабеля;    private  Configuration config;    private  Integer   ПубличноеIDПолученныйИзСервлетаДляUUID=0;    private   CREATE_DATABASE Create_Database_СсылкаНАБазовыйКласс;    private PUBLIC_CONTENT publiccon =null;    private  ArrayAdapter<String> АдаптерДляСпинераДата;    private    String ФИО;    private String МЕсяцДляКурсораТабелей;    private  String ГодДляКурсораТабелей;    private long  РезультатВставкиНовогоТабеляЧерезКонтрейнерТаблицыТабельОбновление = 0;    private long  РезультатВставкиНовогоТабеляЧерезКонтрейнерТаблицыТабель=0;    private  Context context;    private Activity activity;    private  int IDЧьиДанныеДляСотрудников;    private Integer DigitalNameCFO;    private  String ПолноеИмяТабеляПослеСозданиеНовогоСотрудника;    private      Long    UUIDТабеляПослеУспешногоСозданиеСотрудникаВсехСотридников;    private SharedPreferences sharedPreferencesХранилище;    private Bundle bundleДляMainActibvityMetkiTabel;    Animation animationVibr1;    Animation  animationVibr2;    private Message message;    @Override    protected void onCreate(Bundle savedInstanceState) {        try{            super.onCreate(savedInstanceState);            setContentView(R.layout.activity_main__status_tables);            context =this;            activity=this;            publiccon =new PUBLIC_CONTENT(getApplicationContext());            getSupportActionBar().hide(); ///скрывать тул бар            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LOCKED);            getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);            Create_Database_СсылкаНАБазовыйКласс=new CREATE_DATABASE(getApplicationContext());            getWindow().addFlags(WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD                    | WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON                    | WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);            Log.d(this.getClass().getName(), "   ");            // Locale locale = Locale.ROOT;            Locale locale = new Locale("rus");            Locale.setDefault(locale);            config =                    getBaseContext().getResources().getConfiguration();            config.setLocale(locale);            createConfigurationContext(config);            Log.d(  this.getClass().getName(), " метод посика уже существующего сотрудника в базе андройжа");            scrollViewMetkiTabels = (ScrollView) findViewById(R.id.ГлавныйКойтейнерМетокТабеляСотрудника);            ЛистСДаннымиМеткиТаебля = (ListView) findViewById(R.id.ЛистДляУстановкиМеткиТАбеляРодительская);            КнопкаНазадМеткаТабеля= findViewById(R.id.СтрелкаНазадУстановкиМеткиТабеля);// TODO: 14.10.2022  получением данные из хранилища            sharedPreferencesХранилище=getApplicationContext().getSharedPreferences("sharedPreferencesХранилище", Context.MODE_MULTI_PROCESS);            animationVibr1 = AnimationUtils.loadAnimation(getApplicationContext(),R.anim.slide_singletable);            animationVibr2 = AnimationUtils.loadAnimation(getApplicationContext(),R.anim.slide_singletable2);            // TODO: 13.04.2023 курсоор            методGetMessage();            методПеременныеFromMainAcivitySingleTabel();            Cursor cursor=методGetCursor( publiccon.МенеджерПотоков);            МетодОбработкиКликаПоЯчейкамСотрудникаВыбранным();            МетодПриНАжатииНаКнопкуBACK();            методЗаполениеДАнными(cursor);            Log.d(this.getClass().getName(),"\n" + " class " + Thread.currentThread().getStackTrace()[2].getClassName() + "\n" +                    " metod " + Thread.currentThread().getStackTrace()[2].getMethodName() + "\n" +                    " line " + Thread.currentThread().getStackTrace()[2].getLineNumber() + "\n"+                    "sharedPreferencesХранилище"+  sharedPreferencesХранилище.getString("sharedPreferencesХранилищеkey","") );        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),                    this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    @Override    protected void onStart() {        super.onStart();        try{            // TODO: 13.04.2023            Log.d(this.getClass().getName(),"\n" + " class " + Thread.currentThread().getStackTrace()[2].getClassName() + "\n" +                            " metod " + Thread.currentThread().getStackTrace()[2].getMethodName() + "\n" +                            " line " + Thread.currentThread().getStackTrace()[2].getLineNumber() + "\n"+                    "sharedPreferencesХранилище"+  sharedPreferencesХранилище.getString("sharedPreferencesХранилищеkey","") );    } catch (Exception e) {        e.printStackTrace();        Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());        new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),                this.getClass().getName(),                Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());    }}    //todo метод возврата к предыдущему активти    private void МетодПриНАжатииНаКнопкуBACK() {        try{            КнопкаНазадМеткаТабеля.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    Log.d(this.getClass().getName(), " кликнем для созданни новго сотрдника при нажатии  ");                    ///todo код которыц возврящет предыдущий актвитики кнопка back                    МетодBackToMainActivityListPeoples();                }            });    } catch (Exception e) {        e.printStackTrace();        Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),           this.getClass().getName(),                Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());    }    }    private void методПеременныеFromMainAcivitySingleTabel() {        try{            Intent Интент_МеткиТАбеля= getIntent();            bundleДляMainActibvityMetkiTabel=Интент_МеткиТАбеля.getExtras();            // TODO: 10.04.2023            Log.d(this.getClass().getName(),"\n" + " class " + Thread.currentThread().getStackTrace()[2].getClassName() + "\n" +                    " metod " + Thread.currentThread().getStackTrace()[2].getMethodName() + "\n" +                    " line " + Thread.currentThread().getStackTrace()[2].getLineNumber() + "\n"                   +" bundleДляMainActibvityMetkiTabel " +bundleДляMainActibvityMetkiTabel);        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                   new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    protected Cursor методGetCursor(CompletionService МенеджерПотоковВнутри) {        Cursor cursor=null;        try {            Class_GRUD_SQL_Operations metkitabelgrud =new Class_GRUD_SQL_Operations(getApplicationContext());            metkitabelgrud.concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("НазваниеОбрабоатываемойТаблицы","metki_tabel");            metkitabelgrud.concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("СтолбцыОбработки","*");            metkitabelgrud.concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеСортировки","date_update DESC");// TODO: 13.04.2023           cursor= (SQLiteCursor)  metkitabelgrud.                    new GetData(getApplicationContext()).getdata(metkitabelgrud.                            concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций,                    МенеджерПотоковВнутри,Create_Database_СсылкаНАБазовыйКласс.getССылкаНаСозданнуюБазу());            if (cursor.getCount()>0){                cursor.moveToFirst();                Log.d(this.getClass().getName(), " cursor.getCount()  " +cursor.getCount() );            }else{                Log.d(this.getClass().getName()," cursor"+cursor.getCount() );            }        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),           this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }        return cursor;    }    private void методЗаполениеДАнными(@NonNull Cursor cursor) {        try{            try{                scrollViewMetkiTabels.removeAllViews();            } catch (Exception e) {            }            SimpleCursorAdapter simpleCursorAdapterМеткиТАбеля= new SimpleCursorAdapter(getApplicationContext(),   R.layout.simple_metki_tabels1, cursor,                    new String[]{ "metka","fullname_metka"},                    new int[]{android.R.id.text1,android.R.id.text2}, CursorAdapter.FLAG_REGISTER_CONTENT_OBSERVER);//R.layout.simple_newspinner_dwonload_cfo2            SimpleCursorAdapter.ViewBinder БиндингМеткиТабеля = new SimpleCursorAdapter.ViewBinder(){                @Override                public boolean setViewValue(View view, Cursor cursor, int columnIndex) {                    switch (view.getId()) {                        case android.R.id.text1:                                try{                                    String Метка=    cursor.getString(cursor.getColumnIndex("metka"));                                    ((TextView)view).setTag(bundleДляMainActibvityMetkiTabel);                                    ((MaterialTextView)view).setText(Метка.trim() );                                    ((MaterialTextView)view).setTypeface(((MaterialTextView) view).getTypeface(), Typeface.BOLD);                                    ((MaterialTextView)view).setOnClickListener(new View.OnClickListener() {                                        @Override                                        public void onClick(View v) {                                            message.getTarget().postDelayed(()->{                                                ((MaterialTextView)view).startAnimation(animationVibr2);                                            },500);                                            Log.d(this.getClass().getName(),"\n" + " class " + Thread.currentThread().getStackTrace()[2].getClassName() + "\n" +                                                    " metod " + Thread.currentThread().getStackTrace()[2].getMethodName() + "\n" +                                                    " line " + Thread.currentThread().getStackTrace()[2].getLineNumber() + "\n"                                                    + "  ((MaterialTextView)view) "+ ((MaterialTextView)view).getTag());                                        }                                    });                                    Log.d(this.getClass().getName(),"\n" + " class " + Thread.currentThread().getStackTrace()[2].getClassName() + "\n" +                                            " metod " + Thread.currentThread().getStackTrace()[2].getMethodName() + "\n" +                                            " line " + Thread.currentThread().getStackTrace()[2].getLineNumber() + "\n"                                            + "  ((MaterialTextView)view) "+ ((MaterialTextView)view).getTag());                                    // TODO: 13.12.2022 филь                                } catch (Exception e) {                                    e.printStackTrace();                                    Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                                            " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                                    new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),                                            this.getClass().getName(),                                            Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());                                }                                return true;                        // TODO: 13.04.2023  text2                        case android.R.id.text2:                    try{                        String ПолнаяМетка=    cursor.getString(cursor.getColumnIndex("fullname_metka"));                        ((MaterialTextView)view).setText(ПолнаяМетка.trim() );                        Log.d(this.getClass().getName(),"\n" + " class " + Thread.currentThread().getStackTrace()[2].getClassName() + "\n" +                                " metod " + Thread.currentThread().getStackTrace()[2].getMethodName() + "\n" +                                " line " + Thread.currentThread().getStackTrace()[2].getLineNumber() + "\n"                                + "  ((MaterialTextView)view) "+ ((MaterialTextView)view).getTag());                            // TODO: 13.12.2022 филь                    } catch (Exception e) {                        e.printStackTrace();                        Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                                " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                        new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),                                this.getClass().getName(),                                Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());                    }                            return true;                    }                    return false;                }            };            simpleCursorAdapterМеткиТАбеля.setViewBinder(БиндингМеткиТабеля);            ЛистСДаннымиМеткиТаебля.setAdapter(simpleCursorAdapterМеткиТАбеля);            ЛистСДаннымиМеткиТаебля.requestLayout();            scrollViewMetkiTabels.requestLayout();            ЛистСДаннымиМеткиТаебля.refreshDrawableState();            scrollViewMetkiTabels.refreshDrawableState();            Log.d(this.getClass().getName(),"\n" + " class " + Thread.currentThread().getStackTrace()[2].getClassName() + "\n" +                    " metod " + Thread.currentThread().getStackTrace()[2].getMethodName() + "\n" +                    " line " + Thread.currentThread().getStackTrace()[2].getLineNumber() + "\n"                    + " scrollViewMetkiTabels "+ scrollViewMetkiTabels);        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),           this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    ///////////    private void МетодОбработкиКликаПоЯчейкамСотрудникаВыбранным() {        try{       ЛистСДаннымиМеткиТаебля.setOnItemClickListener(new AdapterView.OnItemClickListener() {            @Override            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {                try {                            ((TextView) view).setBackgroundColor(Color.GRAY);                            Log.d(this.getClass().getName(), "  Курсор_СамиФИОДляПоиска.getCount()"  );                            TextView textView = (TextView) view;                } catch (Exception e) {                    e.printStackTrace();                    Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                            " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),           this.getClass().getName(),                            Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());                }            }        });    } catch (Exception e) {        e.printStackTrace();        Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());         // TODO: 01.09.2021 метод вызова            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),           this.getClass().getName(),                Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());    }    }    //TODO метод который запускаеться после встаки данных на метки в табель    private void МетодЗапускаетьсяПослеУспешнойВставкиМеткивТабель(Integer РезультатМетсиТабеляВставки) {  try{      /////TODO УСПЕШНОЕ  ДОБАВЛЕНИЕ ВЫБРАННЫХ СОТРУДНИКОВ В ТАБЕЛЬ      if (  РезультатМетсиТабеляВставки>0){ //;////ПРИ УСПЕШНОЙ ВСТАВКИ ДАННЫХ  ПЕРЕДАЕМ СТАТИЧНОМУ СЁЧИКК  ОБНОВЛЕНИЙ ЧТО НАДО УВЕЛИЧИТ ЗНАЧЕНИЕ НА 1+>0) {          ((Activity) context) .runOnUiThread(new Runnable() {              @Override              public void run() {          Toast aa = Toast.makeText(getApplicationContext(), "OPEN",Toast.LENGTH_SHORT);          ImageView cc = new ImageView(getApplicationContext());     //     cc.setImageResource(R.drawable.icon_dsu1_add_organisazio_success);//icon_dsu1_synchronisazia_dsu1_success          aa.setView(cc);          aa.show();              }          });      }else{          Log.e(this.getClass().getName(), "Ошибка  новый сотрудник не вставилься" );          ///TODO сообщаем об успешном создаении данных          ((Activity) context) .runOnUiThread(new Runnable() {              @Override              public void run() {                  Toast aa = Toast.makeText(getApplicationContext(), "OPEN", Toast.LENGTH_SHORT);                  ImageView cc = new ImageView(getApplicationContext());                  cc.setImageResource(R.drawable.icon_dsu1_add_organisazio_error);//icon_dsu1_synchronisazia_dsu1_success                  aa.setView(cc);                  aa.show();                  ///////              }});      }    } catch (Exception e) {        e.printStackTrace();        Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());         // TODO: 01.09.2021 метод вызова            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),           this.getClass().getName(),                Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());    }    }    protected  Long МетодПолучениеОрганизацииНепосрдственодляДанногоСОтрудника() throws InterruptedException, ExecutionException, TimeoutException {        Long названиеорганизациидлясотркдника=0l;////TODO КУРСОР ПРОВЕЯЕТ ПЕРВЫЙ ЭТО ЗАПУСК ИЛИ НЕТ       SQLiteCursor Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего = null;       //        Class_GRUD_SQL_Operations class_grud_sql_operationsПолучениеОрганизацииНепосрдственодляДанногоСОтрудника=new Class_GRUD_SQL_Operations(getApplicationContext());        ///////////////////////////////////        // ID        // TODO: 26.08.2021 НОВЫЙ ВЫЗОВ НОВОГО КЛАСС GRUD - ОПЕРАЦИИ        Class_GRUD_SQL_Operations class_grud_sql_operationsПолучаемНаБазуUUIDфиоПолучаемИзТаблицыФИОИМЯ= new Class_GRUD_SQL_Operations(getApplicationContext());        ///        class_grud_sql_operationsПолучаемНаБазуUUIDфиоПолучаемИзТаблицыФИОИМЯ. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("СамFreeSQLКОд",                " SELECT id  FROM successlogin  ORDER BY date_update DESC ;");        // TODO: 12.10.2021  Ссылка Менеджер Потоков        PUBLIC_CONTENT  Class_Engine_SQLГдеНаходитьсяМенеджерПотоков =new PUBLIC_CONTENT (getApplicationContext());        ///////        SQLiteCursor            Курсор_ПолучаемПубличныйID= (SQLiteCursor) class_grud_sql_operationsПолучаемНаБазуUUIDфиоПолучаемИзТаблицыФИОИМЯ.                new GetаFreeData(getApplicationContext()).getfreedata(class_grud_sql_operationsПолучаемНаБазуUUIDфиоПолучаемИзТаблицыФИОИМЯ. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций,                Class_Engine_SQLГдеНаходитьсяМенеджерПотоков.МенеджерПотоков,Create_Database_СсылкаНАБазовыйКласс.getССылкаНаСозданнуюБазу());        if(Курсор_ПолучаемПубличныйID.getCount()>0){            ///            Курсор_ПолучаемПубличныйID.moveToFirst();            /////            ПубличноеIDПолученныйИзСервлетаДляUUID=         Курсор_ПолучаемПубличныйID.getInt(0);///            Log.d(this.getClass().getName(), " ID  " + ПубличноеIDПолученныйИзСервлетаДляUUID);        }        try {            // TODO: 26.08.2021 НОВЫЙ ВЫЗОВ НОВОГО КЛАСС GRUD - ОПЕРАЦИИ            ///            class_grud_sql_operationsПолучениеОрганизацииНепосрдственодляДанногоСОтрудника. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("НазваниеОбрабоатываемойТаблицы","SuccessLogin");            ///////            class_grud_sql_operationsПолучениеОрганизацииНепосрдственодляДанногоСОтрудника. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("СтолбцыОбработки","organizations");            //            class_grud_sql_operationsПолучениеОрганизацииНепосрдственодляДанногоСОтрудника. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ФорматПосика","id=? AND organizations IS NOT NULL ");                    ///"_id > ?   AND _id< ?"                    //////            class_grud_sql_operationsПолучениеОрганизацииНепосрдственодляДанногоСОтрудника. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска1",ПубличноеIDПолученныйИзСервлетаДляUUID);                    ///               /*     class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска2","Удаленная");                    ///                    class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска3",МЕсяцДляКурсораТабелей);                    //                    class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска4",ГодДляКурсораТабелей);////УсловиеПоискаv4,........УсловиеПоискаv5 .......            ////TODO другие поля*/            ///classGrudSqlOperations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ПоляГрупировки",null);            ////            //class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеГрупировки",null);            ////            ///class_grud_sql_operationsПолучениеИмяСистемы. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеСортировки","date_update");            ////            /// class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеЛимита","1");            ////            // TODO: 27.08.2021  ПОЛУЧЕНИЕ ДАННЫХ ОТ КЛАССА GRUD-ОПЕРАЦИИ            Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего= (SQLiteCursor)  new Class_GRUD_SQL_Operations(getApplicationContext()).                    new GetData(getApplicationContext()).getdata(class_grud_sql_operationsПолучениеОрганизацииНепосрдственодляДанногоСОтрудника. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций,                    Class_Engine_SQLГдеНаходитьсяМенеджерПотоков.МенеджерПотоков,Create_Database_СсылкаНАБазовыйКласс.getССылкаНаСозданнуюБазу());            Log.d(this.getClass().getName(), "GetData "  +Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего);         /*            // TODO: 07.09.2021    _______old            Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего =                    new Class_MODEL_synchronized(getApplicationContext()).КурсорУниверсальныйДляБазыДанных("SuccessLogin",                            new String[]{"organizations"}, "id=? AND organizations IS NOT NULL", new String[]{PUBLIC_CONTENT.ID}, null, null, null, null);//"SuccessLogin", "date_update","id=","1",null,null,null,null*/              // TODO: 07.09.2021  результат запроса        if (Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего.getCount() > 0) { //TODO ЕСЛИ ДАННЫЙ UUID НЕ ПУСТОЙ ЭТО ЗНАЧИТ ЧТО ЭТОТ ТАБЕЛЬ УЖЕ СУЩЕТСВЕТ И НАМ НАДО ОБНОВИТЬ            ////TODO ТАБЕЛЬ УЖЕ ЕСТЬ И МЫ ЕГО ОБНОЫЛЕНИЯ ПубличноеИмяНовогоТабеля            Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего.moveToFirst();            //todo определяем есть uuid в строчке или нет            Log.d(this.getClass().getName(), "Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего  " +                    Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего.getCount());            названиеорганизациидлясотркдника= Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего.getLong(0);            /////            Log.d(this.getClass().getName(), " названиеорганизациидлясотркдника " +                    названиеорганизациидлясотркдника);                        ///todo вырубаем курсор            Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего.close();        }        } catch (Exception e) {            ///////TODO error            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());            /////        }        return  названиеорганизациидлясотркдника;    }    //TODO метод получени месяа для записи в одну колонку    private int МетодПолучениниеМесяцПриСозданииНовогоСОтрудника(String ДатаКоторуюНадоПеревестиИзТекставЦифру) throws ParseException {        int month = 0;        try{            System.out.println(" " + ДатаКоторуюНадоПеревестиИзТекставЦифру + " " + ДатаКоторуюНадоПеревестиИзТекставЦифру);            SimpleDateFormat formatмесяц = new SimpleDateFormat("LLLL  yyyy", new Locale("ru"));            // formatмесяц.setTimeZone(TimeZone.getTimeZone("UTC-03:00"));            formatмесяц.setTimeZone(TimeZone.getTimeZone("Europe/Moscow"));            Date date = formatмесяц.parse(ДатаКоторуюНадоПеревестиИзТекставЦифру);            GregorianCalendar calendar = (GregorianCalendar) GregorianCalendar.getInstance(new Locale("ru"));            calendar.setTime(date);            /////TODO ОБРАБАТЫВАЕМ ДАННЫЕ ДАТЫ ЯНВАРЬ            if (ДатаКоторуюНадоПеревестиИзТекставЦифру.matches("(.*)Январь(.*)")) {                month = calendar.get(Calendar.MONTH)+1;            } else                month = calendar.get(Calendar.MONTH) + 1;            ///////        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());             // TODO: 01.09.2021 метод вызова            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),           this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }        return month;    }    //TODO метод получени месяа для записи в одну колонку    private int МетодПолучениниеГОдПриСозданииНовогоСОтрудника(String ДатаКоторуюНадоПеревестиИзТекставЦифру) throws ParseException {        int year= 0;        try{            System.out.println("ДатаКоторуюНадоПеревестиИзТекставЦифру " + ДатаКоторуюНадоПеревестиИзТекставЦифру);            SimpleDateFormat formatгод = new SimpleDateFormat("LLLL  yyyy", new Locale("ru"));            // formatгод.setTimeZone(TimeZone.getTimeZone("UTC-03:00"));            formatгод.setTimeZone(TimeZone.getTimeZone("Europe/Moscow"));            Date date = formatгод.parse(ДатаКоторуюНадоПеревестиИзТекставЦифру);            Calendar calendar = Calendar.getInstance(new Locale("ru"));            calendar.setTime(date);            if (ДатаКоторуюНадоПеревестиИзТекставЦифру.matches("(.*)Январь(.*)")) {                year = calendar.get(Calendar.YEAR);            } else                year = calendar.get(Calendar.YEAR);        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());             // TODO: 01.09.2021 метод вызова            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),           this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }        return year;    }    //функция получающая время операции ДАННАЯ ФУНКЦИЯ ВРЕМЯ ПРИМЕНЯЕТЬСЯ ВО ВСЕЙ ПРОГРАММЕ    ///todo сообщение на активти создание новго сотрудника спрашиваем нужно ли создать    ///todo сообщениеvoid методGetMessage(){try {    message=new Handler(Looper.getMainLooper(), new Handler.Callback() {        @Override        public boolean handleMessage(@NonNull Message msg) {            try{                Log.d(this.getClass().getName(),"\n" + " class " + Thread.currentThread().getStackTrace()[2].getClassName() + "\n" +                        " metod " + Thread.currentThread().getStackTrace()[2].getMethodName() + "\n" +                        " line " + Thread.currentThread().getStackTrace()[2].getLineNumber() + "\n");            } catch (Exception e) {                e.printStackTrace();                Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                        " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),                        this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                        Thread.currentThread().getStackTrace()[2].getLineNumber());            }            return true;        }    }).obtainMessage();} catch (Exception e) {        e.printStackTrace();        Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());        new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),                this.getClass().getName(),                Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());    }}    ///todo финалный метод еотровый другому активти посылает данные    private void МетодBackToMainActivityListPeoples() {        try{            Intent intentBackSingleTabel = new Intent();            intentBackSingleTabel.setClass(getApplicationContext(), MainActivity_Tabel_Single_People.class); // Т    MainActivity_List_Peoples.class            intentBackSingleTabel.putExtras(bundleДляMainActibvityMetkiTabel);            startActivity(intentBackSingleTabel);            Log.d(this.getClass().getName(),"\n" + " class " + Thread.currentThread().getStackTrace()[2].getClassName() + "\n" +                    " metod " + Thread.currentThread().getStackTrace()[2].getMethodName() + "\n" +                    " line " + Thread.currentThread().getStackTrace()[2].getLineNumber() + "\n"                    + " bundleДляMainActibvityMetkiTabel "+bundleДляMainActibvityMetkiTabel);        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),           this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    protected  View КонтентТабеляКоторыйМыИБудемЗаполнятьВнутриЦикла;    //TODO адаптер сомостоятельный для GridView    public class СоздаемСвойАдаптерДляГридМюу extends BaseAdapter {        @Override        public int getCount() {            return 0;        }        @Override        public Object getItem(int position) {            return null;        }        @Override        public long getItemId(int position) {            return 0;        }        @Override        public View getView(int position, View convertView, ViewGroup parent) {            LayoutInflater МеханизмЗагрузкиОдногЛайАутавДругой = getLayoutInflater();            if(convertView ==null){                /*КонтентТабеляКоторыйМыИБудемЗаполнятьВнутриЦикла = МеханизмЗагрузкиОдногЛайАутавДругой.inflate(R.layout.activity_main_grid_for_tables_two,//activity_main_find_customer_for_tables // activity_main_grid_for_tables                        ГлавныйКонтейнерТабель, false);*/            }            /*/////TODO ТАБЕЛЬ ФИО создаем textview названия дней понелельник вторик среда четеварг            ///////// todo фио            НазваниеДанныхВТабелеФИО = КонтентТабеляКоторыйМыИБудемЗаполнятьВнутриЦикла.findViewById(R.id.КонтейнерКудаЗагружаетьсяФИО);            ПосикДня = Курсор_ЗагружаемТабеляСозданный.getColumnIndex("uuid"); ////TODO СЮДА ПОЛЕ UUID            НазваниеСтолбикаДляЛобкальногоОбноления = Курсор_ЗагружаемТабеляСозданный.getColumnName(ПосикДня);            НазваниеДанныхВТабелеФИО.setTag(Курсор_ЗагружаемТабеляСозданный.getString(ПосикДня));            Log.d(this.getClass().getName(), " UUID пристваем Внутри ФИО  " + Курсор_ЗагружаемТабеляСозданный.getString(ПосикДня));            ////todo УСТАНАВЛИВАЕМ КЛИК НА ФИО            НазваниеДанныхВТабелеФИО.setOnLongClickListener(СлушательУдаланиеСотрудникаИзТабеля);            НазваниеДанныхВТабелеФИО.setOnClickListener(СлушательИнформацияОСотрудника);*/            return convertView;        }    }}