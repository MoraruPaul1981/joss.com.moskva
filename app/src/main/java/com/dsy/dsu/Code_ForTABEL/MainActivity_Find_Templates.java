package com.dsy.dsu.Code_ForTABEL;import android.app.Activity;import android.app.ProgressDialog;import android.content.ContentValues;import android.content.Context;import android.content.Intent;import android.content.pm.ActivityInfo;import android.content.res.Configuration;import android.database.Cursor;import android.database.sqlite.SQLiteCursor;import android.graphics.Color;import android.graphics.drawable.Drawable;import android.os.Bundle;import android.text.Editable;import android.text.TextWatcher;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.view.WindowManager;import android.widget.AdapterView;import android.widget.ArrayAdapter;import android.widget.BaseAdapter;import android.widget.Button;import android.widget.CursorAdapter;import android.widget.EditText;import android.widget.ImageView;import android.widget.ListView;import android.widget.ScrollView;import android.widget.SimpleCursorAdapter;import android.widget.TextView;import android.widget.Toast;import androidx.annotation.UiThread;import androidx.appcompat.app.AlertDialog;import androidx.appcompat.app.AppCompatActivity;import androidx.constraintlayout.widget.ConstraintLayout;import com.dsy.dsu.Business_logic_Only_Class.CREATE_DATABASE;import com.dsy.dsu.Business_logic_Only_Class.Class_GRUD_SQL_Operations;import com.dsy.dsu.Business_logic_Only_Class.DATE.Class_Generation_Data;import com.dsy.dsu.Business_logic_Only_Class.Class_Generation_Errors;import com.dsy.dsu.Business_logic_Only_Class.Class_Generation_UUID;import com.dsy.dsu.Business_logic_Only_Class.Class_MODEL_synchronized;import com.dsy.dsu.Business_logic_Only_Class.PUBLIC_CONTENT;import com.dsy.dsu.Business_logic_Only_Class.SubClassGetPublicId;import com.dsy.dsu.Business_logic_Only_Class.SubClassUpVersionDATA;import com.dsy.dsu.R;import com.google.android.material.dialog.MaterialAlertDialogBuilder;import org.jetbrains.annotations.NotNull;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Collections;import java.util.Date;import java.util.GregorianCalendar;import java.util.LinkedHashMap;import java.util.LinkedList;import java.util.List;import java.util.Locale;import java.util.Map;import java.util.TimeZone;import java.util.concurrent.TimeUnit;import java.util.concurrent.locks.Condition;import java.util.concurrent.locks.ReentrantLock;import io.reactivex.rxjava3.core.Flowable;import io.reactivex.rxjava3.functions.Action;import io.reactivex.rxjava3.functions.Consumer;import io.reactivex.rxjava3.schedulers.Schedulers;public class MainActivity_Find_Templates extends AppCompatActivity {    private  Configuration config;    private ScrollView  ГлавныйКонтейнерДляПосикаТабелей; ////главный linelayuout    private   View КонтентТабеляКоторыйМыИБудемЗаполнятьВнутриЦиклаДляПоиска;    private  List<String> АрайЛИстФИОВсеДляПосика=  Collections.synchronizedList(new LinkedList<String>());    private  CREATE_DATABASE Create_Database_СсылкаНАБазовыйКласс;    private  Map<Long, String> ХэшФИОВсеДляПосика;    private  ArrayAdapter<String> АдаптерДляСпинераДата;    private ProgressDialog progressDialog;    private  String finalПоискФИОЧерезLIKE;    private Integer  ИндексСтрокКомпонентовТабеля=0;    private  Button     КнопкаОтправкиСотрудникаДляТабеля;    private  EditText   ЗначениеПоискаФИОИзменяетПользоатель ;    private  String FullNameCFO;    private  String ИмесяцвИГодСразу;    private Long MainParentUUID;    private Long CurrenrsСhildUUID;    private Integer Position;    private  Integer МЕсяцТабелей;    private  Integer ГодТабелей;    private    int       DigitalNameCFO;    private ListView ЛистСДаннымиФИО;    private  long  РезультатВставкиНовогоТабеляЧерезКонтрейнерТаблицыТабельОбновление = 0;    private   long  РезультатВставкиНовогоТабеляЧерезКонтрейнерТаблицыТабель=0;    private Button КнопкаНазад;    private   Cursor Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон=null;    private   Context КонтекстДляАктивтиПосикаШаблонов;    private  ScrollView ГлавныйКойтейнерПоискаФИОСотрудника;    private String НаписаниеИмяНовгоШаблона;    @Override    protected void onCreate(Bundle savedInstanceState) {        try{            super.onCreate(savedInstanceState);            setContentView(R.layout.activity_main__find_temples);            КонтекстДляАктивтиПосикаШаблонов=this;            getSupportActionBar().hide(); ///скрывать тул бар            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);            getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);            ХэшФИОВсеДляПосика    = Collections.synchronizedMap(new LinkedHashMap<Long, String>());            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LOCKED);            getWindow().addFlags(WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD                    | WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON                    | WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);            /////            Log.d(this.getClass().getName(), "   ");            // Locale locale = Locale.ROOT;            Locale locale = new Locale("rus");            Locale.setDefault(locale);            config =                    getBaseContext().getResources().getConfiguration();            config.setLocale(locale);            createConfigurationContext(config);            Create_Database_СсылкаНАБазовыйКласс=new CREATE_DATABASE(getApplicationContext());            Log.d(  this.getClass().getName(), " метод посика уже существующего сотрудника в базе андройжа");            ГлавныйКонтейнерДляПосикаТабелей = (ScrollView ) findViewById(R.id.ГлавныйКойтейнерПоискаФИОСотрудника);            КнопкаОтправкиСотрудникаДляТабеля = (Button) findViewById(R.id.КнопкаОтправкиСотрудникаДляТабеля);            ЗначениеПоискаФИОИзменяетПользоатель = (EditText) findViewById(R.id.editTextДляПосикаСотрудникаСоздаваемогоТабеля);            ЛистСДаннымиФИО = (ListView) findViewById(R.id.ЛистДляПосикаПоТабелюРодительская);            ГлавныйКойтейнерПоискаФИОСотрудника  = (ScrollView) findViewById(R.id. ГлавныйКойтейнерПоискаФИОСотрудника);            ЗначениеПоискаФИОИзменяетПользоатель.addTextChangedListener(СлушательПолученияДанных);            КнопкаНазад= findViewById(R.id.imagimageViewСтрелкаНазадПодборСотрудник);            ЛистСДаннымиФИО.setBackgroundResource(R.drawable.textlines_tabel_row_color_green_mini);            // TODO: 17.04.2023 Пришли переменныее            методGetVaribaleFindtemplates();// TODO: 17.04.2023            Log.d(this.getClass().getName(),"\n" + " class " + Thread.currentThread().getStackTrace()[2].getClassName() + "\n" +                    " metod " + Thread.currentThread().getStackTrace()[2].getMethodName() + "\n" +                    " line " + Thread.currentThread().getStackTrace()[2].getLineNumber() + "\n");        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    @Override    protected void onStart() {        super.onStart();        try{            МетодПриНАжатииНаКнопкуBACK();            МетодПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковДЛяШаблонаЧкерезПоиск(null);            МетодОбработкиКликаПоЯчейкамСотрудникаВыбранным();            МетодРаботуКнопкиКотораяОтправляетПодобранныхСотрудников();        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    //todo метод возврата к предыдущему активти    private void МетодПриНАжатииНаКнопкуBACK() {        КнопкаНазад.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                try{                    методBackActivityListPeoples();                    // TODO: 17.04.2023                    Log.d(this.getClass().getName(),"\n" + " class " + Thread.currentThread().getStackTrace()[2].getClassName() + "\n" +                            " metod " + Thread.currentThread().getStackTrace()[2].getMethodName() + "\n" +                            " line " + Thread.currentThread().getStackTrace()[2].getLineNumber() + "\n");                } catch (Exception e) {                    e.printStackTrace();                    ///метод запись ошибок в таблицу                    Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                            " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                    new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                            Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());                }            }        });    }    private void методGetVaribaleFindtemplates() {        try{            Intent ИнтентActivityFindTemplates= getIntent();            Bundle bundleAActivityFindTemplates =      ИнтентActivityFindTemplates.getExtras();            if (bundleAActivityFindTemplates!=null) {                MainParentUUID=    bundleAActivityFindTemplates.getLong("MainParentUUID", 0);                Position=    bundleAActivityFindTemplates.getInt("Position", 0);                ГодТабелей=  bundleAActivityFindTemplates.getInt("ГодТабелей", 0);                МЕсяцТабелей=  bundleAActivityFindTemplates.getInt("МЕсяцТабелей",0);                DigitalNameCFO=   bundleAActivityFindTemplates.getInt("DigitalNameCFO", 0);                FullNameCFO=  bundleAActivityFindTemplates.getString("FullNameCFO", "");                ИмесяцвИГодСразу= bundleAActivityFindTemplates.getString("ИмесяцвИГодСразу", "");                CurrenrsСhildUUID= bundleAActivityFindTemplates.getLong("CurrenrsСhildUUID", 0l);            }// TODO: 17.04.2023  //////////20.15            Log.d(this.getClass().getName(),"\n" + " class " + Thread.currentThread().getStackTrace()[2].getClassName() + "\n" +                    " metod " + Thread.currentThread().getStackTrace()[2].getMethodName() + "\n" +                    " line " + Thread.currentThread().getStackTrace()[2].getLineNumber() + "\n" + " bundleAActivityFindTemplates " +bundleAActivityFindTemplates);        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    /////TODO МЕТОД ПОИСКА И ЗАГРУЩКИ ВСЕХ ПОЛЬЗОВАТЕЛЬ ГОТОВЫ И ПОИК ИХ ЧЕРЕЗ LIKE    protected void МетодПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковДЛяШаблонаЧкерезПоиск(String ПоискФИОЧерезLIKE) throws InterruptedException {        //todo перед созданием нового уьиваем из папмятт        Class_GRUD_SQL_Operations class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковДЛяШаблонаЧкерезПоиск;        try {            finalПоискФИОЧерезLIKE = ПоискФИОЧерезLIKE;            //////TODO ПРИ ПЕРВОМ ЗАПУСКЕ КОГДА Ы НИЧЕГО НЕ ВЫБРАЛИ И ПЕРВЙ ЗАПУС ПОСЫЛВАЕТ ЧТОВ СТРОКИ            if (finalПоискФИОЧерезLIKE ==null ) {                //////todo если пустой то без like                Log.d(this.getClass().getName(), "finalПоискФИОЧерезLIKE  " + finalПоискФИОЧерезLIKE);                class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковДЛяШаблонаЧкерезПоиск=new Class_GRUD_SQL_Operations(getApplicationContext());                class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковДЛяШаблонаЧкерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("НазваниеОбрабоатываемойТаблицы","fio");                class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковДЛяШаблонаЧкерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("СтолбцыОбработки","name,_id,uuid,BirthDate,snils");                //            /*        class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ФорматПосика","uuid=?    AND status_send !=? AND month_tabels=? AND  year_tabels =? AND fio IS NOT NULL ");                    ///"_id > ?   AND _id< ?"                    //////                    class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска1",finalПолученныйUUID);                    ///                    class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска2","Удаленная");                    ///                    class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска3",МЕсяцДляКурсораТабелей);                    //                    class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска4",ГодДляКурсораТабелей);////УсловиеПоискаv4,........УсловиеПоискаv5 .......*/                ////TODO другие поля                ///classGrudSqlOperations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ПоляГрупировки",null);                ////                //class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеГрупировки",null);                ////                class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковДЛяШаблонаЧкерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеСортировки","name ASC");                ////                /// class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеЛимита","1");                ////                // TODO: 12.10.2021  Ссылка Менеджер Потоков                PUBLIC_CONTENT  Class_Engine_SQLГдеНаходитьсяМенеджерПотоков =new PUBLIC_CONTENT (getApplicationContext());                // TODO: 27.08.2021  ПОЛУЧЕНИЕ ДАННЫХ ОТ КЛАССА GRUD-ОПЕРАЦИИ                Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон=null;                Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон= (SQLiteCursor)  new Class_GRUD_SQL_Operations(getApplicationContext()).                        new GetData(getApplicationContext()).getdata(class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковДЛяШаблонаЧкерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций,                        Class_Engine_SQLГдеНаходитьсяМенеджерПотоков.МенеджерПотоков,Create_Database_СсылкаНАБазовыйКласс.getССылкаНаСозданнуюБазу());                Log.d(this.getClass().getName(), "GetData " +Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон );                // TODO: 07.09.2021   _old     /*           ////////                            Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон = new Class_MODEL_synchronized(getApplicationContext()).                                    КурсорУниверсальныйДляБазыДанных("fio", new String[]{"name,_id,uuid,BirthDate,snils"},                                            null, null, null, null, "name ASC", null);///"SELECT name  FROM MODIFITATION_Client WHERE name=?",НазваниеТаблицНаСервере +"%"  // KEY_NAME + " LIKE ?"                            ///////*/                Log.d(this.getClass().getName(), " Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон .getCount() " +Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон .getCount());                if (Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон.getCount() >0) {                    МетодЗаполненияАктивтиДаннымиИзБазыДляПосикаПоФИО();                }                Log.d(this.getClass().getName(), " загрузка справочника ФИО без распарсивания а сразу" );            } else if (finalПоискФИОЧерезLIKE.length()>0) {                Log.d(this.getClass().getName(), "finalПоискФИОЧерезLIKE  " + finalПоискФИОЧерезLIKE );                // TODO: 26.08.2021 НОВЫЙ ВЫЗОВ НОВОГО КЛАСС GRUD - ОПЕРАЦИИ                class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковДЛяШаблонаЧкерезПоиск=new Class_GRUD_SQL_Operations(getApplicationContext());                class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковДЛяШаблонаЧкерезПоиск.                        concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("НазваниеОбрабоатываемойТаблицы","fio");                class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковДЛяШаблонаЧкерезПоиск.                        concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("СтолбцыОбработки","name,_id,uuid,BirthDate,snils");                class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковДЛяШаблонаЧкерезПоиск.                        concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ФорматПосика","name LIKE ?  ");                class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковДЛяШаблонаЧкерезПоиск.                        concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска1",finalПоискФИОЧерезLIKE+ "%");                ///             /*       class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска2","Удаленная");                    ///                    class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска3",МЕсяцДляКурсораТабелей);                    //                    class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска4",ГодДляКурсораТабелей);////УсловиеПоискаv4,........УсловиеПоискаv5 .......*/                ////TODO другие поля                ///classGrudSqlOperations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ПоляГрупировки",null);                ////                //class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеГрупировки",null);                ////                class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковДЛяШаблонаЧкерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеСортировки","date_update DESC");                class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковДЛяШаблонаЧкерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеЛимита","500");                // TODO: 12.10.2021  Ссылка Менеджер Потоков                PUBLIC_CONTENT Class_Engine_SQLГдеНаходитьсяМенеджерПотоков =new PUBLIC_CONTENT (getApplicationContext());                //// like TODO второй                Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон=null;                Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон= (SQLiteCursor)  new Class_GRUD_SQL_Operations(getApplicationContext()).                        new GetData(getApplicationContext()).getdata(class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковДЛяШаблонаЧкерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций,                        Class_Engine_SQLГдеНаходитьсяМенеджерПотоков.МенеджерПотоков,Create_Database_СсылкаНАБазовыйКласс.getССылкаНаСозданнуюБазу());                Log.d(this.getClass().getName(), "GetData "+Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон  );/*                // TODO: 07.09.2021   _old                            Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон = new Class_MODEL_synchronized(getApplicationContext()).                                    КурсорУниверсальныйДляБазыДанных("fio", new String[]{"name,_id,uuid,BirthDate,snils"},                                            "name LIKE ?", new String[]{ ВПотокеfinalПоискФИОЧерезLIKE + "%"}, null, null, "date_update DESC", "500");///"SELECT name  FROM MODIFITATION_Client WHERE name=?",                            // НазваниеТаблицНаСервере +"%"  // KEY_NAME + " LIKE ?"                            // new String[] { filter+"%" }, // new String[] {"%"+ filter+ "%" }, n*/                               /* Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон = new Class_MODEL_synchronized(getApplicationContext()).                                        КурсорУниверсальныйДляБазыДанных("fio", new String[]{"name,id,uuid,BirthDate,snils"},                                                "name LIKE ?", new String[]{"%" + finalПоискФИОЧерезLIKE + "%"}, null, null, "date_update DESC", "100");///"SELECT name  FROM MODIFITATION_Client WHERE name=?",                                // НазваниеТаблицНаСервере +"%"  // KEY_NAME + " LIKE ?"*/                // new String[] { filter+"%" }, // new String[] {"%"+ filter+ "%" }, n                ////todo проверяем курос                if (Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон.getCount()>0) {                    МетодЗаполненияАктивтиДаннымиИзБазыДляПосикаПоФИО();                }                Log.d(this.getClass().getName(), "finalПоискФИОЧерезLIKE  " + finalПоискФИОЧерезLIKE);            }else {                //////todo если пустой то без like                Log.d(this.getClass().getName(), "finalПоискФИОЧерезLIKE  " + finalПоискФИОЧерезLIKE);                ////                ////TODO ПОЛУЧАЕМ ВСЕ ДАННЫЕ ПО ТАБЛИЦУ ФИО ДЛЯ ПОСИКА                // TODO: 26.08.2021 НОВЫЙ ВЫЗОВ НОВОГО КЛАСС GRUD - ОПЕРАЦИИ                class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковДЛяШаблонаЧкерезПоиск=new Class_GRUD_SQL_Operations(getApplicationContext());                class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковДЛяШаблонаЧкерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("НазваниеОбрабоатываемойТаблицы","fio");                class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковДЛяШаблонаЧкерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("СтолбцыОбработки","name,_id,uuid,BirthDate,snils");                //       /*         class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковДЛяШаблонаЧкерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ФорматПосика","name LIKE ?  ");                ///"_id > ?   AND _id< ?"                //////                class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковДЛяШаблонаЧкерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска1",finalПоискФИОЧерезLIKE+ "%")*/;                ///             /*       class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска2","Удаленная");                    ///                    class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска3",МЕсяцДляКурсораТабелей);                    //                    class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска4",ГодДляКурсораТабелей);////УсловиеПоискаv4,........УсловиеПоискаv5 .......*/                ////TODO другие поля                ///classGrudSqlOperations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ПоляГрупировки",null);                ////                //class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеГрупировки",null);                ////                class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковДЛяШаблонаЧкерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеСортировки","name ASC");                ////                // class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковДЛяШаблонаЧкерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеЛимита","500");                // TODO: 12.10.2021  Ссылка Менеджер Потоков                PUBLIC_CONTENT  Class_Engine_SQLГдеНаходитьсяМенеджерПотоков =new PUBLIC_CONTENT (getApplicationContext());                //// like TODO второй                if (!Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон.isClosed()) {                    Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон.close();                    Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон=null;                }                Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон= (SQLiteCursor)  new Class_GRUD_SQL_Operations(getApplicationContext()).                        new GetData(getApplicationContext()).getdata(class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковДЛяШаблонаЧкерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций,                        Class_Engine_SQLГдеНаходитьсяМенеджерПотоков.МенеджерПотоков,Create_Database_СсылкаНАБазовыйКласс.getССылкаНаСозданнуюБазу());                Log.d(this.getClass().getName(), "GetData " +Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон );   /*             // TODO: 07.09.2021  _old                            Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон = new Class_MODEL_synchronized(getApplicationContext()).                                    КурсорУниверсальныйДляБазыДанных("fio", new String[]{"name,_id,uuid,BirthDate,snils"},                                            null, null, null, null, "name ASC", null);///"SELECT name  FROM MODIFITATION_Client WHERE name=?",НазваниеТаблицНаСервере +"%"  // KEY_NAME + " LIKE ?"*/                ///////                // new String[] { filter+"%" }, // new String[] {"%"+ filter+ "%" }, n                Log.d(this.getClass().getName()," Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон .getCount() " + Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон.getCount());                /////TODO если справочник был уже загружен то мы его не заполянм а с него и загружемся                ////todo проверяем куроср                if (Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон.getCount()>0) {                    МетодЗаполненияАктивтиДаннымиИзБазыДляПосикаПоФИО();                }                Log.d(this.getClass().getName(), " загрузка справочника ФИО без распарсивания а сразу");            }        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    //todo метод заполнения активтии из таблицы фио//todo метод не ПОСТРЕДТСВЕНО АПОЛЯНЕТ LISTVIEW ДАНЫМИ    private void МетодЗаполненияАктивтиДаннымиИзБазыДляПосикаПоФИО() {        try{            ЛистСДаннымиФИО.deferNotifyDataSetChanged();            ///todo перед заполенеем данных удалем возможные комнопенты на активити            try{                ГлавныйКонтейнерДляПосикаТабелей.removeAllViews();            } catch (Exception e) {                //   e.printStackTrace(); /*           ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());*/            }            МетодФинальнойВставкиДАнныхДляПосикаСотрудников();        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    ////todo ФИНАЛЬНЫЙ МЕТОД    private void МетодФинальнойВставкиДАнныхДляПосикаСотрудников() {        ////        ИндексСтрокКомпонентовТабеля=0;        ////////        Log.d(this.getClass().getName()," ИндексСтрокКомпонентовТабеля "+ИндексСтрокКомпонентовТабеля);        try {            SimpleCursorAdapter dataAdapter = new SimpleCursorAdapter(getApplicationContext(), R.layout.list_item,                    Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон, new String[]{"name"}, new int[]{android.R.id.text1}, CursorAdapter.FLAG_REGISTER_CONTENT_OBSERVER);            SimpleCursorAdapter.ViewBinder binding = new SimpleCursorAdapter.ViewBinder() {                @Override                public boolean setViewValue(View view, Cursor cursor, int columnIndex) {                    int ИндексФИО = cursor.getColumnIndex("name");                    int ИндексДеньРождения = cursor.getColumnIndex("BirthDate");                    Drawable icon = null;                    StringBuffer БуферФИОиДатыРождения=new StringBuffer();                    if (ИндексФИО == columnIndex) {                        icon = getResources().getDrawable(R.mipmap.icon_dsu1_tabels_for_find_item);                        icon.setBounds(0, 1, 60, 60);                        ((TextView) view).   setPadding(10,10,10,10);                        ((TextView) view).setCompoundDrawables(icon, null, null, null);                        String ФИОДляПОиска = cursor.getString(ИндексФИО);                        String ДатаРОжденияДляПОиска = cursor.getString(ИндексДеньРождения);                        if(ДатаРОжденияДляПОиска==null){                            ДатаРОжденияДляПОиска="нет";                        }////TODO заполение посика в сех сотрудников                        БуферФИОиДатыРождения.append("    ").append(ФИОДляПОиска).append("\n").                                append("   ").append("(").append(ДатаРОжденияДляПОиска).append(")").append(" г.");                        Log.d(this.getClass().getName(), " БуферФИОиДатыРождения.toString()" + БуферФИОиДатыРождения.toString());//////TODO заполняем simple двнными                        ((TextView) view).setText(БуферФИОиДатыРождения.toString());                        return true;                    } else {                        Log.e(this.getClass().getName(), "view.getId() " + view.getId());                    }                    return false;                }            };            dataAdapter.setViewBinder(binding);            ЛистСДаннымиФИО.setAdapter(dataAdapter);            ЛистСДаннымиФИО.setBackgroundResource(R.drawable.textlines_tabeltwo);            ЛистСДаннымиФИО.forceLayout();            try {                ГлавныйКонтейнерДляПосикаТабелей.removeAllViews();            } catch (Exception e) {                //   e.printStackTrace();            }            ////            try {                ГлавныйКонтейнерДляПосикаТабелей.addView(ЛистСДаннымиФИО);            } catch (Exception e) {                // e.printStackTrace();            }            ГлавныйКонтейнерДляПосикаТабелей.forceLayout();        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    ///////////    private void МетодОбработкиКликаПоЯчейкамСотрудникаВыбранным() {        ЛистСДаннымиФИО.setOnItemClickListener(new AdapterView.OnItemClickListener() {            @Override            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {                if (Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон.getCount()>0){                    ((TextView) view).setBackgroundColor(Color.GRAY);                    Log.d(this.getClass().getName(), "  Курсор_СамиФИОДляПоиска.getCount()" + Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон.getCount());                    Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон.moveToFirst();                    while (Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон.move(position)){                        long UUIDПолучаемДляОправкиВФИОпослеПосика=Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон.getLong(2);                        ((TextView) parent.getChildAt(0)).setTag(UUIDПолучаемДляОправкиВФИОпослеПосика);//////ВЫДЕЛЕМ ЖИРНЫМ ЦВЕТОМ ДАТЫ             /* TextView textView=  (TextView) parent.getChildAt((int) id);                textView.setTextSize(25);*/                        Log.d(this.getClass().getName()," UUIDПолучаемДляОправкиВФИОпослеПосика " +UUIDПолучаемДляОправкиВФИОпослеПосика);                        break;                    }//todo ЗАПОЛЯЕМ UUID И ИМЯ ФИО                    TextView textView = (TextView) view;                    long UUIDgetTagДляПосикаПолученныйИзListView= (long) ((TextView) parent.getChildAt(0)).getTag();//////ВЫДЕЛЕМ ЖИРНЫМ ЦВЕТОМ ДАТЫ                    String СамоЗначениеФИОДляПосикаПолученныйИзListView = textView.getText().toString(); // получаем текст нажатого элемента                    //Toast.makeText(getApplicationContext(), " Вы выбрали ФИО : " + СамоЗначениеФИОДляПосикаПолученныйИзListView   , Toast.LENGTH_LONG).show();                    //  Toast.makeText(getApplicationContext(), " Вы выбрали : " + String.valueOf(UUIDgetTagДляПосикаПолученныйИзListView ) , Toast.LENGTH_LONG).show();                    //TODO ПОЛУЧЕНЫЕ ЗНАЧЕНИЯ UUID  И ФИО ЗАПОЛЯНЕМ В ХЭШМЭП                    if (UUIDgetTagДляПосикаПолученныйИзListView!=0 && СамоЗначениеФИОДляПосикаПолученныйИзListView!=null  ){                        if (UUIDgetTagДляПосикаПолученныйИзListView>0) {                            /////todo заполение хэша сотрудниками котрые мы  ПОДОБРАЛИ                            ХэшФИОВсеДляПосика.put(UUIDgetTagДляПосикаПолученныйИзListView, СамоЗначениеФИОДляПосикаПолученныйИзListView);                        }                        Log.d(this.getClass().getName(), "  ХэшФИОВсеДляПосика.size() " + ХэшФИОВсеДляПосика.size()+ "  ХэшФИОВсеДляПосика.toString() "                                +ХэшФИОВсеДляПосика.toString()+" UUIDgetTagДляПосикаПолученныйИзListView " +UUIDgetTagДляПосикаПолученныйИзListView);                        ////// todo оформление                        КнопкаОтправкиСотрудникаДляТабеля.setVisibility(View.VISIBLE);                        //todo после вставки обнуляем переменные                        UUIDgetTagДляПосикаПолученныйИзListView=0;                        СамоЗначениеФИОДляПосикаПолученныйИзListView=null;                    }}}        });        //////todo    }    ////todo метод отправки полученых сотрудников на другую активти    private void МетодРаботуКнопкиКотораяОтправляетПодобранныхСотрудников() {        try{            КнопкаОтправкиСотрудникаДляТабеля.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    Log.d(this.getClass().getName(), " кликнем для созданни новго сотрдника при нажатии  ");                    if (ХэшФИОВсеДляПосика.size()>0) {                        СообщениеКотороеСпрашиваетТочноЛиНужноСоздатьНовогоСотрудника("Шаблоны", "Создание Шаблона", true);                    } else {                        Toast aa = Toast.makeText(getApplicationContext(), "OPEN",Toast.LENGTH_SHORT);                        ImageView cc = new ImageView(getApplicationContext());                        cc.setImageResource(R.drawable.icon_dsu1_add_organisazio_error);//icon_dsu1_synchronisazia_dsu1_success                        aa.setView(cc);                        aa.show();                        Toast.makeText(getApplicationContext(), "Вы не выбрали не одного сотрудника (выберите и повторите попытку).", Toast.LENGTH_SHORT).show();                    }                }            });        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    ///todo сообщение на активти ПОДБОР СОТРУДНИКА КОТОРЫЙ УЖЕ ЕСТЬ В БАЗЕ И ОТПРАВИТЬ ЕГО НА ДРУГТУЮ АКТИВНОСТЬ ПО ЗАПОДЕНИЮ В ТАБЕЛЬ    @UiThread    protected void СообщениеКотороеСпрашиваетТочноЛиНужноСоздатьНовогоСотрудника(String ШабкаДиалога, final String СообщениеДиалога, boolean статус) {        ///////СОЗДАЕМ ДИАЛОГ ДА ИЛИ НЕТ///////СОЗДАЕМ ДИАЛОГ ДА ИЛИ НЕТ        try {            ConstraintLayout constraintLayoutВозможностьЗаписиИмениШаблона=(ConstraintLayout) getLayoutInflater().inflate(R.layout.line_new_name_tample,null);//////сам вид            final AlertDialog alertDialog = new MaterialAlertDialogBuilder(this)                    .setTitle(ШабкаДиалога)                    .setMessage(СообщениеДиалога)                    .setPositiveButton("Сохранить", null)                    .setNeutralButton("Ещё", null)                    .setNegativeButton("Очистить", null)                    .setView(constraintLayoutВозможностьЗаписиИмениШаблона)                    .setIcon(R.drawable.icon_dsu1_new_tamples )// //icon_dsu1_new_customer_success                    .show();            EditText editTextНаписаноеИмяШаблона;            editTextНаписаноеИмяШаблона = alertDialog.findViewById(R.id.editextlinenametamle);            ////TODO ессли данная перменая не пустая знаит мы не созадем новый шадлн ы в него накидываем еще сотрудниклв            if( FullNameCFO!=null){                editTextНаписаноеИмяШаблона.setText( FullNameCFO)  ;            }else{            }/////////кнопка            final Button MessageBoxОтправкаУжеСуществещегоСотрудника = alertDialog.getButton(AlertDialog.BUTTON_POSITIVE);            MessageBoxОтправкаУжеСуществещегоСотрудника .setOnClickListener(new View.OnClickListener() {                ///MessageBoxUpdate метод CLICK для DIALOBOX                @Override                public void onClick(View v) {                    //удаляем с экрана Диалог                    alertDialog.dismiss();                    Log.d(this.getClass().getName(), " ХэшФИОВсеДляПосика.size()" + ХэшФИОВсеДляПосика.size() + " ХэшФИОВсеДляПосика.toString() " + ХэшФИОВсеДляПосика.toString());                    ////TODO получаем Имя Написаное Новог Шаблона                    НаписаниеИмяНовгоШаблона =null;                    ///                    НаписаниеИмяНовгоШаблона = editTextНаписаноеИмяШаблона.getText().toString().trim();                    Log.d(this.getClass().getName(), " НаписаниеИмяНовгоШаблона " + НаписаниеИмяНовгоШаблона);                    // TODO: 26.03.2021 ЕСЛИ ЕСТЬ НАЗВАНЕИ ШАБЛОНА ТО НАЧИНАЕМ РАБОТУ                    if (НаписаниеИмяНовгоШаблона != null) {                        if (НаписаниеИмяНовгоШаблона.length()>0) {///todo ВСТАВКИ ВЫБРАНОГО СОТРУЖИНКА КОТОРРЫЙ УЖЕ ЕСТЬ В  БАЗЕ                            МетодЗапускаВставкиВыбраногоСотрудникаВГотовыйТабельИзШаблона();                            Log.d(this.getClass().getName(), " НаписаниеИмяНовгоШаблона " + НаписаниеИмяНовгоШаблона);                        }else{                            Toast.makeText(getApplicationContext(), " Напите название Шаблона !!! "  , Toast.LENGTH_LONG).show();                        }                    }else {                        Toast.makeText(getApplicationContext(), " Напите название Шаблона !!! "  , Toast.LENGTH_LONG).show();                    }                }            });/////////кнопка            final Button MessageBoxUpdateЗАкрытьСозданиеТабеля = alertDialog.getButton(AlertDialog.BUTTON_NEUTRAL);            MessageBoxUpdateЗАкрытьСозданиеТабеля.setOnClickListener(new View.OnClickListener() {                ///MessageBoxUpdate метод CLICK для DIALOBOX                @Override                public void onClick(View v) {                    //удаляем с экрана Диалог                    alertDialog.dismiss();///запуск метода обновления через DIALOGBOX                }            });/////////кнопка            final Button MessageBoxUpdateОчиститьСозданиеТабеля = alertDialog.getButton(AlertDialog.BUTTON_NEGATIVE);            MessageBoxUpdateОчиститьСозданиеТабеля.setOnClickListener(new View.OnClickListener() {                ///MessageBoxUpdate метод CLICK для DIALOBOX                @Override                public void onClick(View v) {                    //удаляем с экрана Диалог                    alertDialog.dismiss();                    ///TODO ПОСЛЕ ОТПРАВКИ ОДНУЛЯЕМ ПЕРЕДВАЕМЫЙ хэш                    ХэшФИОВсеДляПосика.clear();                    //   ХэшФИОВсеДляПосика=null;                    ///TODO ошибка                    ///todo/////////TODO ЗАПОЛЕНИЕ                    ////TODO SET УСТАНОВКА ДАНЫХ В АДАПТЕР                    try {                        МетодПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковДЛяШаблонаЧкерезПоиск(null);                    } catch (InterruptedException e) {                        e.printStackTrace();                    }///запуск метода обновления через DIALOGBOX                }            });        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                    + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                    Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    ////todo добавления уже действущего сотрдника////todo добавления уже действущего сотрдника    private  void МетодЗапускаВставкиВыбраногоСотрудникаВГотовыйТабельИзШаблона() {        Long    UuidGeneretorForTemplesForFio_Tempels=0l;        try{            Log.d(this.getClass().getName(), " ХэшФИОВсеДляПосика  "+ХэшФИОВсеДляПосика.values());            try{                final Boolean[] ВерхнюТАблицуtemplatesУжеПроизвелиВставку = {false};                final long[] КоличествоУспешныхВставокВШаблонСотрулников = {0};                progressDialog= new ProgressDialog(this);                StringBuffer stringBufferЕслиНеВставленныйЗначения=new StringBuffer();                progressDialog= new ProgressDialog(this);                Integer ПубличноеID=    new SubClassGetPublicId().ПубличныйID(getApplicationContext());                Log.d(this.getClass().getName(), " ХэшФИОВсеДляПосика  "+ХэшФИОВсеДляПосика.values());                ////TODO КОД ПОСЛЕ ПОДБОРА  СУЩЕСТВУЕЩЕГО СОТРУДНИКА И ВСТАКА ЕГО В ДЕЙСТВУЩЕЙ ТАБЕЛЬ                if ( ХэшФИОВсеДляПосика.size()>0) {                    progressDialog.setIndeterminate(true);                    progressDialog.setTitle("Сотрудника/ов в Шаблон");                    progressDialog.setMessage("Добавление...");                    progressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);                    progressDialog.setMax(ХэшФИОВсеДляПосика.size());                    progressDialog.setProgress(0);                    progressDialog.setCanceledOnTouchOutside(false);                    progressDialog.setCancelable(false);                    progressDialog.show();                    ЛистСДаннымиФИО.setClickable(false);                    ГлавныйКонтейнерДляПосикаТабелей.setClickable(false);                    ГлавныйКойтейнерПоискаФИОСотрудника.setClickable(false);                 UuidGeneretorForTemplesForFio_Tempels  = (Long) new Class_Generation_UUID(getApplicationContext()).МетодГенерацииUUID(getApplicationContext());                }else {                    Toast.makeText(getApplicationContext(), "Нет данных для вставки", Toast.LENGTH_SHORT).show();                }                /////TODO МЕТОД ЗАПИСИ ВЫБРАНОГО СОТРКДГНКАВ В ТАБЕЛЬ                final int[] ТекущаяУспешнаяОперацияПоДобаленеиСотрудниковВТАбель = {0};// TODO: 29.06.2022 блокировки                ReentrantLock locker = new ReentrantLock(); // создаем блокировку                Condition condition = locker.newCondition(); // получаем условие, связанное с блокировкой                Long finalUuidGeneretorForTemplesForFio_Tempels = UuidGeneretorForTemplesForFio_Tempels;                Long finalUuidGeneretorForTemplesForFio_Tempels1 = UuidGeneretorForTemplesForFio_Tempels;                Long finalUuidGeneretorForTemplesForFio_Tempels2 = UuidGeneretorForTemplesForFio_Tempels;                Flowable flowableВставкаНовыхСотрудников=      Flowable.fromIterable(ХэшФИОВсеДляПосика.entrySet())                        .onBackpressureBuffer(ХэшФИОВсеДляПосика.entrySet().size(),true)                        .subscribeOn(Schedulers.single())                        .doOnNext(new Consumer<Map.Entry<Long, String>>() {                            @Override                            public void accept(Map.Entry<Long, String> longStringEntry) throws Throwable {                                locker.lock();                                try {                                    Log.d(this.getClass().getName(), "  ХэшФИОВсеДляПосика.keySet().stream().count() "+ ХэшФИОВсеДляПосика.keySet().stream().count()+                                            longStringEntry.getValue());                                    int КоличествоУспешныхВставокВШаблонСотрулниковДляПередачиPrograssUpdate = 0;                                    //////todo соTODO             ПЕРВАЯ ЧАСТЬ СОЗДАЕНИЯ САМОГО ШАБЛОНА                                    if (    ВерхнюТАблицуtemplatesУжеПроизвелиВставку[0]==false) {                                        ///TODO действие первое создание только ПУСТОГО ШАБЛОНА                                        Long ВставкаВtemples = методВставкаTemplates(finalUuidGeneretorForTemplesForFio_Tempels1,ПубличноеID);                                        // TODO: 24.05.2021 ТРЕТИЙ КОД ЕСЛИ ПОЛЬЗОВАТЕЛЬ ЗАХОДТЕ АВТОМАТИЧЕСКОЙ УСВТУКУ В ВЫХОДЫНЕ ДНИ                                        if (ВставкаВtemples > 0) {                                            ВерхнюТАблицуtemplatesУжеПроизвелиВставку[0] = true;                                            condition.await(250,TimeUnit.MILLISECONDS);                                            condition.signal();                                        }                                    }//////todo соTODO               ВТОРАЯ ЧАСТЬ ЗАПОЛЕНИЯ ШАБЛОНА В ДВЕ ТАБЛИЦЫ FIO И FIO_TEMPLES ПРИ НАЛИЧИИ УЖЕ ЧТО ЕСТЬ САМ ШАБЛОН// //TODO данные для вставки выбраного сотрудника его UUID и ФИО                                    Long UUID_ОТ_ФИО_СОтрудника =0l;                                    try {                                        UUID_ОТ_ФИО_СОтрудника=longStringEntry.getKey();                                        String ФИОДляВставки =longStringEntry.getValue();                                        ФИОДляВставки = ФИОДляВставки.replaceAll("\\n+", "");                                        int НачалоДатыВФИО=ФИОДляВставки.indexOf("(");                                        if(НачалоДатыВФИО>=0){                                            ФИОДляВставки = ФИОДляВставки.substring(0, НачалоДатыВФИО);                                        }                                        ФИОДляВставки = ФИОДляВставки.trim();                                        Long              РезультатВставкиFio_Template = методВставкиFio_Template(UUID_ОТ_ФИО_СОтрудника, ФИОДляВставки,                                                finalUuidGeneretorForTemplesForFio_Tempels2,  ПубличноеID);                                        Log.d(this.getClass().getName(), " РезультатВставкиFio_Template " + РезультатВставкиFio_Template);                                        if (РезультатВставкиFio_Template > 0) {                                            КоличествоУспешныхВставокВШаблонСотрулниковДляПередачиPrograssUpdate++;                                            КоличествоУспешныхВставокВШаблонСотрулников[0]++;                                        }                                        condition.await(250,TimeUnit.MILLISECONDS);                                        condition.signal();                                        // TODO: 29.04.2021 успешная вставка в шаблон нового сотрудуника                                        if (РезультатВставкиFio_Template > 0) {                                            ((Activity)КонтекстДляАктивтиПосикаШаблонов).runOnUiThread(new Runnable() {                                                @Override                                                public void run() {                                                    progressDialog.setIndeterminate(false);                                                    progressDialog.setProgress((int) КоличествоУспешныхВставокВШаблонСотрулников[0]);                                                    progressDialog.setMessage("Добавление..."+КоличествоУспешныхВставокВШаблонСотрулников[0]+" из: ("+ХэшФИОВсеДляПосика.size()+")");                                                }                                            });                                            // TODO: 29.04.2021 ошибка добалния такой сотуддник уже есть  в шаблона                                        } else {                                            Log.e(this.getClass().getName(), " нет вставки в шаблон заполения ");                                            ((Activity)КонтекстДляАктивтиПосикаШаблонов).runOnUiThread(new Runnable() {                                                @Override                                                public void run() {                                                    progressDialog.setMessage("Ошибка сотрудник не добавилься...");                                                }                                            });                                        }                                        ///TODO удаляем из хэшмапа внутри цыкла после успешной вставки цикл чтобы он не падал                                    } catch (Exception e) {                                        e.printStackTrace();                                        Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                                                + Thread.currentThread().getStackTrace()[2].getLineNumber());                                        new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                                                Thread.currentThread().getStackTrace()[2].getLineNumber());                                    }                                } catch (Exception e) {                                    e.printStackTrace();                                    Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                                            + Thread.currentThread().getStackTrace()[2].getLineNumber());                                    new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                                            Thread.currentThread().getStackTrace()[2].getLineNumber());                                }finally {                                    locker.unlock();                                }                                Log.d(this.getClass().getName(), "  ХэшФИОВсеДляПосика.keySet().stream().count() "+ ХэшФИОВсеДляПосика.keySet().stream().count());                            }                        })                        .doOnError(new Consumer<Throwable>() {                            @Override                            public void accept(Throwable throwable) throws Throwable {                                Log.e(this.getClass().getName(), "Ошибка " + throwable + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                                        + Thread.currentThread().getStackTrace()[2].getLineNumber());                                new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(throwable.toString(),                                        this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                                        Thread.currentThread().getStackTrace()[2].getLineNumber());                            }                        })                        .doOnComplete(new Action() {                            @Override                            public void run() throws Throwable {                                Log.d(this.getClass().getName(), "  ХэшФИОВсеДляПосика.keySet().stream().count() "+ ХэшФИОВсеДляПосика.keySet().stream().count());                                ЛистСДаннымиФИО.setClickable(true);                                ГлавныйКонтейнерДляПосикаТабелей.setClickable(true);                                progressDialog.setIndeterminate(false);                                progressDialog.setProgress(ХэшФИОВсеДляПосика.size());                                Log.d(  this.getClass().getName(), " метод посика уже существующего сотрудника в базе андройжа");                                progressDialog.dismiss();                                ///TODO после успешной встаки удаляе                                ХэшФИОВсеДляПосика.clear();                                ЛистСДаннымиФИО.invalidate();                                ЛистСДаннымиФИО.deferNotifyDataSetChanged();                                ЛистСДаннымиФИО.forceLayout();                                ГлавныйКойтейнерПоискаФИОСотрудника.forceLayout();                                /////TODO обнуляем статические переменееык перерд каждым созданеим нового табеля                                методBackActivityListPeoples();                            }                        });                flowableВставкаНовыхСотрудников.subscribe();            } catch (Exception e) {                e.printStackTrace();                Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                        " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                        Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());            }            ///////        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    private  Long методВставкиFio_Template(@NotNull  Long UUID_ФИО_Котрудника, @NotNull String ФИОДляВставки,                                           @NotNull Long UuidGeneretorForTemplesForFio_Tempels,                                           @NotNull Integer ПубличноеID) {        Long РезультатВставкиСотрудниковУжеСозданныйШаблон= 0l;        try {            ContentValues АдаптерFio_TemplateFio_Template = new ContentValues();////контрейнер для нового табеля            АдаптерFio_TemplateFio_Template.putNull("id");            АдаптерFio_TemplateFio_Template.put("user_update", ПубличноеID);            АдаптерFio_TemplateFio_Template.put("fio_uuid", UUID_ФИО_Котрудника);            ////todo создаение UUID            Long UUIDGeneratorFio_Temples = (Long) new Class_Generation_UUID(getApplicationContext()).МетодГенерацииUUID(getApplicationContext());            АдаптерFio_TemplateFio_Template.put("uuid", UUIDGeneratorFio_Temples);                АдаптерFio_TemplateFio_Template.put("fio_template", UuidGeneretorForTemplesForFio_Tempels);            // TODO: 18.03.2023  получаем ВЕСИЮ ДАННЫХ            Long РезультатУвеличинаяВерсияДАныхЧата =                    new SubClassUpVersionDATA().МетодПовышаемВерсииCurrentTable(  "Fio_Template",getApplicationContext(),new CREATE_DATABASE(getApplicationContext()).getССылкаНаСозданнуюБазу());            Log.d(this.getClass().getName(), " РезультатУвеличинаяВерсияДАныхЧата  " + РезультатУвеличинаяВерсияДАныхЧата);            АдаптерFio_TemplateFio_Template.put("current_table", РезультатУвеличинаяВерсияДАныхЧата);            String СгенерированованныйДатаДляДаннойОперации = new Class_Generation_Data(getApplicationContext()).ГлавнаяДатаИВремяОперацийСБазойДанных();            АдаптерFio_TemplateFio_Template.put("date_update", СгенерированованныйДатаДляДаннойОперации);// TODO: 25.10.2021  ВТОРОЕ ДЕЙСТИЕ ЗАПОЛЯНЕМ УЖЕ ВО ВТОРУЮ ЬАБЛИЦУ ВЫБРАННЫХ СОТРУЛДНИКОВ В ШАБЛОН            РезультатВставкиСотрудниковУжеСозданныйШаблон = new Class_MODEL_synchronized(getApplicationContext()).                    ВставкаДанныхЧерезКонтейнерТолькоПриСозданииНовогоСотрудникаУниверсальная("Fio_Template",                            АдаптерFio_TemplateFio_Template );//////TODO когда true -это значет применяеться только не вобмене  и говорит что плюс записываем изменению версии джанных            Log.d(this.getClass().getName(), " РезультатВставкиПодобраногоСотрудковВШаблонеTemplates" + РезультатВставкиСотрудниковУжеСозданныйШаблон );            if (РезультатВставкиСотрудниковУжеСозданныйШаблон > 0) {                Log.d(this.getClass().getName(), "\n" + "  РезультатВставкиСотрудниковУжеСозданныйШаблон  " + РезультатВставкиСотрудниковУжеСозданныйШаблон);            }        } catch (Exception e) {            e.fillInStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }        return РезультатВставкиСотрудниковУжеСозданныйШаблон;    }    private  Long методВставкаTemplates(@NotNull Long UuidGeneretorForTemplesForFio_Tempels,                                        @NotNull Integer ПубличноеID) {        Long РезультатВставкиПодобраногоПервоеДействиеСотрудковВШаблонеTemplates=0l;        try {            ContentValues АдаптерДляСозданиеНовогоСотрудаТАблицаТабельТолькоОбновление = new ContentValues();////контрейнер для нового табеля            ////todo месяц и год нового сотрудника            Class_MODEL_synchronized classModel_synchronizedОпервцииДОбавленияДанныхСотрудникавШаблон =new Class_MODEL_synchronized(КонтекстДляАктивтиПосикаШаблонов);            String ПоученыйУжеСущетсвующийСЦО = null;            String ПоученыйУжеСущетсвующийПерартмет = null;            //TODO СОЗДАНИЕ СОТРУДНИКА В ТАБЕЛЬ            final Cursor[] Курсор_ИщетВВидеТабеляНазваниеТабеляЦФОИПлюсдерпартмает = {null};            /////TODO КОД ЧИСТА ВСТАВКИ НОВОГО ТАБЕЛЯ И В НЕГО ОВГО СОТРУЖНИКА            ContentValues АдаптерДляСозданиеНовогоСотрудаТАблицаШаблонТолькоВставкаTemplates = new ContentValues();////контрейнер для нового табеля            String ДатаПриВыбореСотрудникаВставка = null;                String   СгенерированованныйДатаПриСозданиииШаблона=     new Class_Generation_Data(getApplicationContext()).ГлавнаяДатаИВремяОперацийСБазойДанных();                АдаптерДляСозданиеНовогоСотрудаТАблицаШаблонТолькоВставкаTemplates.put("date_update", СгенерированованныйДатаПриСозданиииШаблона);                Log.d(this.getClass().getName(), " СгенерированованныйДатаПриСозданиииШаблона " +СгенерированованныйДатаПриСозданиииШаблона);                АдаптерДляСозданиеНовогоСотрудаТАблицаШаблонТолькоВставкаTemplates.put("user_update", ПубличноеID);                АдаптерДляСозданиеНовогоСотрудаТАблицаШаблонТолькоВставкаTemplates.put("name_templates", НаписаниеИмяНовгоШаблона);                АдаптерДляСозданиеНовогоСотрудаТАблицаШаблонТолькоВставкаTemplates.put("status_send", " ");                АдаптерДляСозданиеНовогоСотрудаТАблицаШаблонТолькоВставкаTemplates.putNull("id");                АдаптерДляСозданиеНовогоСотрудаТАблицаШаблонТолькоВставкаTemplates.put("uuid", UuidGeneretorForTemplesForFio_Tempels);                // TODO: 18.03.2023  получаем ВЕСИЮ ДАННЫХ                Long РезультатУвеличинаяВерсияДАныхЧата =                        new SubClassUpVersionDATA().МетодПовышаемВерсииCurrentTable(   "Templates",getApplicationContext(),                                new CREATE_DATABASE(getApplicationContext()).getССылкаНаСозданнуюБазу());                Log.d(this.getClass().getName(), " РезультатУвеличинаяВерсияДАныхЧата  " + РезультатУвеличинаяВерсияДАныхЧата);                //TODO  конец курант ча                АдаптерДляСозданиеНовогоСотрудаТАблицаШаблонТолькоВставкаTemplates.put("current_table", РезультатУвеличинаяВерсияДАныхЧата);                try {                    // TODO: 11.03.2021 //таблица fio tample ПЕРВАЯ ОПЕРЦИЯ  ВСТАВЛЯЕМ САМ НОЫЙ ШАБЛОН TEMPLES                    РезультатВставкиПодобраногоПервоеДействиеСотрудковВШаблонеTemplates = classModel_synchronizedОпервцииДОбавленияДанныхСотрудникавШаблон.                            ВставкаДанныхЧерезКонтейнерТолькоПриСозданииНовогоСотрудникаУниверсальная("Templates",                                    АдаптерДляСозданиеНовогоСотрудаТАблицаШаблонТолькоВставкаTemplates );//////TODO когда true -это значет применяеться только не вобмене  и говорит что плюс записываем изменению версии джанных                    /////                    Log.d(this.getClass().getName(), " РезультатВставкиПодобраногоПервоеДействиеСотрудковВШаблонеTemplates"                            + РезультатВставкиПодобраногоПервоеДействиеСотрудковВШаблонеTemplates);                } catch (Exception e) {                    e.printStackTrace();                    Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                            " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                    new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                            Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());                }        } catch (Exception e) {            e.fillInStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }        return РезультатВставкиПодобраногоПервоеДействиеСотрудковВШаблонеTemplates;    }    /////todo метод заполения аралилта и хэшмема    private void МетодЗаполенияАрайЛистаИХэшМэпаДляПосикаПоФИО(String ПолученыеФИО, String ПолученныеID, long ПолученныйUUID,String ПолученыеДатаРождения,String ПолученыеСНИЛС) {        try{            /////TODO НЕ ПОСТРДВСТВЕНО ЗАПОЛЯНЕМ LISTVIEW  ДАННЫМИ            АрайЛИстФИОВсеДляПосика.add(ПолученыеФИО );            Log.d(this.getClass().getName(), "  АрайЛИстФИОВсеДляПосика.size() " + АрайЛИстФИОВсеДляПосика.size() + " АрайЛИстФИОВсеДляМетокТабеля " +  АрайЛИстФИОВсеДляПосика.toString()+                    "  ПолученныйUUID  " +ПолученныйUUID);            /////todo заполения TAG uuid меток табеля            ЛистСДаннымиФИО.setTag(String.valueOf(ПолученныйUUID));        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    // TODO КОД СЛУШАТЕЛЬ ПРИ НАЖАТИИ НА ТАБЕЛЬ Создаем экземпляр TextWatcher:    private final TextWatcher СлушательПолученияДанных = new TextWatcher() {        public void beforeTextChanged (CharSequence s,int start, int count, int after){            Log.d(this.getClass().getName(), "  beforeTextChanged  " + s.toString());            String ЗначениевПоискеФИО = s.toString();        }        public void onTextChanged (CharSequence s,int start, int before, int count){            Log.d(this.getClass().getName(), "  onTextChanged  " + s.toString());        }        //Задаем действия для TextView после смены введенных в EditText символов:        public void afterTextChanged (Editable s){            try {                //TODO ДАННЫЙ КОД НЕПОСТРЕДСТВЕННО ЗАРУСКАЕТ ОБНОВЛЕНИЕ ЛОКАЛЬНОЕ С АКТИВТИИ                Log.d(this.getClass().getName(), "  afterTextChanged " + s.toString());                String СамоЗначениеЯчейкиТабеля = s.toString();                Log.d(this.getClass().getName(), "  СамоЗначениеЯчейкиТабеля" + СамоЗначениеЯчейкиТабеля);                Log.d(this.getClass().getName(), "  СамоЗначениеЯчейкиТабеля" + СамоЗначениеЯчейкиТабеля);                ////TODO запускаем метод ЛОКАЛЬНОГО ОБНОВЛЕНИЕ ПОСЛЕ ПОЛУЧЕННЫХ ДАННЫХ                МетодПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковДЛяШаблонаЧкерезПоиск(СамоЗначениеЯчейкиТабеля); // TODO ПОСИК С LIKE                /////            } catch (Exception e) {                e.printStackTrace();                ///метод запись ошибок в таблицу                Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                        " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                        Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());            } finally {            }        }    };    // TODO  конец КОД СЛУШАТЕЛЬ ПРИ НАЖАТИИ НА ТАБЕЛЬ Создаем экземпляр TextWatcher:    //TODO метод получени месяа для записи в одну колонку    private int МетодПолучениниеМесяцПриСозданииНовогоСОтрудника(String ДатаКоторуюНадоПеревестиИзТекставЦифру) throws ParseException {        int month = 0;        try{            System.out.println(" " + ДатаКоторуюНадоПеревестиИзТекставЦифру + " " + ДатаКоторуюНадоПеревестиИзТекставЦифру);            SimpleDateFormat formatмесяц = new SimpleDateFormat("LLLL  yyyy", new Locale("ru"));            // formatмесяц.setTimeZone(TimeZone.getTimeZone("UTC-03:00"));            formatмесяц.setTimeZone(TimeZone.getTimeZone("Europe/Moscow"));            Date date = formatмесяц.parse(ДатаКоторуюНадоПеревестиИзТекставЦифру);            GregorianCalendar calendar = (GregorianCalendar) GregorianCalendar.getInstance(new Locale("ru"));            calendar.setTime(date);            /////TODO ОБРАБАТЫВАЕМ ДАННЫЕ ДАТЫ ЯНВАРЬ            if (ДатаКоторуюНадоПеревестиИзТекставЦифру.matches("(.*)Январь(.*)")) {                month = calendar.get(Calendar.MONTH)+1;            } else                month = calendar.get(Calendar.MONTH) + 1;            ///////        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }        return month;    }    //TODO метод получени месяа для записи в одну колонку    private int МетодПолучениниеГОдПриСозданииНовогоСОтрудника(String ДатаКоторуюНадоПеревестиИзТекставЦифру) throws ParseException {        int year= 0;        try{            System.out.println("ДатаКоторуюНадоПеревестиИзТекставЦифру " + ДатаКоторуюНадоПеревестиИзТекставЦифру);            SimpleDateFormat formatгод = new SimpleDateFormat("LLLL  yyyy", new Locale("ru"));            // formatгод.setTimeZone(TimeZone.getTimeZone("UTC-03:00"));            formatгод.setTimeZone(TimeZone.getTimeZone("Europe/Moscow"));            Date date = formatгод.parse(ДатаКоторуюНадоПеревестиИзТекставЦифру);            Calendar calendar = Calendar.getInstance(new Locale("ru"));            calendar.setTime(date);            if (ДатаКоторуюНадоПеревестиИзТекставЦифру.matches("(.*)Январь(.*)")) {                year = calendar.get(Calendar.YEAR);            } else                year = calendar.get(Calendar.YEAR);        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }        return year;    }    //функция получающая время операции ДАННАЯ ФУНКЦИЯ ВРЕМЯ ПРИМЕНЯЕТЬСЯ ВО ВСЕЙ ПРОГРАММЕ    ///todo сообщение на активти создание новго сотрудника спрашиваем нужно ли создать    ///todo сообщение    @UiThread    protected void СообщениеСообщаетОСоздаенииНовогоСотрудника(String ШабкаДиалога,  String СообщениеДиалога,                                                               boolean статус ) {        ///////СОЗДАЕМ ДИАЛОГ ДА ИЛИ НЕТ///////СОЗДАЕМ ДИАЛОГ ДА ИЛИ НЕТ        int ФлагЗнака;        if (статус) {            ФлагЗнака = R.drawable.icon_dsu1_new_customer_success;//icon_dsu1_new_customer7        } else {            ФлагЗнака = R.drawable.icon_dsu1_new_customer_error;        }        try {//////сам вид            final AlertDialog alertDialog = new MaterialAlertDialogBuilder(this)                    .setTitle(ШабкаДиалога)                    .setMessage(СообщениеДиалога)                    .setPositiveButton("ОК", null)                    .setIcon(ФлагЗнака)                    .show();/////////кнопка            final Button MessageBoxUpdateСоздатьТабель = alertDialog.getButton(AlertDialog.BUTTON_POSITIVE);            MessageBoxUpdateСоздатьТабель.setOnClickListener(new View.OnClickListener() {                ///MessageBoxUpdate метод CLICK для DIALOBOX                @Override                public void onClick(View v) {                    //удаляем с экрана Диалог                    alertDialog.dismiss();                    Log.d(this.getClass().getName(), "  ФИНАЛ создание нового сотрудника ");                    if (статус) {                        //TODO после успешной вставки нового сотрудника  в табель обнуляем переменные///TODO метод запуска формы после вставки                        ///todo ПОСЛЕ ЦИКЛА ОБНУЛЯЕМ ХЭШ                        //МетодаКоторыйПослеУспешнойВставкиЗапускаетТАбельсНовымСотрудниковм();                        try{                            методBackActivityListPeoples();                        } catch (Exception e) {                            e.printStackTrace();                            ///метод запись ошибок в таблицу                            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());                        }                    }                }            });        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                    + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                    Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    ///todo финалный метод еотровый другому активти посылает данные    private void методBackActivityListPeoples() {        try{            Intent ИнтентBackActivity_New_Templates = new Intent();            ИнтентBackActivity_New_Templates.setClass(getApplicationContext(), MainActivity_New_Templates.class);            Bundle dataActivity_New_Templates=new Bundle();            dataActivity_New_Templates.putLong("MainParentUUID", MainParentUUID);            dataActivity_New_Templates.putInt("Position",    Position);            dataActivity_New_Templates.putInt("ГодТабелей",     ГодТабелей);            dataActivity_New_Templates.putInt("МЕсяцТабелей", МЕсяцТабелей);            dataActivity_New_Templates.putInt("DigitalNameCFO",  DigitalNameCFO);            dataActivity_New_Templates.putString("FullNameCFO", FullNameCFO);            dataActivity_New_Templates.putString("ИмесяцвИГодСразу",    ИмесяцвИГодСразу);            dataActivity_New_Templates.putLong("CurrenrsСhildUUID",  CurrenrsСhildUUID);            ИнтентBackActivity_New_Templates.putExtras(dataActivity_New_Templates);            startActivity(ИнтентBackActivity_New_Templates);            Log.d(this.getClass().getName(),"\n" + " class " + Thread.currentThread().getStackTrace()[2].getClassName() + "\n" +                    " metod " + Thread.currentThread().getStackTrace()[2].getMethodName() + "\n" +                    " line " + Thread.currentThread().getStackTrace()[2].getLineNumber() + "\n"                    + " dataActivity_New_Templates "+dataActivity_New_Templates);        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    protected  View КонтентТабеляКоторыйМыИБудемЗаполнятьВнутриЦикла;    //TODO адаптер сомостоятельный для GridView    public class СоздаемСвойАдаптерДляГридМюу extends BaseAdapter {        @Override        public int getCount() {            return 0;        }        @Override        public Object getItem(int position) {            return null;        }        @Override        public long getItemId(int position) {            return 0;        }        @Override        public View getView(int position, View convertView, ViewGroup parent) {            LayoutInflater МеханизмЗагрузкиОдногЛайАутавДругой = getLayoutInflater();            if(convertView ==null){                /*КонтентТабеляКоторыйМыИБудемЗаполнятьВнутриЦикла = МеханизмЗагрузкиОдногЛайАутавДругой.inflate(R.layout.activity_main_grid_for_tables_two,//activity_main_find_customer_for_tables // activity_main_grid_for_tables                        ГлавныйКонтейнерТабель, false);*/            }            /*/////TODO ТАБЕЛЬ ФИО создаем textview названия дней понелельник вторик среда четеварг            ///////// todo фио            НазваниеДанныхВТабелеФИО = КонтентТабеляКоторыйМыИБудемЗаполнятьВнутриЦикла.findViewById(R.id.КонтейнерКудаЗагружаетьсяФИО);            ПосикДня = Курсор_ЗагружаемТабеляСозданный.getColumnIndex("uuid"); ////TODO СЮДА ПОЛЕ UUID            НазваниеСтолбикаДляЛобкальногоОбноления = Курсор_ЗагружаемТабеляСозданный.getColumnName(ПосикДня);            НазваниеДанныхВТабелеФИО.setTag(Курсор_ЗагружаемТабеляСозданный.getString(ПосикДня));            Log.d(this.getClass().getName(), " UUID пристваем Внутри ФИО  " + Курсор_ЗагружаемТабеляСозданный.getString(ПосикДня));            ////todo УСТАНАВЛИВАЕМ КЛИК НА ФИО            НазваниеДанныхВТабелеФИО.setOnLongClickListener(СлушательУдаланиеСотрудникаИзТабеля);            НазваниеДанныхВТабелеФИО.setOnClickListener(СлушательИнформацияОСотрудника);*/            return convertView;        }    }}