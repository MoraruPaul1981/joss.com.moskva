package com.dsy.dsu.Code_ForTABEL;import android.app.Activity;import android.app.ProgressDialog;import android.content.BroadcastReceiver;import android.content.ComponentName;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.content.ServiceConnection;import android.content.pm.ActivityInfo;import android.content.res.Configuration;import android.database.Cursor;import android.database.DataSetObserver;import android.database.sqlite.SQLiteCursor;import android.graphics.Color;import android.graphics.Paint;import android.graphics.Typeface;import android.graphics.drawable.Drawable;import android.os.Bundle;import android.os.Handler;import android.os.IBinder;import android.os.Looper;import android.util.Log;import android.util.TypedValue;import android.view.Gravity;import android.view.View;import android.view.WindowManager;import android.view.animation.Animation;import android.view.animation.AnimationUtils;import android.widget.AdapterView;import android.widget.ArrayAdapter;import android.widget.Button;import android.widget.CheckedTextView;import android.widget.CursorAdapter;import android.widget.EditText;import android.widget.ListView;import android.widget.ScrollView;import android.widget.SimpleCursorAdapter;import android.widget.Spinner;import android.widget.TextView;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.annotation.UiThread;import androidx.appcompat.app.AlertDialog;import androidx.appcompat.app.AppCompatActivity;import androidx.constraintlayout.widget.ConstraintLayout;import androidx.localbroadcastmanager.content.LocalBroadcastManager;import com.dsy.dsu.Business_logic_Only_Class.CREATE_DATABASE;import com.dsy.dsu.Business_logic_Only_Class.Class_GRUD_SQL_Operations;import com.dsy.dsu.Business_logic_Only_Class.Class_Generation_Errors;import com.dsy.dsu.Business_logic_Only_Class.Class_Generations_PUBLIC_CURRENT_ID;import com.dsy.dsu.Business_logic_Only_Class.Class_Generator_One_WORK_MANAGER;import com.dsy.dsu.Business_logic_Only_Class.Class_MODEL_synchronized;import com.dsy.dsu.Business_logic_Only_Class.Class_Search_Changes_Data;import com.dsy.dsu.Business_logic_Only_Class.Class__Generation_Genetal_Tables;import com.dsy.dsu.Business_logic_Only_Class.PUBLIC_CONTENT;import com.dsy.dsu.Business_logic_Only_Class.SubClassUpVersionDATA;import com.dsy.dsu.Code_For_Services.Service_For_Public;import com.dsy.dsu.Code_For_Services.Service_for_AdminissionMaterial;import com.dsy.dsu.R;import com.google.android.material.dialog.MaterialAlertDialogBuilder;import com.google.android.material.floatingactionbutton.FloatingActionButton;import org.jetbrains.annotations.NotNull;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import java.util.Collections;import java.util.Date;import java.util.HashMap;import java.util.LinkedHashMap;import java.util.Locale;import java.util.Map;import java.util.concurrent.CopyOnWriteArrayList;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeoutException;import io.reactivex.rxjava3.android.schedulers.AndroidSchedulers;import io.reactivex.rxjava3.core.Completable;import io.reactivex.rxjava3.functions.Action;import io.reactivex.rxjava3.functions.Predicate;import io.reactivex.rxjava3.schedulers.Schedulers;public class MainActivity_List_Peoples extends AppCompatActivity {    // TODO данные переменные обьявляються на самом активти ТАБЕЛЬ    private Spinner СпинерТАбельМЕсяцФинал;/////спинеры для создание табеля    private Spinner СпинерТАбельДепартаментФинал;/////спинеры для создание табеля    private ScrollView ScrollViewДляВсехСотрудниковТабеля;    private   boolean РежимыПросмотраДанныхЭкрана;    private String МесяцТабеляФинал = "";    private String ГодТабеляФинал;    private Configuration config;    private  ArrayList<String> МассивДляВыбораСпинераДаты = new ArrayList<>(); //////АКАРЛИСТ ДЛЯ ПОЛУЧЕНЫЙ НОВЫХ ДАТ    private ArrayList<String> МассивДляВыбораВСпинерДепартамент = new ArrayList<>(); //////АКАРЛИСТ ДЛЯ ПОЛУЧЕНЫЙ НОВЫХ ДАТ    private  String КонтентСпинераНаАктивтиТабель = "";    private String ИмяТабеляФинал = "";    private String ДепартаментТабеляФинал = "";    private  int ЦифровоеИмяНовгоТабеля=0;    private   Long ПолученнаяUUIDНазванияОрганизации = 0l;    private   String UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя;    private  TextView НазваниеДанныхВТабелеДниНедели;    private  TextView НазваниеДанныхВТабелеСНИЛС;    private   TextView НазваниеДанныхВТабелеФИО;    private   EditText СамиДанныеТабеля;    private   ArrayAdapter<String> ЛистАдаптерДляListViewВсеСотрудникиВТабеле;    private  int ПосикДня;    private  String НазваниеСтолбикаДляЛобкальногоОбноления = "";    private  String НазваниеТабеля = "";    private   String НазваниеЗагруженногТАбеля = "";    private   String ДробимДляТабеляГод, ДробимДляТебеляМесяц;    protected View КонтентТабеляКоторыйМыИБудемЗаполнятьВнутриЦикла;    private  LinkedHashMap<Integer, String> ХЭШНазваниеДнейНедели = new LinkedHashMap<>();    private  int ПолученыеКоличествоСторочек = 0;    private  Long   РодительскийUUDТаблицыТабель=0l;    private  String   ПолученныйПоследнийМесяцДляСортировкиЕгоВСпиноре;    private   CREATE_DATABASE   Create_Database_СсылкаНАБазовыйКласс;    private   String НазваниеТабеляПослеУспешногоСозданиеСотрудника = "";    private  String UUIDТабеляПослеУспешногоСозданиеСотрудника = "";    private  String НазваниеТабеляПришелПослеСоздангоНового = "";    private  String ДепартаментПришелПослеСоздангоНового = "";    private   String ПолноеИмяТабеляПослеСозданиеНовогоСотрудника = "";    private  String ПолноеИмяТабеляПослеСозданиеНовогоСотрудникаПослеУспешнойВставки = "";    private  String UUIDТабеляКнопкаBACKУниверсальный;    private  String МесяцДляЗагрузкиТабелей = "";    private  String ГодДляЗагрузкиТабелей = "";    private  String ПубличноеIDЗагрузкиТабелей = "";    private  int МЕсяцДляКурсораТабелей;    private  int ГодДляКурсораТабелей;    private Button КнопкаНазад;    private Button КнопкаЛеваяПередвиженияПоДанным;    private Button КнопкаПраваяПередвиженияПоДанным;    private TextView ОбщееКоличествоВТабелеСотудников;    private int КоличествоДнейвЗагружаемойМесяце;    private  boolean МыУжеВКодеУденияСотрудника = false;    private  FloatingActionButton КруглаяКнопкаСамТабель;    private   String ЛимитСоСмещениемДанных = "";    private  int ИндексДвижениеТабеляСкролл = 0;    private  int ИндексДвижениеТабеляКнопки = 0;    private  int ОбщееКоличествоЛюдейВТабелеТекущем;    private   Map<Object, Object> ХэшЛовимUUIDIDНазваниеСтолбика;    private  String ПолучениеЗначениеДоИзменения;    private  String СамоЗначениеЯчейкиТабеля;    private  ListView ЛистДляВсеСотурдникаТекущегоТабеля; /////////TODO КОГДА НЕТ ДАННЫХ    private   Map<Integer, Long> ХэшФИОВсеСотурдникаТекущегоТабеля;    private   TextView textView3СловоТабель;    private SQLiteCursor Курсор_ВсеСотрудникиТабеля = null;    private Context context;    private Context КонтекстСотрудникиДляТабеля;    private  int IDЧьиДанныеДляСотрудников;    private boolean ФлагУжеСообщалиЧтоСообщениеЧТоТАбельПроведетБыло = false;    private   Activity activity;    private   SimpleCursorAdapter АдаптерДЛяЛистаСотрудниковАктивти =null;    private   Handler handlerДляList_Peoples=null;    private ProgressDialog progressDialog;    private  Service_for_AdminissionMaterial.LocalBinderДляПолучениеМатериалов binderМатериалы;    private Animation animation;    private   ServiceConnection serviceConnectionМатериалы;    ///TODO компонеты табеля    @Override    protected void onCreate(Bundle savedInstanceState) {        try {            super.onCreate(savedInstanceState);            setContentView(R.layout.activity_main__tabel_listview);            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);            getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);            //  getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_HIDE_NAVIGATION  );            getWindow().addFlags(WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD                    | WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON                    | WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);            /////            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LOCKED);            getSupportActionBar().hide(); ///скрывать тул бар            КонтекстСотрудникиДляТабеля = this;            context = this;            ///TODO попытка открыть экран как full screan            Log.d(this.getClass().getName(), "   ");            /////todo данная настрока запрещает при запуке активти подскаваать клавиатуре вверх на компонеты eedittext            activity=this;///////TODO            Create_Database_СсылкаНАБазовыйКласс=new CREATE_DATABASE(getApplicationContext());            ////todo запрещяет поворот экрана            ЛистДляВсеСотурдникаТекущегоТабеля = null; /////////TODO КОГДА НЕТ ДАННЫ            StringBuffer БуферВсеСотурдникаТекущегоТабеля = new StringBuffer();            ХэшФИОВсеСотурдникаТекущегоТабеля = Collections.synchronizedMap(new LinkedHashMap<Integer, Long>());            ХэшЛовимUUIDIDНазваниеСтолбика = Collections.synchronizedMap(new HashMap<>());            ((Activity) КонтекстСотрудникиДляТабеля).setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);            ((Activity) КонтекстСотрудникиДляТабеля).setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LOCKED);            // Locale locale = Locale.ROOT;            Locale locale = new Locale("rus");            Locale.setDefault(locale);            config =                    getBaseContext().getResources().getConfiguration();            config.setLocale(locale);            createConfigurationContext(config);            ///TODO разное            СпинерТАбельМЕсяцФинал = (Spinner) findViewById(R.id.СпинерТабельМесяц);            СпинерТАбельДепартаментФинал = (Spinner) findViewById(R.id.СпинерТабельДепратамент);            /////TODO КОМПОНЕТЫ ТАБЕЛЯ            ///TODO главный контйренр табеля            /////TODO Скоролл Вид            ScrollViewДляВсехСотрудниковТабеля = (ScrollView) findViewById(R.id.ГлавныйКойтейнерВсеСотрудникаВТАбеле);            ///TODO на данной КНОПКЕ МЫ МОЖЕМ ДОБАВИТЬ СОТРУДНИКА К ТАБЕЛЮ ИЛИ СОЗДАТЬ НОВОГО СОТРУДНИКА            /////////Круглая Кнопка            КруглаяКнопкаСамТабель = findViewById(R.id.КруглаяКнопкаСамТабель);//////КНОПКА СОЗДАНИЕ НОВГО ТАБЕЛЯ ИЗ ИСТОРИИ ВТОРОЙ ШАГ            КнопкаЛеваяПередвиженияПоДанным = (Button) findViewById(R.id.imageViewВСамомТабелеЛеваяСтрелка);            КнопкаПраваяПередвиженияПоДанным = (Button) findViewById(R.id.imageViewВСамомТабелеТабельПраваяСтрелка);            // ОбщееКоличествоВТабелеСотудников.setText("133");            // СОЗДАНИЯ ТАБЕЛЯ СНАЧАЛА ИСТРОИЯ ПОТОМ НА БАЗЕ ЕГО СОЗЗДАНИЕ            //////todo limit offset смеещние и огорничения загрузки данных            ЛимитСоСмещениемДанных = "0";            ЛистДляВсеСотурдникаТекущегоТабеля = (ListView) findViewById(R.id.ЛистВсеСотрудникаВТАбеле);            // ОбщееКоличествоВТабелеСотудников            textView3СловоТабель = (TextView) findViewById(R.id.textView3СловоТабель);            ///TODO установка гравиити            СпинерТАбельМЕсяцФинал.setGravity(Gravity.CENTER_HORIZONTAL | Gravity.CENTER_VERTICAL);            СпинерТАбельДепартаментФинал.setGravity(Gravity.CENTER_HORIZONTAL | Gravity.CENTER_VERTICAL);            textView3СловоТабель.setGravity(Gravity.CENTER_HORIZONTAL | Gravity.CENTER_VERTICAL);            //todo кнопка назад            КнопкаНазад= findViewById(R.id.imageViewСтрелкаВнутриТабеля);            // TODO: 28.01.2022  запускам ВЕСЬ КОД АТИВТИ\            animation = AnimationUtils.loadAnimation(getApplicationContext(), R.anim.slide_in_row_tabellist);            /////            Методandler();            // TODO: 20.03.2023  биндинг            МетодБиндингМатериалы();            Log.d(this.getClass().getName(), "   МетолСозданиеТабеляФинал() закончено  ОФРМЛЕНИЯ ТАБЕЛЯ ЛИСТ" );        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    private void Методandler() {        handlerДляList_Peoples=new Handler(Looper.getMainLooper(),new Handler.Callback(){            @Override            public boolean handleMessage(@NonNull   android.os.Message msg) {                Log.d(this.getClass().getName(), " handlerДляList_Peoples msg" + msg);                Bundle bundleПриРаботеЛистаСотрудниковВТАбелях=        msg.getData();                msg.getTarget().removeMessages(msg.what);                return true;            }        });    }    @Override    protected void onStart() {        super.onStart();        try{            //TODO #1            МетодПришлиПараметрыОтДругихАктивитиДляРаботыВсехТабеля();            МетодПриНАжатииНаКнопкуBACK();            МетодСКодоКруглойКнопкойСКотройМожноЛибоСоздатьЛибоВыбратьСотрудника(КруглаяКнопкаСамТабель);            ///TODO клик ВНУТРЕНИМУ СОДЕРЖАНИ Ю LKIST VIEW C СОТРУДНИКАМИ ЧТОБЫ ПЕРЕЙТИ Н АСАМ НЕПОСТРЕДСТВЕНО ТАБЕЛЬ            МетодПриКликеПоОтдельномуСотрудникуВнутриТабеля();            МетодУдаленияСотрудникаLongClick();            МетодПолучениеДанныхИзБазыДляДляЗаполенияВсехСотрудников();        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    @Override    protected void onResume() {        super.onResume();        try {            ////            МетолСозданиеТабеляФинал();        } catch (Exception e) {            //  Block of code to handle errors            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                    + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                    Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    @Override    protected void onStop() {        super.onStop();        try{            if (serviceConnectionМатериалы!=null) {                // TODO: 30.12.2021   --ОТПИСЫВАЕМСЯ                unbindService(serviceConnectionМатериалы);            }            // TODO: 14.11.2022 запускаем синхронизацуию            МетодЗапускаСинхрониазцииЕслиБыИзмененияВбАзе();            ///////        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                    + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                    Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    // TODO: 29.03.2021 удаление сотрудника с акттивти    private void МетодУдаленияСотрудникаLongClick() {        ЛистДляВсеСотурдникаТекущегоТабеля.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {            @Override            public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {                final String[] ПолученныйUUIDДляУдаление = {null};                final String[] ПолученныйФИОДляУдаление = {null};                ((TextView) view).setBackgroundColor(Color.GRAY);                /////todo проверяем ен закрли курсор                Log.d(this.getClass().getName(), "  ХэшФИОВсеДляПосика.size() " + ХэшФИОВсеСотурдникаТекущегоТабеля.size());                Object ТекущийUUIDХЭшаСотруников = ХэшФИОВсеСотурдникаТекущегоТабеля.get(position);                Log.d(this.getClass().getName(), "   ТекущийUUIDХЭшаСотруников" +  ТекущийUUIDХЭшаСотруников);                Long UUIDСамогоТабеляВКотромМыНаходилисьLOng=(Long)  ТекущийUUIDХЭшаСотруников;                /////TODO переходим непостредствено на сотрудника которго выбрали  в активити                Log.d(this.getClass().getName(), " ТекущийUUIDХЭшаСотруников  " + ТекущийUUIDХЭшаСотруников);                ////todo                TextView ФИОДляУдаление=(TextView) view;                Log.d(this.getClass().getName(), " view" +view.getTag()+ " ФИОДляУдаление.getText() " +ФИОДляУдаление.getText() );                ПолученныйUUIDДляУдаление[0] =view.getTag().toString();                ПолученныйФИОДляУдаление[0] =ФИОДляУдаление.getText().toString();                Log.d(this.getClass().getName(), " view" +view.getTag()+ " ФИОДляУдаление.getText() " +ФИОДляУдаление.getText() );                МетодСообщенииУдалениеСотрудника( "uuid", ПолученныйUUIDДляУдаление[0], ПолученныйФИОДляУдаление[0]);                Log.d(this.getClass().getName(), " view" +view.getTag()+ " ФИОДляУдаление.getText() " +ФИОДляУдаление.getText() );                return true;            }        });    }    private void МетодПришлиПараметрыОтДругихАктивитиДляРаботыВсехТабеля() {        try{            Intent Интент_СписокТабелей =   getIntent();            МесяцТабеляФинал = Интент_СписокТабелей.getStringExtra("ПередаемСозданнуюДатуНовогоТабеля");            Log.d(this.getClass().getName(), " МесяцТабеляФинал :" + МесяцТабеляФинал);            if(МесяцТабеляФинал==null){                МесяцТабеляФинал = Интент_СписокТабелей.getStringExtra("МесяцТабеляФинал");                Log.d(this.getClass().getName(), " МесяцТабеляФинал :" + МесяцТабеляФинал);            }            ИмяТабеляФинал = Интент_СписокТабелей.getStringExtra("ПередаемСозданнуюНазваниеТабеля");            Log.d(this.getClass().getName(), " ИмяТабеляФинал :" + ИмяТабеляФинал);            ДепартаментТабеляФинал = Интент_СписокТабелей.getStringExtra("ПередаемДепартаментФинал");            Log.d(this.getClass().getName(), " ДепартаментТабеляФинал :" + ДепартаментТабеляФинал);            ПолноеИмяТабеляПослеСозданиеНовогоСотрудника = Интент_СписокТабелей.getStringExtra("ПолноеНазваниеТабеляФинал");            Log.d(this.getClass().getName(), " ПолноеИмяТабеляПослеСозданиеНовогоСотрудника " + ПолноеИмяТабеляПослеСозданиеНовогоСотрудника);            ПолноеИмяТабеляПослеСозданиеНовогоСотрудникаПослеУспешнойВставки = Интент_СписокТабелей.getStringExtra("ПолноеИмяТабеляПослеСозданиеНовогоСотрудника");            Log.d(this.getClass().getName(), " ПолноеИмяТабеляПослеСозданиеНовогоСотрудника " + ПолноеИмяТабеляПослеСозданиеНовогоСотрудникаПослеУспешнойВставки);            String ПроверкаUUIDТабеляФинал = Интент_СписокТабелей.getStringExtra("ПередаваемыйИзКнопкиПолучаемUUIDТабеля");            UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя = Интент_СписокТабелей.getStringExtra("ПередаваемыйИзКнопкиПолучаемUUIDТабеля");            Log.d(this.getClass().getName(), "UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя" + UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя);            НазваниеТабеляПослеУспешногоСозданиеСотрудника = Интент_СписокТабелей.getStringExtra("НазваниеТабеляВКоторомИНадоСоздатьНовогоСотрудника");            Log.d(this.getClass().getName(), " НазваниеТабеляПослеУспешногоСозданиеСотрудника " + НазваниеТабеляПослеУспешногоСозданиеСотрудника);            UUIDТабеляПослеУспешногоСозданиеСотрудника = Интент_СписокТабелей.getStringExtra("UUIDТабеляВКоторомИНадоСоздатьНовогоСотрудника");            Log.d(this.getClass().getName(), " UUIDТабеляФинал:" + UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя);            НазваниеТабеляПришелПослеСоздангоНового = Интент_СписокТабелей.getStringExtra("НазваниеМесяцаТабеляВКоторомИНадоСоздатьНовогоСотрудника");            Log.d(this.getClass().getName(), " НазваниеТабеляПришелПослеСоздангоНового  " + НазваниеТабеляПришелПослеСоздангоНового);            ДепартаментПришелПослеСоздангоНового = Интент_СписокТабелей.getStringExtra("ДепартаментТабеляВКоторомИНадоСоздатьНовогоСотрудника");            Log.d(this.getClass().getName(), "  ДепартаментПришелПослеСоздангоНового   " + ДепартаментПришелПослеСоздангоНового);            String  UUIDТабеляПослеПодбораУниверсальный = Интент_СписокТабелей.getStringExtra("UUIDТабеляПослеПодбораУниверсальный");            Log.d(this.getClass().getName(), "  ДепартаментПришелПослеСоздангоНового   " + UUIDТабеляПослеПодбораУниверсальный);            ДепартаментТабеляФинал = Интент_СписокТабелей.getStringExtra("ПолноеНазваниеЗагруженногТАбеляПослеПодбора");            Log.d(this.getClass().getName(), "  ДепартаментТабеляФинал  " + ДепартаментТабеляФинал);            if(МесяцТабеляФинал==null) {                МесяцТабеляФинал = Интент_СписокТабелей.getStringExtra("ПередаемСозданнуюДатуНовогоТабеля");            }            if (ДепартаментПришелПослеСоздангоНового==null) {                ДепартаментПришелПослеСоздангоНового= Интент_СписокТабелей.getStringExtra("ПередаемДепартаментФинал");            }            if (ДепартаментПришелПослеСоздангоНового==null) {                ДепартаментПришелПослеСоздангоНового= Интент_СписокТабелей.getStringExtra("ПолноеНазваниеТабеляФинал");            }            if (UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя==null) {                UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя=                        Интент_СписокТабелей.getStringExtra(("ПередаваемыйИзКнопкиПолучаемUUIDТабеля"));            }            if (ГодТабеляФинал==null) {                ГодТабеляФинал= Интент_СписокТабелей.getStringExtra("ГодТабеляФиналИзВсехСотрудниковВТАбеле");            }            if ( UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя==null){                UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя= UUIDТабеляПослеПодбораУниверсальный;            }            if (МесяцТабеляФинал==null){                МесяцТабеляФинал=НазваниеТабеляПришелПослеСоздангоНового;            }            //todo департамент            if (ДепартаментТабеляФинал==null ){                ДепартаментТабеляФинал=ДепартаментПришелПослеСоздангоНового;            }            if (ПолноеИмяТабеляПослеСозданиеНовогоСотрудника ==null){                ПолноеИмяТабеляПослеСозданиеНовогоСотрудника = ПолноеИмяТабеляПослеСозданиеНовогоСотрудникаПослеУспешнойВставки ;            }            if (ПолноеИмяТабеляПослеСозданиеНовогоСотрудника ==null){                ПолноеИмяТабеляПослеСозданиеНовогоСотрудника=    Интент_СписокТабелей.getStringExtra(("ПолноеИмяТабеляПослеСозданиеНовогоСотрудника"));            }            if (МесяцТабеляФинал==null) {                МесяцТабеляФинал = Интент_СписокТабелей.getStringExtra("МесяцТабеляПослеПодбора");                Log.d(this.getClass().getName(), "  МесяцТабеляФинал " + МесяцТабеляФинал);                ////                if (ПолноеИмяТабеляПослеСозданиеНовогоСотрудникаПослеУспешнойВставки==null) {                    ПолноеИмяТабеляПослеСозданиеНовогоСотрудникаПослеУспешнойВставки = Интент_СписокТабелей.                            getStringExtra("ПолноеНазваниеЗагруженногТАбеляПослеПодбора");                    Log.d(this.getClass().getName(), " ПолноеИмяТабеляПослеСозданиеНовогоСотрудникаПослеУспешнойВставки " + ПолноеИмяТабеляПослеСозданиеНовогоСотрудникаПослеУспешнойВставки);                }                if (ДепартаментПришелПослеСоздангоНового==null) {                    ДепартаментПришелПослеСоздангоНового = Интент_СписокТабелей.getStringExtra("ДепартаментТабеляПослеПодбора");                    Log.d(this.getClass().getName(), "  ДепартаментПришелПослеСоздангоНового   " + ДепартаментПришелПослеСоздангоНового);                }                if ( UUIDТабеляПослеУспешногоСозданиеСотрудника ==null) {                    UUIDТабеляПослеУспешногоСозданиеСотрудника = Интент_СписокТабелей.getStringExtra("UUIDТабеляПослеПодбораУниверсальный");                    Log.d(this.getClass().getName(), "  UUIDТабеляПослеУспешногоСозданиеСотрудника  " + UUIDТабеляПослеУспешногоСозданиеСотрудника);                }                if ( UUIDТабеляПослеУспешногоСозданиеСотрудника ==null) {                    UUIDТабеляПослеУспешногоСозданиеСотрудника = Интент_СписокТабелей.getStringExtra("c");                    Log.d(this.getClass().getName(), "  UUIDТабеляПослеУспешногоСозданиеСотрудника  " + UUIDТабеляПослеУспешногоСозданиеСотрудника);                }                if (ПолноеИмяТабеляПослеСозданиеНовогоСотрудника==null) {                    ПолноеИмяТабеляПослеСозданиеНовогоСотрудника= Интент_СписокТабелей.                            getStringExtra("ПолноеНазваниеЗагруженногТАбеляПослеПодбора");                    Log.d(this.getClass().getName(), " ПолноеИмяТабеляПослеСозданиеНовогоСотрудника " + ПолноеИмяТабеляПослеСозданиеНовогоСотрудника);                }                Log.d(this.getClass().getName(), "   МесяцТабеляФинал  " + МесяцТабеляФинал +                        "    ПолноеИмяТабеляПослеСозданиеНовогоСотрудникаПослеУспешнойВставки   " + ПолноеИмяТабеляПослеСозданиеНовогоСотрудникаПослеУспешнойВставки+                        "  ДепартаментПришелПослеСоздангоНового " + ДепартаментПришелПослеСоздангоНового + "  UUIDТабеляПослеУспешногоСозданиеСотрудника  "                        + UUIDТабеляПослеУспешногоСозданиеСотрудника );            }            if (ПолноеИмяТабеляПослеСозданиеНовогоСотрудника == null) {                ПолноеИмяТабеляПослеСозданиеНовогоСотрудника= Интент_СписокТабелей.getStringExtra("НазваниеТабеляВКоторомИНадоСоздатьНовогоСотрудника");            }            Log.d(this.getClass().getName(), "   ПолноеИмяТабеляПослеСозданиеНовогоСотрудника  " +ПолноеИмяТабеляПослеСозданиеНовогоСотрудника);            if (UUIDТабеляПослеУспешногоСозданиеСотрудника==null){                UUIDТабеляПослеУспешногоСозданиеСотрудника=UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя;            }            if( UUIDТабеляКнопкаBACKУниверсальный==null) {                Long UUIDТабеляКнопкаBACKУниверсальный = Интент_СписокТабелей.getLongExtra("UUIDТабеляКнопкаBACKУниверсальный", 0);                if (UUIDТабеляКнопкаBACKУниверсальный==0){                    UUIDТабеляКнопкаBACKУниверсальный = Интент_СписокТабелей.getLongExtra("UUIDТабеляПослеПодбора", 0);                    Log.d(this.getClass().getName(), "  ПолноеИмяТабеляПослеСозданиеНовогоСотрудника " +ПолноеИмяТабеляПослеСозданиеНовогоСотрудника);                }                if (UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя == null){                    UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя = String.valueOf(UUIDТабеляКнопкаBACKУниверсальный);                }                if (UUIDТабеляПослеУспешногоСозданиеСотрудника==null) {                    UUIDТабеляПослеУспешногоСозданиеСотрудника= String.valueOf(UUIDТабеляКнопкаBACKУниверсальный);                }                Log.d(this.getClass().getName(), "  UUIDТабеляКнопкаBACKУниверсальный  " + UUIDТабеляКнопкаBACKУниверсальный);            }            if(ПолноеИмяТабеляПослеСозданиеНовогоСотрудника==null){                ПолноеИмяТабеляПослеСозданиеНовогоСотрудника = Интент_СписокТабелей.getStringExtra("ДепартаментТабеляВКоторомИНадоСоздатьНовогоСотрудника");                Log.d(this.getClass().getName(), "  ПолноеИмяТабеляПослеСозданиеНовогоСотрудника " +ПолноеИмяТабеляПослеСозданиеНовогоСотрудника);            }            if(МесяцТабеляФинал==null){                МесяцТабеляФинал= Интент_СписокТабелей.getStringExtra("МесяцТабеляФинал");                Log.d(this.getClass().getName(), "  МесяцТабеляФинал " +МесяцТабеляФинал);            }            if (UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя==null){                UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя=UUIDТабеляКнопкаBACKУниверсальный;            }            if (МЕсяцДляКурсораТабелей==0) {                МЕсяцДляКурсораТабелей = МетодПолучениниеКурсораМЕсяцДата(МесяцТабеляФинал);                Log.d(this.getClass().getName(), "  МЕсяцДляКурсораТабелей " +МЕсяцДляКурсораТабелей);            }            if (ГодДляКурсораТабелей==0) {                ГодДляКурсораТабелей=МетодПолучениниеКурсораГОДДата(МесяцТабеляФинал);                Log.d(this.getClass().getName(), " ГодДляКурсораТабелей " +ГодДляКурсораТабелей);            }            if (ДепартаментТабеляФинал ==null){                ДепартаментТабеляФинал=ПолноеИмяТабеляПослеСозданиеНовогоСотрудника;                Log.d(this.getClass().getName(), "  ДепартаментТабеляФинал" +ДепартаментТабеляФинал);            }            if ( ЦифровоеИмяНовгоТабеля==0) {                ЦифровоеИмяНовгоТабеля = Интент_СписокТабелей.getIntExtra("ЦифровоеИмяНовгоТабеля", 0);                Log.d(this.getClass().getName(), "  ЦифровоеИмяНовгоТабеля " + ЦифровоеИмяНовгоТабеля);            }            if (ПолученнаяUUIDНазванияОрганизации==0l) {                ПолученнаяUUIDНазванияОрганизации = Интент_СписокТабелей.getLongExtra("ПолученнаяUUIDНазванияОрганизации",0l);                Log.d(this.getClass().getName(), "  ПолученнаяUUIDНазванияОрганизации " + ПолученнаяUUIDНазванияОрганизации);            }            if (ЦифровоеИмяНовгоТабеля==0) {                ЦифровоеИмяНовгоТабеля = Интент_СписокТабелей.getIntExtra("ЦифровоеИмяНовгоТабеляSingle",0);                Log.d(this.getClass().getName(), "  ЦифровоеИмяНовгоТабеля " + ЦифровоеИмяНовгоТабеля);            }            ПолученныйПоследнийМесяцДляСортировкиЕгоВСпиноре = Интент_СписокТабелей.getStringExtra("ПолученныйПоследнийМесяцДляСортировкиЕгоВСпиноре");            Log.d(this.getClass().getName(), "  ПолученныйПоследнийМесяцДляСортировкиЕгоВСпиноре " + ПолученныйПоследнийМесяцДляСортировкиЕгоВСпиноре);            РодительскийUUDТаблицыТабель = Интент_СписокТабелей.getLongExtra("РодительскийUUDТаблицыТабель",0l);            Log.d(this.getClass().getName(), "  РодительскийUUDТаблицыТабель " + РодительскийUUDТаблицыТабель);            if (РодительскийUUDТаблицыТабель==0){                РодительскийUUDТаблицыТабель=Long.parseLong(UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя);                Log.d(this.getClass().getName(), "  РодительскийUUDТаблицыТабель " + РодительскийUUDТаблицыТабель+                        " UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя " +UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя);            }            if (РодительскийUUDТаблицыТабель==0){                РодительскийUUDТаблицыТабель = Интент_СписокТабелей.getLongExtra("UUIDТабеляГлавыйРодительскгоТабеля",0l);                Log.d(this.getClass().getName(), "  РодительскийUUDТаблицыТабель " + РодительскийUUDТаблицыТабель+                        " UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя " +UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя);            }            Log.d(this.getClass().getName(), "  UUIDТабеляГлавыйРодительскгоТабеля " + РодительскийUUDТаблицыТабель+                    " UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя " +UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя);            if (РодительскийUUDТаблицыТабель==0){                РодительскийUUDТаблицыТабель = Интент_СписокТабелей.getLongExtra("РодительскийUUDТаблицыТабель",0l);                Log.d(this.getClass().getName(), "  РодительскийUUDТаблицыТабель " + РодительскийUUDТаблицыТабель+                        " UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя " +UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя);            }            Log.d(this.getClass().getName(), "  РодительскийUUDТаблицыТабель " + РодительскийUUDТаблицыТабель+                    " UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя " +UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя);            if(ПолученныйПоследнийМесяцДляСортировкиЕгоВСпиноре==null){                ПолученныйПоследнийМесяцДляСортировкиЕгоВСпиноре = Интент_СписокТабелей.getStringExtra("ДепартаментТабеляПослеПодбораBACK");            }            Log.d(this.getClass().getName(), "  ПолученныйПоследнийМесяцДляСортировкиЕгоВСпиноре " + ПолученныйПоследнийМесяцДляСортировкиЕгоВСпиноре);        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                    + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                    Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    ///todo круглая кнопка для вызова создание или добавления сотркдника    private void МетодСКодоКруглойКнопкойСКотройМожноЛибоСоздатьЛибоВыбратьСотрудника(FloatingActionButton круглаяКнопкаСамТабель) {        //////////////////////////////        круглаяКнопкаСамТабель.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Log.e(this.getClass().getName()," " );                //////конец второго лушателя спинера                //  Snackbar.make(v, "Here",Snackbar.LENGTH_LONG).setAction("Action",null).show();/////TODO КНОПКА КРУГЛАЯ НА АКТИВТИ В ТАБЕЛЕ ПРЕДНАЗВАНЧЕН ДЛЯ СОЗДАНИЕ НОВОГО СОТРУДНИКА ИЛИ ДОБАВЛЕНИЕ УЖЕ ДЕЙСТВУЕЩЕГО СОТРУДКА В ТАБЕЛЬ                СообщениеСозданиеДаныыхBOX("Добавление  сотрудников", true,                        UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя,                        МесяцТабеляФинал, ДепартаментТабеляФинал);                //TODO ТУТ КОД БУДЕТ ЗАПУСКАТЬСЯ СОЗДАЕНИЕ НОВОГО ИЛИ ДОБАВЛЕНИЕ ДЕЙСТВУЕЮЩЕГО СОТРУДНИКА В ТАБЕЛЬ            }        });        // TODO: 04.10.2021  ДОЛГОЕ НАЖАТЕИ НА КРУГЛУЮ КНОПКУ        круглаяКнопкаСамТабель.setOnLongClickListener(new View.OnLongClickListener() {            @Override            public boolean onLongClick(View v) {          /*      // TODO: 04.10.2021  ДОЛГОЕ НАЖАТИЕ НА КРУГД КНОПКУ                //  Snackbar.make(v, "Here",Snackbar.LENGTH_LONG).setAction("Action",null).show();                Vibrator v2 = (Vibrator) getApplicationContext().getSystemService(Context.VIBRATOR_SERVICE);                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {                    v2.vibrate(VibrationEffect.createOneShot(250, VibrationEffect.DEFAULT_AMPLITUDE));                } else {                    //deprecated in API 26                    v2.vibrate(250);                }                // TODO: 04.10.202 запуск  СИНХРОГИЗАЦИИ С КНОПКИ                Snackbar.make(v, " Запускаем обмен с данными !!! ", Snackbar.LENGTH_LONG).show();    Constraints constraintsЗапускФОновойСинхрониазциииИзНУтриТабеля= new Constraints.Builder()            .setRequiredNetworkType(NetworkType.CONNECTED)            .setRequiresCharging(false)            .setRequiresBatteryNotLow(false)            .setRequiresStorageNotLow(false)            .build();    ///    String ИмяСлужбы="WorkManagerинхрониазцацияВнутриТАбеляЛокально";    OneTimeWorkRequest OneTimeWorkЗапускФОновойСинхрониазциииИзНУтриТабеля= new OneTimeWorkRequest.Builder(MyWork_Async_Синхронизация_ТолькоДляТабеля.class)            .setConstraints(constraintsЗапускФОновойСинхрониазциииИзНУтриТабеля)            //    .setInputData(new Data.Builder().putString("КтоЗапустилWorkmanager","BroadCastRecieve").build())        //  .setInitialDelay(5,TimeUnit.SECONDS)            .addTag(ИмяСлужбы)            .build();// Queue the work    WorkManager.getInstance(getApplicationContext()).enqueueUniqueWork(ИмяСлужбы, ExistingWorkPolicy.KEEP, OneTimeWorkЗапускФОновойСинхрониазциииИзНУтриТабеля);    // WorkManager.getInstance().enqueue(periodicWorkRequest);// workmanager.enqueueUniquePeriodicWork(TAG, ExistingPeriodicWorkPolicy.KEEP, photoCheckWork)    Log.i(this.getClass().getName(), "После Запуска из  FaceApp  WorkManager СинхрониазцацияВнутриТАбеля Локально"            +new Date() + " СТАТУС WORKMANAGER-----------" +WorkManager.getInstance(getApplicationContext()).getWorkInfosByTag("WorkManager СинхрониазцацияВнутриТАбеля Локально"));*/                return true;            }        });    }    //todo метод возврата к предыдущему активти    private void МетодПриНАжатииНаКнопкуBACK() {        КнопкаНазад.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                try {                    Log.d(this.getClass().getName(), " кликнем для созданни новго сотрдника при нажатии  ");                    // TODO: 14.11.2022 запускаем синхронизацуию                   /// МетодЗапускаСинхрониазцииЕслиБыИзмененияВбАзе();                    Intent Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки = new Intent();                    Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.setClass(getApplication(), MainActivity_List_Tabels.class); // Т                    Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("ДепартаментТабеляПослеПодбора", МесяцТабеляФинал);                    Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("UUIDТабеляПослеПодбора", UUIDТабеляПослеУспешногоСозданиеСотрудника);                    Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("UUIDТабеляПослеПодбораУниверсальный",                            UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя);                    Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("МесяцТабеляПослеПодбора", МесяцТабеляФинал);                    Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("ПолноеНазваниеЗагруженногТАбеляПослеПодбора",ПолноеИмяТабеляПослеСозданиеНовогоСотрудника );                    Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("ПолученныйПоследнийМесяцДляСортировкиЕгоВСпиноре",ПолученныйПоследнийМесяцДляСортировкиЕгоВСпиноре);                    Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("UUIDТабеляКнопкаBACKУниверсальный",                            UUIDТабеляКнопкаBACKУниверсальный);                    Log.d(  this.getClass().getName(), " ПолноеНазваниеЗагруженногТАбеля" +ПолноеИмяТабеляПослеСозданиеНовогоСотрудника);                    Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("ДепартаментТабеляПослеПодбораBACK", МесяцТабеляФинал);                    Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("ГодТабеляПослеПодбора", ГодДляКурсораТабелей);                    // TODO: 20.10.2021 new Значение при движение по кругу месяц сохраняем                    Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("ПолученныйПоследнийМесяцДляСортировкиЕгоВСпиноре", ПолученныйПоследнийМесяцДляСортировкиЕгоВСпиноре);                    Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("UUIDТабеляФинал", UUIDТабеляПослеУспешногоСозданиеСотрудника);                    Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("РодительскийUUDТаблицыТабель", UUIDТабеляПослеУспешногоСозданиеСотрудника);                    Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("РодительскийUUDТаблицыТабель", РодительскийUUDТаблицыТабель);                    Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("РодительскийUUDТаблицыТабель", РодительскийUUDТаблицыТабель);                    Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("ДепартаментТабеляПослеПодбораBACK", ПолученныйПоследнийМесяцДляСортировкиЕгоВСпиноре);                    Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("ПолученныйПоследнийМесяцДляСортировкиЕгоВСпиноре",ПолученныйПоследнийМесяцДляСортировкиЕгоВСпиноре);                    Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);                    Log.d(this.getClass().getName(), " запускам метод сихронизации данных   МетодЗапускаСинхрониазцииЕслиБыИзмененияВбАзе() " );                    Bundle data=new Bundle();                    data.putBinder("binderМатериалы", binderМатериалы);                    Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtras(data);                    startActivity( Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки);                } catch (Exception e) {                    e.printStackTrace();                    ///метод запись ошибок в таблицу                    Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                            " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                    new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                            Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());                }            }        });    }    void МетодЗапускаСинхрониазцииЕслиБыИзмененияВбАзе() {        PUBLIC_CONTENT      cachedThreadPoolВизуальнаяСинхронизацияМенеджер=new PUBLIC_CONTENT(getApplicationContext());        Integer РезультатЗапускВизуальнойСинхронизации =0;        try{            CopyOnWriteArrayList<String> ЗаполненыеСистемныеТаблицыДЛяСинхронизации = new Class__Generation_Genetal_Tables(getApplicationContext()).                    МетодЗаполеннияТаблицДЛяРаботыиСинхрониазции();            Log.d(this.getClass().getName(), "  ЗаполненыеСистемныеТаблицыДЛяСинхронизации " + ЗаполненыеСистемныеТаблицыДЛяСинхронизации.size());            ЗаполненыеСистемныеТаблицыДЛяСинхронизации.forEach((ТАблицаДЛяСинхрониазциисТабеля)->{                Log.d(this.getClass().getName(), "ТАблицаДЛяСинхрониазциисТабеля "  + ТАблицаДЛяСинхрониазциисТабеля);                if (ТАблицаДЛяСинхрониазциисТабеля.equals("tabel") ||                        ТАблицаДЛяСинхрониазциисТабеля.equals("data_tabels")){                    Boolean ПроверкаБылиИзмененияВБазе =                            new Class_Search_Changes_Data(getApplicationContext()).                                    МетодВычислемБылиИзменениВДанныхВДанныхПоДатам(ТАблицаДЛяСинхрониазциисТабеля);                    Log.d(this.getClass().getName(), "ПроверкаБылиИзмененияВБазе "  + ПроверкаБылиИзмененияВБазе);                    // TODO: 18.10.2021                    if (ПроверкаБылиИзмененияВБазе ==true) {                        // TODO: 01.02.2022 заПУСКАЕМ сИНХРОНИАЗАЦИЮ С ВСЕХ ЛИСТ ТАБЕЛЕЙ                        Integer  ПубличныйIDДляФрагмента=   new Class_Generations_PUBLIC_CURRENT_ID().ПолучениеПубличногоТекущегоПользователяID(getApplicationContext());                        Bundle bundleДляПЕредачи=new Bundle();                        bundleДляПЕредачи.putInt("IDПубличныйНеМойАСкемБылаПереписака", ПубличныйIDДляФрагмента);                        Intent  intentЗапускОднорworkanager=new Intent();                        intentЗапускОднорworkanager.putExtras(bundleДляПЕредачи);                        // TODO: 02.08.2022                        new Class_Generator_One_WORK_MANAGER(getApplicationContext()).                                МетодОдноразовыйЗапускВоерМенеджера(getApplicationContext(),intentЗапускОднорworkanager);                        // TODO: 26.06.2022                        Log.d(this.getClass().getName(),"\n" + " class " + Thread.currentThread().getStackTrace()[2].getClassName() + "\n" +                                " metod " + Thread.currentThread().getStackTrace()[2].getMethodName() + "\n" +                                " line " + Thread.currentThread().getStackTrace()[2].getLineNumber() + "\n"                                + " ПубличныйIDДляОдноразовойСинхронПубличныйIDДляФрагментаиазции "+ПубличныйIDДляФрагмента );                    } }            });            Log.d(this.getClass().getName(), " РезультатЗапускВизуальнойСинхронизации  СЛУЖБА запуск визуальной синхрониациии"                    + РезультатЗапускВизуальнойСинхронизации);        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                    + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                    Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    //todo метод получаем даные для загружки ихв listview    private void МетодПолучениеДанныхИзБазыДляДляЗаполенияВсехСотрудников() throws ExecutionException, InterruptedException {        //todo        Курсор_ВсеСотрудникиТабеля = null;        try {            String УниверсальноеИмяТабеля = null;            try {                УниверсальноеИмяТабеля = МетодПредварительногоПолучениеДанных();                ////////                Log.d(this.getClass().getName(), "Запущен.... метод  onCreate в классе MainActivity_Settings  ;  УниверсальноеИмяТабеля "+УниверсальноеИмяТабеля);                //поймать ошибку всего классаIOException | MyException e    NumberFormatException            } catch (Exception e) {                e.printStackTrace();                ///метод запись ошибок в таблицу                Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                        " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                        Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());            }          /*  ReentrantLock reentrantLock=new ReentrantLock();            reentrantLock.lock();            reentrantLock.newCondition().await(50, TimeUnit.MILLISECONDS);*/////TODO end test            if (УниверсальноеИмяТабеля.length() > 0 && МЕсяцДляКурсораТабелей > 0 && ГодДляКурсораТабелей > 0                    && ЦифровоеИмяНовгоТабеля>0) {                ////TODO ЗАГРУЗКА НА АКТИВИТИ НЕ СОТРУДСТВЕННО СОТРУДНИКОВ                String finalУниверсальноеИмяТабеля = УниверсальноеИмяТабеля;                ///////final  String ЦифровоеИмяТабеля = PUBLIC_CONTENT.ЦифровоеИмяНовгоТабеля;                //////TODO НЕПОСРЕДСТЕННО ЗАГРУЗКА СОТРУДНИКОВ ВСЕХ В КОНКРЕТНЫЙ ТАБЕЛЬ             /*   Курсор_ВсеСотрудникиТабеля = new Class_MODEL_synchronized(КонтекстСотрудникиДляТабеля).                        МетодЗагружаетСотрудниковListViewТабеляПриВозвратеИЗШаблона(КонтекстСотрудникиДляТабеля,                                String.valueOf(ЦифровоеИмяНовгоТабеля),МЕсяцДляКурсораТабелей,ГодДляКурсораТабелей);                Курсор_ДляЗагрузкиСотрудниковНепостредственновИзШаблона = new Class_MODEL_synchronized(контекстLIstView).КурсорУниверсальныйДляБазыДанных("viewtabel",                        new String[]{"*"},//     new String[]{"name,id,uuid,BirthDate,snils},                        "status_send!=?  AND cfo=? AND fio !=?  AND month_tabels=? AND  year_tabels =?  AND fio IS NOT NULL AND name IS NOT NULL",//  nametabel_typename  AND nametabel IS NOT NULL",//AND status_send IS NULL//"Удаленная" //AND status_send!=?" /AND status_send IS NULL AND  name IS NOT NULL AND fio IS NOT NULL                        new String[]{"Удаленная", String.valueOf(ЦифровоеИмяНовгоТабеля), "", String.valueOf(месяцДляПермещенияПоТабелю), String.valueOf(годДляПермещенияПоТабелю)},                        "name", null, "name", null);*/                //TODO Получение данных новый движок                Class_GRUD_SQL_Operations class_grud_sql_operationsДанныхИзБазыДляДляЗаполенияВсехСотрудников;                class_grud_sql_operationsДанныхИзБазыДляДляЗаполенияВсехСотрудников=new Class_GRUD_SQL_Operations(getApplicationContext());                // TODO: 26.08.2021 НОВЫЙ ВЫЗОВ НОВОГО КЛАСС GRUD - ОПЕРАЦИИ                ///                class_grud_sql_operationsДанныхИзБазыДляДляЗаполенияВсехСотрудников.                        concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("НазваниеОбрабоатываемойТаблицы","viewtabel");//data_tabels                ///////                class_grud_sql_operationsДанныхИзБазыДляДляЗаполенияВсехСотрудников. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("СтолбцыОбработки","*");                //                class_grud_sql_operationsДанныхИзБазыДляДляЗаполенияВсехСотрудников.                        concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ФорматПосика","status_send!=?" +                                "  AND cfo=?   AND month_tabels=? AND  year_tabels =?    AND fio IS NOT NULL  ");                ///"_id > ?   AND _id< ?"                //////                class_grud_sql_operationsДанныхИзБазыДляДляЗаполенияВсехСотрудников. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска1","Удаленная");                ///                class_grud_sql_operationsДанныхИзБазыДляДляЗаполенияВсехСотрудников. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска2",ЦифровоеИмяНовгоТабеля);                ///                class_grud_sql_operationsДанныхИзБазыДляДляЗаполенияВсехСотрудников. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска3",МЕсяцДляКурсораТабелей);                //...                /////                class_grud_sql_operationsДанныхИзБазыДляДляЗаполенияВсехСотрудников. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска4",ГодДляКурсораТабелей);////УсловиеПоискаv4,........УсловиеПоискаv5 .......                /////                /// class_grud_sql_operationsДанныхИзБазыДляДляЗаполенияВсехСотрудников. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска5","");////УсловиеПоискаv4,........УсловиеПоискаv5 .......                /////                ///class_grud_sql_operationsДанныхИзБазыДляДляЗаполенияВсехСотрудников. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска5",ГодДляКурсораТабелей);////УсловиеПоискаv4,........УсловиеПоискаv5 .......                ////TODO другие поля                //class_grud_sql_operationsДанныхИзБазыДляДляЗаполенияВсехСотрудников. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ПоляГрупировки", "cfo");                ////                //class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеГрупировки",null);                ////                class_grud_sql_operationsДанныхИзБазыДляДляЗаполенияВсехСотрудников. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеСортировки","uuid");//date_update                ////                /// class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеЛимита",null);                ////                // TODO: 27.08.2021  ПОЛУЧЕНИЕ ДАННЫХ ОТ КЛАССА GRUD-ОПЕРАЦИИ                // TODO: 12.10.2021  Ссылка Менеджер Потоков                PUBLIC_CONTENT  Class_Engine_SQLГдеНаходитьсяМенеджерПотоков =new PUBLIC_CONTENT (getApplicationContext());                ///TODO ПОТОК загрузки данных в Активти в LISTVIEW                Курсор_ВсеСотрудникиТабеля = null;                ////////////////////////////////////////////                Курсор_ВсеСотрудникиТабеля= (SQLiteCursor) class_grud_sql_operationsДанныхИзБазыДляДляЗаполенияВсехСотрудников.                        new GetData(getApplicationContext()).getdata(class_grud_sql_operationsДанныхИзБазыДляДляЗаполенияВсехСотрудников.                                concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций,                        Class_Engine_SQLГдеНаходитьсяМенеджерПотоков.МенеджерПотоков,Create_Database_СсылкаНАБазовыйКласс.getССылкаНаСозданнуюБазу());                /////                Log.d(this.getClass().getName(), "GetData "+Курсор_ВсеСотрудникиТабеля  );                ///////////                     /*   Курсор_ВсеСотрудникиТабеля = new Class_MODEL_synchronized(КонтекстСотрудникиДляТабеля).                                МетодЗагружаетСотрудниковListViewТабеля(IDЧьиДанныеДляСотрудников,                                        ПолученнаяUUIDНазванияОрганизации,                                        finalУниверсальноеИмяТабеля,КонтекстСотрудникиДляТабеля,МЕсяцДляКурсораТабелей,ГодДляКурсораТабелей,                                        ЦифровоеИмяТабеля );*/                if (Курсор_ВсеСотрудникиТабеля.getCount()>0) {                    Log.d(this.getClass().getName(), "   Курсор_ВсеСотрудникиТабеля.getCount() "+Курсор_ВсеСотрудникиТабеля.getCount());                }                /////                ////TODO когд когда нет прав для текущего пользоватлея или нет данных            } else if (МесяцТабеляФинал != null && ЦифровоеИмяНовгоТабеля > 0) {///////TODO данные загружаються проходят от ШАБЛОНОВ                Log.d(this.getClass().getName(), " МесяцТабеляФинал " + МесяцТабеляФинал + " ЦифровоеИмяНовгоТабеля " + ЦифровоеИмяНовгоТабеля);                final String ЦифровоеИмяТабеля = String.valueOf(ЦифровоеИмяНовгоТабеля);                //////TODO НЕПОСРЕДСТЕННО ЗАГРУЗКА СОТРУДНИКОВ ВСЕХ В КОНКРЕТНЫЙ ТАБЕЛЬ    /*            Курсор_ВсеСотрудникиТабеля = new Class_MODEL_synchronized(КонтекстСотрудникиДляТабеля).                        МетодЗагружаетСотрудниковListViewТабеляПриВозвратеИЗШаблона(КонтекстСотрудникиДляТабеля,                                String.valueOf(ЦифровоеИмяНовгоТабеля), МЕсяцДляКурсораТабелей,ГодДляКурсораТабелей);                ///////////*/                       /* Курсор_ВсеСотрудникиТабеля = new Class_MODEL_synchronized(КонтекстСотрудникиДляТабеля).                                МетодЗагружаетСотрудниковListViewТабеляПриВозвратеИЗШаблона(IDЧьиДанныеДляСотрудников,КонтекстСотрудникиДляТабеля,                                        ЦифровоеИмяТабеля, Math.toIntExact(ПолученнаяUUIDНазванияОрганизации));*/                //TODO Получение данных новый движок                Class_GRUD_SQL_Operations class_grud_sql_operationsЦифровоеИмяТабеля;                class_grud_sql_operationsЦифровоеИмяТабеля=new Class_GRUD_SQL_Operations(getApplicationContext());                // TODO: 26.08.2021 НОВЫЙ ВЫЗОВ НОВОГО КЛАСС GRUD - ОПЕРАЦИИ                ///                class_grud_sql_operationsЦифровоеИмяТабеля. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("НазваниеОбрабоатываемойТаблицы","viewtabel");//data_tabels                ///////                class_grud_sql_operationsЦифровоеИмяТабеля. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("СтолбцыОбработки","*");                //                class_grud_sql_operationsЦифровоеИмяТабеля. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ФорматПосика","status_send!=?  " +                        "AND cfo=? AND fio !=?  AND month_tabels=? AND  year_tabels =?  AND fio IS NOT NULL AND name IS NOT NULL ");                ///"_id > ?   AND _id< ?"                //////                class_grud_sql_operationsЦифровоеИмяТабеля. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска1","Удаленная");                ///                class_grud_sql_operationsЦифровоеИмяТабеля. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска2",ЦифровоеИмяНовгоТабеля);                ///                class_grud_sql_operationsЦифровоеИмяТабеля. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска3","");                //...                /////                class_grud_sql_operationsЦифровоеИмяТабеля. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска4",МЕсяцДляКурсораТабелей);////УсловиеПоискаv4,........УсловиеПоискаv5 .......                /////                class_grud_sql_operationsЦифровоеИмяТабеля. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска5",ГодДляКурсораТабелей);////УсловиеПоискаv4,........УсловиеПоискаv5 .......                ////TODO другие поля                //////class_grud_sql_operationsЦифровоеИмяТабеля. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ПоляГрупировки", "name");                ////                //class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеГрупировки",null);                ////                class_grud_sql_operationsЦифровоеИмяТабеля. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеСортировки","uuid");///date_update                ////                /// class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеЛимита",null);                ////                // TODO: 27.08.2021  ПОЛУЧЕНИЕ ДАННЫХ ОТ КЛАССА GRUD-ОПЕРАЦИИ                Курсор_ВсеСотрудникиТабеля = null;                ////////                // TODO: 12.10.2021  Ссылка Менеджер Потоков                PUBLIC_CONTENT  Class_Engine_SQLГдеНаходитьсяМенеджерПотоков =new PUBLIC_CONTENT (getApplicationContext());                Курсор_ВсеСотрудникиТабеля= (SQLiteCursor)  class_grud_sql_operationsЦифровоеИмяТабеля.                        new GetData(getApplicationContext()).getdata(class_grud_sql_operationsЦифровоеИмяТабеля. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций,                        Class_Engine_SQLГдеНаходитьсяМенеджерПотоков.МенеджерПотоков,Create_Database_СсылкаНАБазовыйКласс.getССылкаНаСозданнуюБазу());                //////                Log.d(this.getClass().getName(), "GetData "  +Курсор_ВсеСотрудникиТабеля);                Log.d(this.getClass().getName(), " Курсор_ВсеСотрудникиТабеля.getCount()  " + Курсор_ВсеСотрудникиТабеля.getCount());                /////                ////TODO когда данных нет вообщее и на прямую и не через шадбон            } else {                //todo                if (ПолученнаяUUIDНазванияОрганизации == 0) {///                    ///////////todo                    МетодКогдаДАнныхНетИЛИОшибкаИлиНетПрав();                    /////TODO КОД ВЫПОЛЯЕТЬСЯ КОГДА ПО УКАЗАНОМУ ТАБЕЛЮ НЕ СМОСТРДУНИКРОВ                    //  Toast.makeText(getApplicationContext(), "Не выбрана организация (в настройках выберети ОРГАНИЗАЦИЮ и зайтите еще раз)", Toast.LENGTH_LONG).show();                }            }            ///////TODO после получение данных из курсора//todo НАЧИНАЕМ ЗАГРУЗКУ САМИХ СОТРУДНИКОВ В ТЕКУЩИЙ ТАБЕЛЬ            ////todo проверяем куроср            if (Курсор_ВсеСотрудникиТабеля.getCount() > 0) {                ///                Log.d(this.getClass().getName(), " Курсор_ВсеСотрудникиТабеля.getCount()  " + Курсор_ВсеСотрудникиТабеля.getCount());                ////                Log.d(this.getClass().getName(), " Курсор_ВсеСотрудникиТабеля.getCount()  "                        + Курсор_ВсеСотрудникиТабеля.getCount());                Курсор_ВсеСотрудникиТабеля.moveToFirst();                int КоличествроСтрочек = Курсор_ВсеСотрудникиТабеля.getCount();                /////// //TODO инизалицируем ЛИНКЛИСТ  табеля                //TODO МЕТОД ЗАПОЛЕНИЯ ДАННЫМИ ПОИСКА ТАБЕЛЯ*/                МетодЗаполненияАктивтиДаннымиИзБазыДляПосикаПоФИО(Курсор_ВсеСотрудникиТабеля);                /////todo                /////TODO КОД ВЫПОЛЯЕТЬСЯ КОГДА ПО УКАЗАНОМУ ТАБЕЛЮ НЕ СМОСТРДУНИКРОВ            } else {                МетодКогдаДАнныхНетИЛИОшибкаИлиНетПрав();            }// TODO: 30.01.2022 ДОБАВЛЯЕМ УСЛУШАТЕЛЬКУРСОРА НА АКТИВТИ СОТРУДНИКИ  Курсор_ВсеСотрудникиТабеля            МетодКодомРЕгистарцииОбозревателяКурсора();            ////            Log.d(this.getClass().getName(), " Курсор_ВсеСотрудникиТабеля.getCount()  "                    + Курсор_ВсеСотрудникиТабеля.getCount());            //поймать ошибку всего классаIOException | MyException e    NumberFormatException        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    private void МетодКодомРЕгистарцииОбозревателяКурсора() {        try{            if(Курсор_ВсеСотрудникиТабеля.getCount()>0) {                ////                Log.d(this.getClass().getName(), " Курсор_ВсеСотрудникиТабеля.getCount()  " + Курсор_ВсеСотрудникиТабеля.getCount());                // TODO: 31.01.2022                DataSetObserver   dataSetObserver= new DataSetObserver() {                    @Override                    public void onChanged() {                        super.onChanged();                        // TODO: 23.12.2021                        Log.w(this.getClass().getName(), " СРАБОТАЛ registerDataSetObserver  --- фрагменты ПИСАТЬ ЧИТАТЬ ЧАТ КурсорДанныеДлязаписиичтнияЧата.registerDataSetObserver onChanged ");                        if (АдаптерДЛяЛистаСотрудниковАктивти != null) {                            АдаптерДЛяЛистаСотрудниковАктивти.changeCursor(Курсор_ВсеСотрудникиТабеля);                            АдаптерДЛяЛистаСотрудниковАктивти.notifyDataSetChanged();                        }                        if (ЛистДляВсеСотурдникаТекущегоТабеля != null) {                            ЛистДляВсеСотурдникаТекущегоТабеля.forceLayout();                            ЛистДляВсеСотурдникаТекущегоТабеля.deferNotifyDataSetChanged();                        }                        Log.w(this.getClass().getName(), " СРАБОТАЛ registerDataSetObserver  --- фрагменты ПИСАТЬ ЧИТАТЬ ЧАТ КурсорДанныеДлязаписиичтнияЧата.registerDataSetObserver");                    }                };                try {                    Курсор_ВсеСотрудникиТабеля.unregisterDataSetObserver(dataSetObserver );                } catch (Exception e) {                    //  e.printStackTrace();                }                Курсор_ВсеСотрудникиТабеля.registerDataSetObserver(dataSetObserver );            }            //поймать ошибку всего классаIOException | MyException e    NumberFormatException        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    @NotNull    private String МетодПредварительногоПолучениеДанных() throws InterruptedException, ExecutionException, TimeoutException {        //////todo если пустой то без like        String УниверсальноеИмяТабеля= "";        if (ПолноеИмяТабеляПослеСозданиеНовогоСотрудника!=null) {            if (ПолноеИмяТабеляПослеСозданиеНовогоСотрудника!=null) {                УниверсальноеИмяТабеля=ПолноеИмяТабеляПослеСозданиеНовогоСотрудника;            }        }else if (ПолноеИмяТабеляПослеСозданиеНовогоСотрудникаПослеУспешнойВставки!=null) {            if (ПолноеИмяТабеляПослеСозданиеНовогоСотрудникаПослеУспешнойВставки!=null) {                УниверсальноеИмяТабеля=    ПолноеИмяТабеляПослеСозданиеНовогоСотрудникаПослеУспешнойВставки;            }        }        Log.d(this.getClass().getName(), " УниверсальноеИмяТабеля " +УниверсальноеИмяТабеля );        ///todo для загрузки контктного сотркдника текущего вытсиква е публичный ид        // IDЧьиДанныеДляСотрудников=Integer.parseInt(PUBLIC_CONTENT.ПубличноеIDПолученныйИзСервлетаДляUUID);////TODO test        return УниверсальноеИмяТабеля;    }    private void МетодКогдаДАнныхНетИЛИОшибкаИлиНетПрав() {        try{            ЛистАдаптерДляListViewВсеСотрудникиВТабеле =null;            //TODO увелисиваем размер арайоиста            StringBuffer     БуферВсеСотурдникаТекущегоТабеля=new StringBuffer();            БуферВсеСотурдникаТекущегоТабеля.append(" *В табеле нет сотрудников*");            ArrayList     АрайЛИстВсеСотурдникаТекущегоТабеля=new ArrayList();            АрайЛИстВсеСотурдникаТекущегоТабеля.add(БуферВсеСотурдникаТекущегоТабеля.toString());            // TODO: 29.04.2021 обнулем буфер            БуферВсеСотурдникаТекущегоТабеля.setLength(0);            ЛистАдаптерДляListViewВсеСотрудникиВТабеле = new ArrayAdapter<String>(this, R.layout.list_item_all_customer_tabel_color_red,                    АрайЛИстВсеСотурдникаТекущегоТабеля);//ХэшФИОВсеДляПосика // АрайЛИстФИОВсеДляПосика // simple_list_item_checked //simple_list_item_multiple_choice            /////////            ((Activity) КонтекстСотрудникиДляТабеля).runOnUiThread(new Runnable() {                @Override                public void run() {                    /////////TODO ЗАПОЛЕНИЕ                    ////TODO SET УСТАНОВКА ДАНЫХ В АДАПТЕР                    ЛистДляВсеСотурдникаТекущегоТабеля.setAdapter(ЛистАдаптерДляListViewВсеСотрудникиВТабеле);                }            });            ЛистДляВсеСотурдникаТекущегоТабеля.setBackgroundResource(R.drawable.textlines_tabel_row_color_green_mini);            // ЛистДляВсеСотурдникаТекущегоТабеля.setBackground(getApplication().getResources().getDrawable(R.drawable.textlines_tabel_row_color_green_mini));            ЛистДляВсеСотурдникаТекущегоТабеля.deferNotifyDataSetChanged();            ЛистДляВсеСотурдникаТекущегоТабеля.forceLayout();            ЛистДляВсеСотурдникаТекущегоТабеля.requestLayout();            ScrollViewДляВсехСотрудниковТабеля.requestLayout();            try{                try {                    ScrollViewДляВсехСотрудниковТабеля.removeAllViews();                    ScrollViewДляВсехСотрудниковТабеля.removeAllViewsInLayout();                    ScrollViewДляВсехСотрудниковТабеля.removeView(ЛистДляВсеСотурдникаТекущегоТабеля);                    ScrollViewДляВсехСотрудниковТабеля.removeViewInLayout(ScrollViewДляВсехСотрудниковТабеля);                } catch (Exception e) {                    //  e.printStackTrace();                }                ///todo метод работает внутти listview                try {                    ScrollViewДляВсехСотрудниковТабеля.addView(ЛистДляВсеСотурдникаТекущегоТабеля);                } catch (Exception e) {                    // e.printStackTrace();                }                ScrollViewДляВсехСотрудниковТабеля.forceLayout();            } catch (Exception e) {                e.printStackTrace();                ///метод запись ошибок в таблицу//                Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +//                        " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                        Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());            }        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    //todo метод не ПОСТРЕДТСВЕНО АПОЛЯНЕТ LISTVIEW ДАНЫМИ    private void МетодЗаполненияАктивтиДаннымиИзБазыДляПосикаПоФИО(SQLiteCursor Курсор_ДляЗагрузкиСотрудников) {        try {            if (Курсор_ДляЗагрузкиСотрудников.getCount() > 0) {                Курсор_ДляЗагрузкиСотрудников.moveToFirst();            }            try {                ЛистДляВсеСотурдникаТекущегоТабеля.removeAllViews();                ЛистДляВсеСотурдникаТекущегоТабеля.removeAllViewsInLayout();            } catch (Exception e) {                //e.printStackTrace();            }            ХэшФИОВсеСотурдникаТекущегоТабеля.clear();            ////todo циклы заполения            final int[] ИндексСтрокКомпонентовТабеляВизуализацииПрогрессБара = {1};            final Integer[] ИндексСтрокКомпонентовТабеля = {0};            final int[] ИндексДляsetID = {1};            // create the adapter using the cursor pointing to the desired data            // as well as the layout informatio            // TODO: 26.08.2021 НОВЫЙ ВЫЗОВ НОВОГО КЛАСС GRUD - ОПЕРАЦИИ            Class_GRUD_SQL_Operations class_grud_sql_operationsПолучаемНаБазуUUIDфиоПолучаемИзТаблицыФИОИМЯ= new Class_GRUD_SQL_Operations(getApplicationContext());            // TODO: 12.10.2021  Ссылка Менеджер Потоков            PUBLIC_CONTENT  Class_Engine_SQLГдеНаходитьсяМенеджерПотоков =new PUBLIC_CONTENT (getApplicationContext());            Class_GRUD_SQL_Operations class_grud_sql_operationsПолучаемНаБазуДляРасчетаЧасовЧеловка= new Class_GRUD_SQL_Operations(getApplicationContext());            АдаптерДЛяЛистаСотрудниковАктивти =null;            АдаптерДЛяЛистаСотрудниковАктивти = new SimpleCursorAdapter(getApplicationContext(), R.layout.list_item_all_customer_tabel,                    Курсор_ДляЗагрузкиСотрудников, new String[]{"fio"}, new int[]{android.R.id.text1}, CursorAdapter.FLAG_REGISTER_CONTENT_OBSERVER);  ///name            SimpleCursorAdapter.ViewBinder binding = new SimpleCursorAdapter.ViewBinder() {                @Override                public boolean setViewValue(View view, Cursor cursor, int columnIndex) {                    try{                        int ИндекcКорневогоСтолбца = cursor.getColumnIndex("fio");                        if (ИндекcКорневогоСтолбца == columnIndex) {                            int ГдеUUID=cursor.getColumnIndex("uuid");                            // TODO: 29.04.2021                            Long ПолученныйUUID=0l;                            /////////////////                            ПолученныйUUID = cursor.getLong(ГдеUUID);                            Log.d(  this.getClass().getName(), " метод посика уже существующего сотрудника в базе андройжа ПолученныйUUID[0] "                                    +ПолученныйUUID);                            // view.setTag(String.valueOf(ПолученныйUUID));                            // TODO: 29.04.2021 Вписываем UUID для конкретного сотрудника                            if (ПолученныйUUID >0) {                                // TODO: 29.04.2021 ПрисваемваемКАЖДОМУ СОТРУДНИКУ ID                                ((TextView) view).setTag(String.valueOf(ПолученныйUUID));                                ///                                Log.d(  this.getClass().getName(), "передаем данные uuid в другую активти "                                        +"uuid"+ПолученныйUUID);                                // TODO: 30.01.2022   ОФРМЛЕНИЕ                                ((TextView) view).setBackgroundResource(R.drawable.textlines_tabel);                                ((TextView) view).startAnimation(animation);                                // TODO: 30.01.2022  офрмления на цетр маркеруем                                ((TextView) view).setGravity(Gravity.CENTER_HORIZONTAL | Gravity.CENTER_VERTICAL);                            }                            ////TODO ДДАНЫЕ ИЗ БАЗЫ САМИ ФИО                            String ПолученыеФИО = null;                            int ГдеФИО=cursor.getColumnIndex("fio");//name                            Long    ПолученыеUUIDдляФИО = cursor.getLong(ГдеФИО);                            Log.d(  this.getClass().getName(), "ПолученыеФИО "                                    +"uuid"+ПолученыеФИО);                            class_grud_sql_operationsПолучаемНаБазуUUIDфиоПолучаемИзТаблицыФИОИМЯ. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("СамFreeSQLКОд",                                    " SELECT name  FROM fio  WHERE  uuid = '" + ПолученыеUUIDдляФИО + "' ;");                            SQLiteCursor            Курсор_ПолучаемИмяСотрудникаИзТаблицыФИО=null;                            Курсор_ПолучаемИмяСотрудникаИзТаблицыФИО= (SQLiteCursor) class_grud_sql_operationsПолучаемНаБазуUUIDфиоПолучаемИзТаблицыФИОИМЯ.                                    new GetаFreeData(getApplicationContext()).getfreedata(class_grud_sql_operationsПолучаемНаБазуUUIDфиоПолучаемИзТаблицыФИОИМЯ.                                            concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций,                                    Class_Engine_SQLГдеНаходитьсяМенеджерПотоков.МенеджерПотоков,Create_Database_СсылкаНАБазовыйКласс.getССылкаНаСозданнуюБазу());                            Log.d(this.getClass().getName(), "Курсор_ПолучаемИмяСотрудникаИзТаблицыФИО "  +Курсор_ПолучаемИмяСотрудникаИзТаблицыФИО);                            if(Курсор_ПолучаемИмяСотрудникаИзТаблицыФИО.getCount()>0){                                Курсор_ПолучаемИмяСотрудникаИзТаблицыФИО.moveToFirst();                                ПолученыеФИО=Курсор_ПолучаемИмяСотрудникаИзТаблицыФИО.getString(0);                                Log.d(  this.getClass().getName(), "ПолученыеФИО "                                        +"uuid"+ПолученыеФИО);                            }                            Курсор_ПолучаемИмяСотрудникаИзТаблицыФИО.close();                            if (ПолученныйUUID >0 && ПолученыеФИО!=null) {                                ((TextView) view).setText(ПолученыеФИО);                                Log.d(  this.getClass().getName(), "ПолученыеФИО "                                        +"uuid"+ПолученыеФИО);                            }else {                                if( cursor.getCount()<=1){                                    ПолученыеФИО="Нет сотрудника/ов";                                    ((TextView)view).setTextColor(Color.RED);                                    Log.d(this.getClass().getName(), " ПолученыеФИО " + ПолученыеФИО+  "  cursor.getCount() " +cursor.getCount());                                }                            }                            ПолученыеКоличествоСторочек = cursor.getCount();                            int ГдеТекущаяСтрочка=cursor.getColumnIndex("cfo");///                int ГдеТекущаяСтрочка=cursor.getColumnIndex("nametabel_typename");                            int ТекущаяСтрочкаИзБазы= cursor.getInt(ГдеТекущаяСтрочка);                            int ГдеСтатусПроведения=cursor.getColumnIndex("status_carried_out");                            Boolean ПолученныйСтатусПроведенныйТаьельИлиНЕт = Boolean.parseBoolean(cursor.getString(ГдеСтатусПроведения));     //      String ПолученыеСНИЛС = cursor.getString(3);                            String ПолученыеСуммаЧасовСотрудника = "0";                            ПолученыеСуммаЧасовСотрудника = МетодДосчётаЧасовПоВсемТабелямДляНовыхиВыбранныхСотрудников(ПолученныйUUID,                                    КонтекстСотрудникиДляТабеля,class_grud_sql_operationsПолучаемНаБазуДляРасчетаЧасовЧеловка);                            Log.d(  getApplicationContext().getClass().getName(), " ПолученыеСуммаЧасовСотрудникаУ" + ПолученыеСуммаЧасовСотрудника + ПолученныйUUID+ " ПолученныйUUID ");                            if (ПолученыеСуммаЧасовСотрудника==null) {                                ПолученыеСуммаЧасовСотрудника="0";                            }                            //TODO добвлем галочку                            Drawable icon = null;                            Log.d(this.getClass().getName(), " ПолученныйСтатусПроведенныйТаьельИлиНЕт "+ПолученныйСтатусПроведенныйТаьельИлиНЕт);                            if (ПолученныйСтатусПроведенныйТаьельИлиНЕт==true) {                                icon = getResources().getDrawable(R.mipmap.icon_dsu1_tabel_emloes_error);                                if(ФлагУжеСообщалиЧтоСообщениеЧТоТАбельПроведетБыло==false) {                                    ФлагУжеСообщалиЧтоСообщениеЧТоТАбельПроведетБыло=true;                                }                            }else{                                icon = getResources().getDrawable(R.mipmap.icon_dsu1_emloeys_sonrudnik2);                            }                            icon.setBounds(5, 0, 80, 80);                            ((TextView) view).setCompoundDrawables(icon, null, null, null);                            Log.d(this.getClass().getName(), "  ПолученныйUUID[0] " +ПолученныйUUID);                            if ( ПолученныйUUID>0 && ПолученыеФИО!=null) {                                ХэшФИОВсеСотурдникаТекущегоТабеля.put(ИндексСтрокКомпонентовТабеля[0], ПолученныйUUID);                                ИндексСтрокКомпонентовТабеля[0]++;                                Log.d(this.getClass().getName(), "  ХэшФИОВсеДляПосика.size() " + ХэшФИОВсеСотурдникаТекущегоТабеля.size());                                StringBuffer            БуферВсеСотурдникаТекущегоТабеля=new StringBuffer();                                БуферВсеСотурдникаТекущегоТабеля.append("  ").append(ПолученыеФИО.trim() + " - " + "(" + ПолученыеСуммаЧасовСотрудника + ")");                                Log.d(this.getClass().getName(), "  АрайЛИстВсеСотурдникаТекущегоТабеля.size() " + БуферВсеСотурдникаТекущегоТабеля.length());                                //TODO само ЗАПОЛЕНЕНИЕ ДАННЫМИ АКТИВТИ НАПИЧА ФИО И ПЛЮС ЧАСЫ                                if (БуферВсеСотурдникаТекущегоТабеля.length()>0) {                                    ((TextView) view).setText(БуферВсеСотурдникаТекущегоТабеля.toString());                                    Log.d(this.getClass().getName(), "  Добавили Сотрдуника SimpleCu " + БуферВсеСотурдникаТекущегоТабеля.toString()                                            + "  ИндексСтрокКомпонентовТабеля[0] " + ИндексСтрокКомпонентовТабеля[0]);                                } else {                                    Log.d(this.getClass().getName(), "  Добавили Сотрдуника SimpleCu " + БуферВсеСотурдникаТекущегоТабеля.toString()                                            + "  ИндексСтрокКомпонентовТабеля[0] " + ИндексСтрокКомпонентовТабеля[0]);                                }                                БуферВсеСотурдникаТекущегоТабеля.setLength(0);                            }else{                                Log.e(this.getClass().getName(), "view.getId() " + view.getId());                            }                            return true;                        } else {                            Log.e(this.getClass().getName(), "view.getId() " + view.getId());                        }                    } catch (Exception e) {                        e.printStackTrace();                        Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                                " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                        new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                                Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());                    }                    return false;                }            };            // TODO: 26.03.2021 присваиваем simpleadapter вид наших данных            АдаптерДЛяЛистаСотрудниковАктивти.setViewBinder(binding);            ЛистДляВсеСотурдникаТекущегоТабеля.setAdapter(АдаптерДЛяЛистаСотрудниковАктивти);            ScrollViewДляВсехСотрудниковТабеля.fullScroll(View.FOCUS_DOWN);            Log.d(this.getClass().getName(), "  ХэшФИОВсеДляПосика.size() " + ХэшФИОВсеСотурдникаТекущегоТабеля.size() +                    "  ХэшФИОВсеСотурдникаТекущегоТабеля.toString() " + ХэшФИОВсеСотурдникаТекущегоТабеля.toString());        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    //////////////////////    void МетодПриКликеПоОтдельномуСотрудникуВнутриТабеля() {        try{            final Long[] UUIDСамогоТабеляВКотромМыНаходилисьLOng = {0l};            final int[] setIDСамогоТабеляВКотромМыНаходились = {0};            ЛистДляВсеСотурдникаТекущегоТабеля.setOnItemClickListener(new AdapterView.OnItemClickListener() {                @Override                public void onItemClick(AdapterView<?> parent, View view, int position, long id) {                    Log.d(this.getClass().getName(), "  ХэшФИОВсеДляПосика.size() " + ХэшФИОВсеСотурдникаТекущегоТабеля.size() + " position "+position + " id "+id);                    if (ХэшФИОВсеСотурдникаТекущегоТабеля.size()>0) {                        //    Object ТекущийUUIDХЭшаСотруников = ХэшФИОВсеСотурдникаТекущегоТабеля.get(position);                        ((TextView) view).setBackgroundColor(Color.GRAY);                        Object ТекущийUUIDХЭшаСотруниковОбьект = ((TextView) view).getTag();                        Log.d(this.getClass().getName(), " ТекущийUUIDХЭшаСотруников" + ТекущийUUIDХЭшаСотруниковОбьект.toString());                        Long  ТекущийUUIDХЭшаСотруников= null;                        if (ТекущийUUIDХЭшаСотруниковОбьект!=null) {                            ТекущийUUIDХЭшаСотруников = Long.parseLong((String) ТекущийUUIDХЭшаСотруниковОбьект);                        }                        if (ТекущийUUIDХЭшаСотруников>0) {                            Log.d(this.getClass().getName(), " ТекущийUUIDХЭшаСотруников" + ТекущийUUIDХЭшаСотруников.toString());                            Log.d(this.getClass().getName(), "   ТекущийUUIDХЭшаСотруников" +  ТекущийUUIDХЭшаСотруников);                            UUIDСамогоТабеляВКотромМыНаходилисьLOng[0] = Long.parseLong(ТекущийUUIDХЭшаСотруников.toString());                            if (ТекущийUUIDХЭшаСотруников!=null) {                                if(UUIDСамогоТабеляВКотромМыНаходилисьLOng[0] ==0){                                    UUIDСамогоТабеляВКотромМыНаходилисьLOng[0] = Long.valueOf(view.getTag().toString());                                }                                setIDСамогоТабеляВКотромМыНаходились[0] = position+1;                                Log.d(this.getClass().getName(), " ТекущийUUIDХЭшаСотруников  "                                        + ТекущийUUIDХЭшаСотруников+"  UUIDСамогоТабеляВКотромМыНаходилисьLOng " + UUIDСамогоТабеляВКотромМыНаходилисьLOng[0]+                                        "      setIDСамогоТабеляВКотромМыНаходились[0] " +    setIDСамогоТабеляВКотромМыНаходились[0]);                                if(UUIDСамогоТабеляВКотромМыНаходилисьLOng[0] >0 && setIDСамогоТабеляВКотромМыНаходились[0]>0){                                    Intent Интент_ЗапускСозданиеНовогоСотрудника = new Intent();                                    Интент_ЗапускСозданиеНовогоСотрудника.setClass(getApplicationContext(), MainActivity_Tabel_Single_People.class); //  ТЕСТ КОД КОТОРЫЙ ЗАПУСКАЕТ ACTIVITY VIEWDATA  ПРОВЕРИТЬ ОБМЕН                                    Интент_ЗапускСозданиеНовогоСотрудника.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);                                    Log.d(this.getClass().getName(), " ДепартаментТабеляФинал  " + ДепартаментТабеляФинал+                                            " UUIDСамогоТабеляВКотромМыНаходилисьLOng " + UUIDСамогоТабеляВКотромМыНаходилисьLOng[0] +                                            " МесяцТабеляФинал " +МесяцТабеляФинал+                                            " IDЧьиДанныеДляСотрудников "+IDЧьиДанныеДляСотрудников+ " ГодТабеляФинал " + ГодТабеляФинал);                                    Интент_ЗапускСозданиеНовогоСотрудника.putExtra("ДепартаментТабеляИзВсехСотрудниковВТАбеле", ДепартаментТабеляФинал);                                    Интент_ЗапускСозданиеНовогоСотрудника.putExtra("UUIDТабеляФиналПослеВыбораИзВсехСотрудниковВТАбеле", UUIDСамогоТабеляВКотромМыНаходилисьLOng[0]);                                    Long РодительскийUUIDКоторыйДолженПроходитьЧерезВсеАктивти=UUIDСамогоТабеляВКотромМыНаходилисьLOng[0];                                    Интент_ЗапускСозданиеНовогоСотрудника.putExtra("РодительскийUUDТаблицыТабель", РодительскийUUIDКоторыйДолженПроходитьЧерезВсеАктивти);                                    if (РодительскийUUIDКоторыйДолженПроходитьЧерезВсеАктивти==0) {                                        Интент_ЗапускСозданиеНовогоСотрудника.putExtra("РодительскийUUDТаблицыТабель", РодительскийUUDТаблицыТабель);                                    }                                    Интент_ЗапускСозданиеНовогоСотрудника.putExtra("МесяцТабеляФиналИзВсехСотрудниковВТАбеле", МесяцТабеляФинал);                                    Интент_ЗапускСозданиеНовогоСотрудника.putExtra("МЕсяцДляКурсораТабелей", МЕсяцДляКурсораТабелей);                                    Интент_ЗапускСозданиеНовогоСотрудника.putExtra("UUIDТабеляПослеПодбораУниверсальный",UUIDСамогоТабеляВКотромМыНаходилисьLOng[0]);                                    Интент_ЗапускСозданиеНовогоСотрудника.putExtra("IDЧьиДанныеДляСотрудников",IDЧьиДанныеДляСотрудников);                                    Интент_ЗапускСозданиеНовогоСотрудника.putExtra("ГодДляЗагрузкиТабелей", ГодТабеляФинал);                                    Интент_ЗапускСозданиеНовогоСотрудника.putExtra("ЦифровоеИмяНовгоТабеля", ЦифровоеИмяНовгоТабеля);                                    Интент_ЗапускСозданиеНовогоСотрудника.putExtra("ЦифровоеИмяНовгоТабеля", ЦифровоеИмяНовгоТабеля);                                    Интент_ЗапускСозданиеНовогоСотрудника.putExtra("ПолноеНазваниеТабеляФинал", ПолноеИмяТабеляПослеСозданиеНовогоСотрудника);                                    Интент_ЗапускСозданиеНовогоСотрудника.putExtra("setIDСамогоТабеляВКотромМыНаходились", setIDСамогоТабеляВКотромМыНаходились[0]);                                    // TODO: 05.05.2021  получаем первоночальний ндификатор для началп работы                                    Интент_ЗапускСозданиеНовогоСотрудника.putExtra("ИндификаторПередвиженияПоТабелюСвайпы", 0);                                    Интент_ЗапускСозданиеНовогоСотрудника.putExtra("ФлагУжеСообщалиЧтоСообщениеЧТоТАбельПроведетБыло", ФлагУжеСообщалиЧтоСообщениеЧТоТАбельПроведетБыло);                                    // TODO: 20.10.2021 new Значение при движение по кругу месяц сохраняем                                    Интент_ЗапускСозданиеНовогоСотрудника.putExtra("ПолученныйПоследнийМесяцДляСортировкиЕгоВСпиноре", ПолученныйПоследнийМесяцДляСортировкиЕгоВСпиноре);                                    Интент_ЗапускСозданиеНовогоСотрудника.putExtra("РодительскийUUDТаблицыТабель", РодительскийUUDТаблицыТабель);                                    Интент_ЗапускСозданиеНовогоСотрудника.putExtra("ПолученныйПоследнийМесяцДляСортировкиЕгоВСпиноре",ПолученныйПоследнийМесяцДляСортировкиЕгоВСпиноре);                                    Интент_ЗапускСозданиеНовогоСотрудника.putExtra("ПолученныйПоследнийМесяцДляСортировкиЕгоВСпиноре",ПолученныйПоследнийМесяцДляСортировкиЕгоВСпиноре);                                    Log.d(this.getClass().getName(),    "  РодительскийUUDТаблицыТабель " + РодительскийUUDТаблицыТабель);                                    Bundle data=new Bundle();                                    data.putBinder("binderМатериалы", binderМатериалы);                                    Интент_ЗапускСозданиеНовогоСотрудника.putExtras(data);                                    startActivity(Интент_ЗапускСозданиеНовогоСотрудника);                                    Log.d(this.getClass().getName(), "  ФИНАЛ создание нового сотрудника ");                                }else {                                    Log.e(this.getClass().getName(), " БуферВсеСотурдникаТекущегоТабеля.toString()");                                }                            } else {                                Log.e(this.getClass().getName(), "НЕТ НЕ ОДНОГО СОТРУДНИКА ВТАБЛЕ ТЕКУЩЕМ БуферВсеСотурдникаТекущегоТабеля.toString() ТекущийUUIDХЭшаСотруников ");                            }                        }else{                            Log.e(this.getClass().getName(), "  нет UUID у текущаго сотрудника ТекущийUUIDХЭшаСотруников ошибка позиция" +position+                                    "ХэшФИОВсеДляПосика.size() " + ХэшФИОВсеСотурдникаТекущегоТабеля.size());                        }                    } else {                        Log.d(this.getClass().getName(), "  нет не одного сотрдууника в тебеле ХэшФИОВсеДляПосика.size() " + ХэшФИОВсеСотурдникаТекущегоТабеля.size() + " position "+position + " id "+id);                    }                }            });        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                    + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),                    this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                    Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    /////todo метод заполения аралилта и хэшмема    private void МетодЗаполенияАрайЛистаИХэшМэпаДляПосикаПоФИО(String ПолученыеФИО,                                                               long ПолученныйUUID,String ПолученыеДатаРождения,                                                               String ПолученыеСНИЛС,String ПолученыеСуммаЧасовСотрудника) {        try{            /////TODO НЕ ПОСТРДВСТВЕНО ЗАПОЛЯНЕМ LISTVIEW  ДАННЫМИ  плюс ЧАСЫ СОТРУДНИКА СУММА            ////TODO САМО ОТОБРАЖЕНИЯ НАЗВАНИЕ ТАБЕЛЕЙ            StringBuffer        БуферВсеСотурдникаТекущегоТабеля=new StringBuffer();            БуферВсеСотурдникаТекущегоТабеля.append(ПолученыеФИО +" - "+"("  +ПолученыеСуммаЧасовСотрудника + ")");            ///            Log.d(this.getClass().getName(), "  БуферВсеСотурдникаТекущегоТабеля .size() " + БуферВсеСотурдникаТекущегоТабеля.length());            /////            // TODO: 29.04.2021 clear buffer            ///   БуферВсеСотурдникаТекущегоТабеля.setLength(0);        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    /////////////////////TODO ЗАПОЛЕНИЯ ХАШМАПА    //TODO хдесь мы запускаем метод создание и обработка самого табеля    private void МетолСозданиеТабеляФинал() {        try {///            ПолученыеКоличествоСторочек=0;            int  ПолученыеКоличествоСторочек= 0;            if ( Курсор_ВсеСотрудникиТабеля!=null) {                //////                if (Курсор_ВсеСотрудникиТабеля.getCount()>0) {                    /////                    ПолученыеКоличествоСторочек = Курсор_ВсеСотрудникиТабеля.getCount();                }            }            Log.d(this.getClass().getName(), "  Курсор_ВсеСотрудникиТабеля.getCount(); "                    + Курсор_ВсеСотрудникиТабеля.getCount()+" ПолученыеКоличествоСторочек"+ПолученыеКоличествоСторочек);            ////////todo заполняем спинер первый дата табеля            МассивДляВыбораСпинераДаты.clear();            ////////TODO ПОКАЗЫВАЕМ КОЛИЧЕСТВО СОТРУДНИКОВ В ТАБЕЛЕ ШТ.            МассивДляВыбораСпинераДаты.add(МесяцТабеляФинал+"\n"+                    "   ("+ ПолученыеКоличествоСторочек+")");            Log.d(this.getClass().getName(), " МассивДляВыбораВСпинерТабельФинал " + МассивДляВыбораСпинераДаты.toString());            // Создаем адаптер ArrayAdapter с помощью массива строк и стандартной разметки элемета spinner            /////            ArrayAdapter<String> АдаптерДляСпинераТабельФинал = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_activated_1, МассивДляВыбораСпинераДаты);            // Определяем разметку для использования при выборе элемента            АдаптерДляСпинераТабельФинал.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);            // Применяем адаптер к элементу spinner            СпинерТАбельМЕсяцФинал.setAdapter(АдаптерДляСпинераТабельФинал);            ////TODO вненшний вид табеля            СпинерТАбельМЕсяцФинал.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {                @Override                public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {                    try {                        if (СпинерТАбельМЕсяцФинал!=null ) {                            // TODO: 28.01.2022                            Log.d(this.getClass().getName(), " parent.getItemAtPosition(0) " + parent.getItemAtPosition(0)+                                    "view  "+view.getTag()+ "  id " +id );                            if (СпинерТАбельМЕсяцФинал.getCount()>0) {                                for (int i = 0; i < СпинерТАбельМЕсяцФинал.getCount(); i++) {                                    ((TextView) parent.getChildAt(0)).setTypeface(Typeface.SANS_SERIF,Typeface.BOLD);//Typeface boldTypeface = Typeface.defaultFromStyle(Typeface.BOLD);                                    ((TextView) parent.getChildAt(0)).setTextColor(Color.BLACK);                                    ((TextView) parent.getChildAt(0)).setPaintFlags( ((TextView) parent.getChildAt(0)).getPaintFlags() | Paint.FAKE_BOLD_TEXT_FLAG);                                    ((TextView) parent.getChildAt(0)).setBackgroundResource(R.drawable.textlines_tabel);                                    ((TextView) parent.getChildAt(0)).setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);                                    ((TextView) parent.getChildAt(0)).setTextSize(TypedValue.COMPLEX_UNIT_DIP, 12);                                    КонтентСпинераНаАктивтиТабель = String.valueOf(((TextView) parent.getChildAt(0)).getText()); /////ОПРЕДЕЛЯЕМ ТЕКУЩЕЕ ЗНАЧЕНИЕ ВНУТИРИ СПЕНИРА                                    Log.d(this.getClass().getName(), " КонтентСпинераНаАктивтиТабель  " + КонтентСпинераНаАктивтиТабель);                                }}}                        Log.d(this.getClass().getName(), " КонтентСпинераНаАктивтиТабель " +КонтентСпинераНаАктивтиТабель );                    } catch (Exception e) {                        e.printStackTrace();                        ///метод запись ошибок в таблицу                        Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                                " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                        new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                                Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());                    }                }                @Override                public void onNothingSelected(AdapterView<?> parent) {                    Log.d(this.getClass().getName(), " ПолученноеЗначениеИзСпинераДата  ");                }            });            ////////todo заполняем спинер второй  департамент табеля            МассивДляВыбораВСпинерДепартамент.clear();            МассивДляВыбораВСпинерДепартамент.add(ПолноеИмяТабеляПослеСозданиеНовогоСотрудника);            Log.d(this.getClass().getName(), " МассивДляВыбораВСпинерТабельФинал " + МассивДляВыбораВСпинерДепартамент.toString());            ArrayAdapter<String> АдаптерДляСпинераТабельФиналДепартамент =                    new ArrayAdapter<String>(this, R.layout.simple_for_create_new_assintionmaterila_spinner_main, МассивДляВыбораВСпинерДепартамент);            АдаптерДляСпинераТабельФинал.setDropDownViewResource(R.layout.simple_for_create_new_assintionmaterila_spinner);            СпинерТАбельДепартаментФинал.setAdapter(АдаптерДляСпинераТабельФиналДепартамент);            СпинерТАбельДепартаментФинал.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {                @Override                public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {                    try {                        if (СпинерТАбельДепартаментФинал.getCount()>0) {                            for (int i = 0; i < СпинерТАбельДепартаментФинал.getCount(); i++) {                                ((TextView) parent.getChildAt(0)).setTypeface(Typeface.SANS_SERIF,Typeface.BOLD);                                ((TextView) parent.getChildAt(0)).setPaintFlags( ((TextView) parent.getChildAt(0)).getPaintFlags() | Paint.FAKE_BOLD_TEXT_FLAG);                                ((TextView) parent.getChildAt(0)).setTextColor(Color.BLACK);                                ((TextView) parent.getChildAt(0)).setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL );                                ((TextView) parent.getChildAt(0)).setTextSize(TypedValue.COMPLEX_UNIT_DIP, 12);                                КонтентСпинераНаАктивтиТабель = String.valueOf(((TextView) parent.getChildAt(0)).getText()); /////ОПРЕДЕЛЯЕМ ТЕКУЩЕЕ ЗНАЧЕНИЕ ВНУТИРИ СПЕНИРА                                Log.d(this.getClass().getName(), " КонтентСпинераНаАктивтиТабель  " + КонтентСпинераНаАктивтиТабель);                            }                        }                        Log.d(this.getClass().getName(), " КонтентСпинераНаАктивтиТабель  " + КонтентСпинераНаАктивтиТабель);                    } catch (Exception e) {                        e.printStackTrace();                        ///метод запись ошибок в таблицу                        Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                                " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                        new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                                Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());                    }                }                @Override                public void onNothingSelected(AdapterView<?> parent) {                    Log.e(this.getClass().getName(), " ПолученноеЗначениеИзСпинераДата  ");                }            });        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    ///////    public void СообщениеСозданиеДаныыхBOX(String ШабкаДиалога, boolean Флаг, String UUIDТабеляФинал ,                                           String МесяцТабеляФинал, String ДепартаментТабеляФинал ) {//  ////MESSAGEBOX ДЛЯ ИНТЕРНЕТА  ПОДКЛЮЧЕНИЕ не успешное нет связи с итрнтнето и/или файлом json        try{            int ЦветЗначек;            String ТекстПродолжениеОбновление;            CheckedTextView КнопкаДобавлениеИзШАБЛОНА,КнопкаДобавлениеИзПрошлогоМесяца,КнопкаНовыйСотрудник,КнопкаВыбратьИзУжеСозданныхСотрудников,КнопкаВыход;            ConstraintLayout constraintLayoutВозможностьДобавитьЧтевертуюКнопку=(ConstraintLayout) getLayoutInflater().inflate(R.layout.chetirek_nopkistyle,null);            ////            final AlertDialog DialogBox = new MaterialAlertDialogBuilder(this)                    .setTitle(ШабкаДиалога)                    .setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {                        @Override                        public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {                            Log.d(this.getClass().getName(), "  Кнопка закрыть");                        }                        @Override                        public void onNothingSelected(AdapterView<?> parent) {                            Log.d(this.getClass().getName(), "  Кнопка закрыть");                        }                    })                    .setIcon(R.drawable.icon_dsu1_new_customer2)                    .setView(constraintLayoutВозможностьДобавитьЧтевертуюКнопку)                    .show();            ///TODO кнеопки обработки создать сотрудника или его потобрать            КнопкаВыбратьИзУжеСозданныхСотрудников=DialogBox.findViewById(R.id.textView6YcheGotobCustomers);            КнопкаВыбратьИзУжеСозданныхСотрудников.setPadding(0,0,60,0);            КнопкаВыбратьИзУжеСозданныхСотрудников.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    try{                        Log.d(this.getClass().getName(), "  Кнопка закрыть");                        КнопкаВыбратьИзУжеСозданныхСотрудников.toggle();                        handlerДляList_Peoples.postDelayed(()->{                            DialogBox.dismiss();                            Log.d(this.getClass().getName(), " " );                            Intent Интент_ЗапускПодобратьУжеСуществующегоСотрудника = new Intent();                            Интент_ЗапускПодобратьУжеСуществующегоСотрудника.setClass(getApplicationContext(), MainActivity_Find_Customers.class);                            Интент_ЗапускПодобратьУжеСуществующегоСотрудника.putExtra("ДепартаментТабеляФинал", ПолноеИмяТабеляПослеСозданиеНовогоСотрудника);                            Log.d(this.getClass().getName(), " ДепартаментТабеляФинал " + ДепартаментТабеляФинал+   " РодительскийUUDТаблицыТабель " +РодительскийUUDТаблицыТабель);                            //////////todo разница если новый сотрудник и ранее созданный                            if (РодительскийUUDТаблицыТабель>0){                                Интент_ЗапускПодобратьУжеСуществующегоСотрудника.putExtra("UUIDТабеляФинал", РодительскийUUDТаблицыТабель);                                Интент_ЗапускПодобратьУжеСуществующегоСотрудника.putExtra("РодительскийUUDТаблицыТабель", РодительскийUUDТаблицыТабель);                                Log.d(this.getClass().getName(), "UUIDТабеляФинал" + UUIDТабеляФинал);                            }else if (UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя!=null){                                Интент_ЗапускПодобратьУжеСуществующегоСотрудника.putExtra("UUIDТабеляФинал", UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя);                                Log.d(this.getClass().getName(), " UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя "                                        + UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя);                            }else{                                Интент_ЗапускПодобратьУжеСуществующегоСотрудника.putExtra("UUIDТабеляФинал", UUIDТабеляПослеУспешногоСозданиеСотрудника);                                Log.d(this.getClass().getName(), "UUIDТабеляПослеУспешногоСозданиеСотрудника" + UUIDТабеляПослеУспешногоСозданиеСотрудника);                            }                            Интент_ЗапускПодобратьУжеСуществующегоСотрудника.putExtra("МесяцТабеляФинал", МесяцТабеляФинал);                            Log.d(this.getClass().getName(), "МесяцТабеляФинал" + МесяцТабеляФинал);                            Интент_ЗапускПодобратьУжеСуществующегоСотрудника.putExtra("ДепартаментТабеляВКоторомИНадоСоздатьНовогоСотрудника", НазваниеЗагруженногТАбеля);                            Log.d(this.getClass().getName(), "  НазваниеЗагруженногТАбеля  " + НазваниеЗагруженногТАбеля);                            Интент_ЗапускПодобратьУжеСуществующегоСотрудника.putExtra("МЕсяцДляКурсораТабелей", МЕсяцДляКурсораТабелей);                            Log.d(this.getClass().getName(), "  МЕсяцДляКурсораТабелей  " + МЕсяцДляКурсораТабелей);                            Интент_ЗапускПодобратьУжеСуществующегоСотрудника.putExtra("ГодДляКурсораТабелей", ГодДляКурсораТабелей);                            Log.d(this.getClass().getName(), "ГодДляКурсораТабелей " + ГодДляКурсораТабелей);                            Интент_ЗапускПодобратьУжеСуществующегоСотрудника.putExtra("РодительскийUUDТаблицыТабель", UUIDТабеляПослеУспешногоСозданиеСотрудника);                            Интент_ЗапускПодобратьУжеСуществующегоСотрудника.putExtra("ЦифровоеИмяНовгоТабеля", ЦифровоеИмяНовгоТабеля);                            Bundle data=new Bundle();                            data.putBinder("binderМатериалы", binderМатериалы);                            Интент_ЗапускПодобратьУжеСуществующегоСотрудника.putExtras(data);                            startActivity(Интент_ЗапускПодобратьУжеСуществующегоСотрудника);                        },1000);                    } catch (Exception e) {                        e.printStackTrace();                        ///метод запись ошибок в таблицу                        Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                                + Thread.currentThread().getStackTrace()[2].getLineNumber());                        new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                                Thread.currentThread().getStackTrace()[2].getLineNumber());                    }}            });/////TODO КНОПКА СОЗДАНИЯ НОВОГО СОТРУДКНИКА            КнопкаНовыйСотрудник=DialogBox.findViewById(R.id.textView1NewCustomers);            КнопкаНовыйСотрудник.setPadding(0,0,60,0);            КнопкаНовыйСотрудник.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    Log.d(this.getClass().getName(), "  Кнопка добавить нового ");                    try{                        КнопкаНовыйСотрудник.toggle();                        handlerДляList_Peoples.postDelayed(()->{                            DialogBox.dismiss();                            Intent Интент_ЗапускСозданиеНовогоСотрудника= new Intent();                            Интент_ЗапускСозданиеНовогоСотрудника.setClass(getApplicationContext(), MainActivity_New_Cusomers.class); //  ТЕСТ КОД КОТОРЫЙ ЗАПУСКАЕТ ACTIVITY VIEWDATA  ПРОВЕРИТЬ ОБМЕН                            Интент_ЗапускСозданиеНовогоСотрудника.putExtra("ДепартаментТабеляФинал", ПолноеИмяТабеляПослеСозданиеНовогоСотрудника);                            Интент_ЗапускСозданиеНовогоСотрудника.putExtra("ПолноеИмяТабеляПослеСозданиеНовогоСотрудника", ПолноеИмяТабеляПослеСозданиеНовогоСотрудника);                            Log.d(this.getClass().getName(), " ДепартаментТабеляФинал " + ДепартаментТабеляФинал);                            Интент_ЗапускСозданиеНовогоСотрудника.putExtra("UUIDТабеляФинал", UUIDТабеляФинал);                            Log.d(this.getClass().getName(), "UUIDТабеляФинал" + UUIDТабеляФинал);                            Интент_ЗапускСозданиеНовогоСотрудника.putExtra("МесяцТабеляФинал", МесяцТабеляФинал);                            Log.d(this.getClass().getName(), "МесяцТабеляФинал" + МесяцТабеляФинал);                            Интент_ЗапускСозданиеНовогоСотрудника.putExtra("ДепартаментТабеляВКоторомИНадоСоздатьНовогоСотрудника", ПолноеИмяТабеляПослеСозданиеНовогоСотрудника);                            Log.d(this.getClass().getName(), "  НазваниеЗагруженногТАбеля  " + НазваниеЗагруженногТАбеля);                            Интент_ЗапускСозданиеНовогоСотрудника.putExtra("UUIDТабеляПослеУспешногоСозданиеСотрудника", UUIDТабеляПослеУспешногоСозданиеСотрудника);                            Log.d(this.getClass().getName(), "  UUIDТабеляПослеУспешногоСозданиеСотрудника " + UUIDТабеляПослеУспешногоСозданиеСотрудника);                            Интент_ЗапускСозданиеНовогоСотрудника.putExtra("ЦифровоеИмяНовгоТабеля",ЦифровоеИмяНовгоТабеля);                            Log.d(this.getClass().getName(), "  ЦифровоеИмяНовгоТабеля " + ЦифровоеИмяНовгоТабеля+                                    "UUIDТабеляПослеУспешногоСозданиеСотрудника " +UUIDТабеляПослеУспешногоСозданиеСотрудника +                                    "РодительскийUUDТаблицыТабель  "  +РодительскийUUDТаблицыТабель);                            if (UUIDТабеляПослеУспешногоСозданиеСотрудника!=null) {                                Интент_ЗапускСозданиеНовогоСотрудника.putExtra("ГлавныйУниверсальныйUUIDУжеСозданогоТабелявКоторвыйИНУжноВставитьСотрудника",UUIDТабеляПослеУспешногоСозданиеСотрудника);                            }                            if (РодительскийUUDТаблицыТабель>0) {                                Интент_ЗапускСозданиеНовогоСотрудника.putExtra("РодительскийUUDТаблицыТабель",РодительскийUUDТаблицыТабель);                            }                            ////todo запускаем активти                            Bundle data=new Bundle();                            data.putBinder("binderМатериалы", binderМатериалы);                            Интент_ЗапускСозданиеНовогоСотрудника.putExtras(data);                            startActivity(Интент_ЗапускСозданиеНовогоСотрудника);                        },1000);                    } catch (Exception e) {                        e.printStackTrace();                        ///метод запись ошибок в таблицу                        Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                                + Thread.currentThread().getStackTrace()[2].getLineNumber());                        new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                                Thread.currentThread().getStackTrace()[2].getLineNumber());                    }}            });///////////////////////////TODO ЧЕТВЕРТАЯ КНОПКА            КнопкаДобавлениеИзШАБЛОНА=DialogBox.findViewById(R.id.textViewFromISCHABLONA);            КнопкаДобавлениеИзШАБЛОНА.setPadding(0,0,60,0);            КнопкаДобавлениеИзШАБЛОНА.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    try{                        Log.d(this.getClass().getName(), "  Кнопка добавить уже сущетсвующего сотрудника ");                        КнопкаДобавлениеИзШАБЛОНА.toggle();                        handlerДляList_Peoples.postDelayed(()->{                            DialogBox.dismiss();                            Log.d(this.getClass().getName(), " Переход на  Шаблоны");                            Intent Интент_ЗапускИзСозданогоШаблона = new Intent();                            Интент_ЗапускИзСозданогоШаблона.setClass(getApplication(), MainActivity_New_Templates.class); //  ТЕСТ КОД КОТОРЫЙ ЗАПУСКАЕТ ACTIVITY VIEWDATA  ПРОВЕРИТЬ ОБМЕН                            Интент_ЗапускИзСозданогоШаблона.putExtra("ДепартаментТабеляФинал", ДепартаментТабеляФинал);                            Log.d(this.getClass().getName(), "ДепартаментТабеляФинал " + ДепартаментТабеляФинал);                            Интент_ЗапускИзСозданогоШаблона.putExtra("UUIDТабеляФинал", UUIDТабеляФинал);                            Log.d(this.getClass().getName(), "UUIDТабеляФинал" + UUIDТабеляФинал);                            Интент_ЗапускИзСозданогоШаблона.putExtra("РодительскийUUDТаблицыТабель", UUIDТабеляФинал);                            Log.d(this.getClass().getName(), "UUIDТабеляФинал" + UUIDТабеляФинал);                            Интент_ЗапускИзСозданогоШаблона.putExtra("МесяцТабеляФинал", МесяцТабеляФинал);                            Log.d(this.getClass().getName(), "МесяцТабеляФинал" + МесяцТабеляФинал);                            Интент_ЗапускИзСозданогоШаблона.putExtra("ПолноеИмяТабеляПослеСозданиеНовогоСотрудника", ПолноеИмяТабеляПослеСозданиеНовогоСотрудника);                            Log.d(this.getClass().getName(), "НазваниеЗагруженногТАбеля  " + НазваниеЗагруженногТАбеля);                            Интент_ЗапускИзСозданогоШаблона.putExtra("UUIDТабеляПослеУспешногоСозданиеСотрудника", UUIDТабеляПослеУспешногоСозданиеСотрудника);                            Log.d(this.getClass().getName(), "  UUIDТабеляПослеУспешногоСозданиеСотрудника " + UUIDТабеляПослеУспешногоСозданиеСотрудника);                            Интент_ЗапускИзСозданогоШаблона.putExtra("ЦифровоеИмяНовгоТабеля",  ЦифровоеИмяНовгоТабеля);                            Log.d(this.getClass().getName(), "ЦифровоеИмяНовгоТабеля  " +ЦифровоеИмяНовгоТабеля);                            Интент_ЗапускИзСозданогоШаблона.putExtra("ПолученнаяUUIDНазванияОрганизации",  ПолученнаяUUIDНазванияОрганизации);                            Log.d(this.getClass().getName(), "ПолученнаяUUIDНазванияОрганизации  " +ПолученнаяUUIDНазванияОрганизации);                            Интент_ЗапускИзСозданогоШаблона.putExtra("UUIDТабеляФинал", UUIDТабеляПослеУспешногоСозданиеСотрудника);                            Log.d(this.getClass().getName(), "РодительскийUUDТаблицыТабель  " +РодительскийUUDТаблицыТабель);                            Интент_ЗапускИзСозданогоШаблона.putExtra("РодительскийUUDТаблицыТабель", РодительскийUUDТаблицыТабель);                            ////todo запускаем активти                            Bundle data=new Bundle();                            data.putBinder("binderМатериалы", binderМатериалы);                            Интент_ЗапускИзСозданогоШаблона.putExtras(data);                            startActivity( Интент_ЗапускИзСозданогоШаблона);                        },1000);                    } catch (Exception e) {                        e.printStackTrace();                        Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                                " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                        new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                                Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());                    }                }            });///////////////////////////TODO ПЯТАЯ КНОПКА            КнопкаДобавлениеИзПрошлогоМесяца=DialogBox.findViewById(R.id.textView3SapolnitFrrombackmezaz);            КнопкаДобавлениеИзПрошлогоМесяца.setPadding(0,0,60,0);            КнопкаДобавлениеИзПрошлогоМесяца.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    try{                        КнопкаДобавлениеИзПрошлогоМесяца.toggle();                        // TODO: 21.09.2022                        handlerДляList_Peoples.post(()->{                            BroadcastReceiver    broadcastReceiverИзПрошлыхМесяцев=        МетодИзПроглогоМесяцаСотрудникик(v);                            while (broadcastReceiverИзПрошлыхМесяцев==null) {                                broadcastReceiverИзПрошлыхМесяцев=        МетодИзПроглогоМесяцаСотрудникик(v);                                Log.d(this.getClass().getName(), "  broadcastReceiverИзПрошлыхМесяцев "+broadcastReceiverИзПрошлыхМесяцев);                            }                        });                            DialogBox.dismiss();                            progressDialog= new ProgressDialog(activity);                            progressDialog.setIndeterminate(true);                            progressDialog.setTitle("Заполнение табеля");                            progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);                            progressDialog.setCanceledOnTouchOutside(false);                            progressDialog.setCancelable(false);                        if(!         progressDialog.isShowing()){                            progressDialog.show();                        }                        progressDialog.setMessage("Из прошлого месяца...");                            handlerДляList_Peoples.post(()->{                                Log.d(this.getClass().getName(), "  Кнопка добавить уже сущетсвующего сотрудника ");                                Intent intentЗаполенияТАбеляСотрудникиИзПрошлогоМЕсяца=new Intent();                                intentЗаполенияТАбеляСотрудникиИзПрошлогоМЕсяца.setAction("ЗапускЗаполенеияИзПрошлыхМесяцев");                                intentЗаполенияТАбеляСотрудникиИзПрошлогоМЕсяца.setClass(getApplicationContext(), Service_For_Public.class);                                Bundle bundle=new Bundle();                                bundle.putLong("UUIDРОДИТЕЛЬСКАЯУжеСозданогоТАбеля",РодительскийUUDТаблицыТабель);                                bundle.putInt("СФО",ЦифровоеИмяНовгоТабеля);                                bundle.putString("ДепартаментТабеляПослеПодбораBACK",ПолученныйПоследнийМесяцДляСортировкиЕгоВСпиноре);                                intentЗаполенияТАбеляСотрудникиИзПрошлогоМЕсяца.putExtras(bundle);                                startService(intentЗаполенияТАбеляСотрудникиИзПрошлогоМЕсяца);                                Log.d(this.getClass().getName(), "  Кнопка добавить уже сущетсвующего сотрудника ");                            });                    } catch (Exception e) {                        e.printStackTrace();                        Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                                " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                        new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                                Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());                    }                }                // TODO: 18.11.2022 создаем из прошолго месяца                private BroadcastReceiver МетодИзПроглогоМесяцаСотрудникик(View v) {                    BroadcastReceiver    broadcastReceiverИзПрошлыхМесяцев = null;                    try {                        Log.d(this.getClass().getName(), "  МетодИнициализацииЛокальногоБлокастераv  "+v);                        LocalBroadcastManager       localBroadcastManagerДляЗаполенияТабеляИзПрошлыхПериодов =                                LocalBroadcastManager.getInstance(getApplicationContext());                       broadcastReceiverИзПрошлыхМесяцев = new BroadcastReceiver() {                            @Override                            public void onReceive(Context context, Intent intent) {                                handlerДляList_Peoples.post(()->{                                    Bundle bundle = intent.getExtras();                                    String Статус = bundle.getString("Статус", "");                                    Integer Значения = bundle.getInt("Значения", 0);                                    switch (Статус){                                        case  "ВыходИзВставкиИзПрошлогоМесяца" :                                            ПолученныйПоследнийМесяцДляСортировкиЕгоВСпиноре = bundle.getString("ДепартаментТабеляПослеПодбораBACK", "");                                            Log.d(this.getClass().getName(), "  Статус " + Статус+ " ПолученныйПоследнийМесяцДляСортировкиЕгоВСпиноре "+ПолученныйПоследнийМесяцДляСортировкиЕгоВСпиноре);                                            progressDialog.dismiss();                                            progressDialog.cancel();                                            if (Значения<=0) {                                                Toast toast=     Toast.makeText(context, "Табель не создан (из прошлого месяца) !!!", Toast.LENGTH_LONG);                                                toast.setGravity(Gravity.BOTTOM,0,50);                                                toast.show();                                            }else {                                                Intent ИнтентВставкаДанныхИзПрошлогоМесяца = new Intent();                                                ИнтентВставкаДанныхИзПрошлогоМесяца.setClass(getApplicationContext(), MainActivity_List_Tabels.class); //  ТЕСТ КОД КОТОРЫЙ ЗАПУСКАЕТ ACTIVITY VIEWDATA  ПРОВЕРИТЬ ОБМЕН                                                ИнтентВставкаДанныхИзПрошлогоМесяца.putExtra("ДепартаментТабеляПослеПодбораBACK",ПолученныйПоследнийМесяцДляСортировкиЕгоВСпиноре);                                                Bundle data=new Bundle();                                                data.putBinder("binderМатериалы", binderМатериалы);                                                ИнтентВставкаДанныхИзПрошлогоМесяца.putExtras(data);                                                ИнтентВставкаДанныхИзПрошлогоМесяца.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);                                                Log.d(this.getClass().getName(), "" + "    КнопкаТабельныйУчёт.setOnClickListener(new View.OnClickListener() {");                                                startActivity(ИнтентВставкаДанныхИзПрошлогоМесяца);                                            }                                            break;                                        case  "РезультатДобавенияСотрудникаИзПрошлогоМесяца" :                                            if (Значения>0) {                                                if(!         progressDialog.isShowing()){                                                    progressDialog.show();                                                }                                                progressDialog.setMessage("Добавление сотрудников..."+Значения);                                            }                                            break;                                        default:                                            break;                                    }                                });                                // TODO: 18.11.2022                            }                        };                        IntentFilter intentFilterУстановка = new IntentFilter();                        intentFilterУстановка.addAction("LocalBroadcastВставкаИзПрошлогоМесяцаТабель");                        localBroadcastManagerДляЗаполенияТабеляИзПрошлыхПериодов.registerReceiver(broadcastReceiverИзПрошлыхМесяцев, intentFilterУстановка);                    } catch (Exception e) {                        e.printStackTrace();                        Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                                + Thread.currentThread().getStackTrace()[2].getLineNumber());                        new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                                Thread.currentThread().getStackTrace()[2].getLineNumber());                    }                    return  broadcastReceiverИзПрошлыхМесяцев;                }            });            ///TODO КНОПКА ЗАКРЫТИЕ СООБЩЕНИЯ            КнопкаВыход=DialogBox.findViewById(R.id.textView7Exit);            КнопкаВыход.setPadding(0,0,60,0);            КнопкаВыход.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    try{                        Log.d(this.getClass().getName(), "  Кнопка добавить уже сущетсвующего сотрудника ");                        КнопкаВыход.toggle();                        handlerДляList_Peoples.postDelayed(()->{                            DialogBox.dismiss();                        },1000);                    } catch (Exception e) {                        e.printStackTrace();                        Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                                " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                        new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                                Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());                    }                }            });        } catch (Exception e) {            //  Block of code to handle errors            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                    + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                    Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    //TODO метод получени месяа для записи в одну колонку ОБРАБОТКА ДАТЫ ДЛЯ КУРСОРА НЕ НОВЫЕ ДАННЫЕ А УЖЕ СУЩЕТСВУЮЩИЕ--МЕСЯЦ    private int  МетодПолучениниеКурсораМЕсяцДата(@NotNull String ДатаКоторуюНадоПеревестиИзТекставЦифру) throws ParseException {        Calendar calendar =null;        try{            if (ДатаКоторуюНадоПеревестиИзТекставЦифру!=null) {                String[] ДелимМЕсяцИгод =ДатаКоторуюНадоПеревестиИзТекставЦифру.split(" ");                System.out.println( " " + ДелимМЕсяцИгод [0]);                SimpleDateFormat formatмесяц = new SimpleDateFormat("LLLL  yyyy", new Locale("ru"));                Date date = formatмесяц.parse(ДатаКоторуюНадоПеревестиИзТекставЦифру.trim());                calendar = Calendar.getInstance(new Locale("ru"));                calendar.setTime(date);                System.out.println(calendar.get(Calendar.YEAR));                System.out.println(calendar.get(Calendar.MONTH)+1);                System.out.println(calendar.get(Calendar.DAY_OF_MONTH));                System.out.println(new SimpleDateFormat("MMMM").format(calendar.getTime()));            }        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),                    this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }        return   calendar.get(Calendar.MONTH)+1;    }    //TODO метод получени месяа для записи в одну колонку ОБРАБОТКА ДАТЫ ДЛЯ КУРСОРА НЕ НОВЫЕ ДАННЫЕ А УЖЕ СУЩЕТСВУЮЩИЕ--ГОД    private int  МетодПолучениниеКурсораГОДДата(String ДатаКоторуюНадоПеревестиИзТекставЦифру) throws ParseException {        Calendar calendar =null;        try{            String[] ДелимМЕсяцИгод =ДатаКоторуюНадоПеревестиИзТекставЦифру.split(" ");            System.out.println( " " + ДелимМЕсяцИгод [1]);            SimpleDateFormat formatгод = new SimpleDateFormat("LLLL  yyyy");            Date date = formatгод.parse(ДатаКоторуюНадоПеревестиИзТекставЦифру.trim());            calendar = Calendar.getInstance(new Locale("ru"));            calendar.setTime(date);            System.out.println(calendar.get(Calendar.YEAR));            System.out.println(calendar.get(Calendar.MONTH)+1);            System.out.println(calendar.get(Calendar.DAY_OF_MONTH));            System.out.println(new SimpleDateFormat("yyyy").format(calendar.getTime()));        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),                    this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }        return   calendar.get(Calendar.YEAR);    }    //TODO  конец метод получени месяа для записи в одну колонку ОБРАБОТКА ДАТЫ ДЛЯ КУРСОРА НЕ НОВЫЕ ДАННЫЕ А УЖЕ СУЩЕТСВУЮЩИЕ--МЕСЯЦ    ////todo метод полчение огранизации при запуске программы    Long МетодПолучениеОрганизацииНепосрдственодляДанногоСОтрудника() throws InterruptedException, ExecutionException, TimeoutException {        ///////        Long названиеорганизациидлясотркдника=0l;        try{////TODO КУРСОР ПРОВЕЯЕТ ПЕРВЫЙ ЭТО ЗАПУСК ИЛИ НЕТ            SQLiteCursor Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего = null;            ////////            try {               /*         Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего =                                new Class_MODEL_synchronized(getApplicationContext()).КурсорУниверсальныйДляБазыДанных("settings_tabels",                                        new String[]{"organizations"}, "organizations IS NOT NULL", null,                                        null, null, "date_update DESC", "1");//"settings_tabels", "date_update","id=","1",null,null,null,null*/                // TODO: 26.08.2021 НОВЫЙ ВЫЗОВ НОВОГО КЛАСС GRUD - ОПЕРАЦИИ                Class_GRUD_SQL_Operations class_grud_sql_operationsОрганизацииНепосрдственодляДанногоСОтрудника;                class_grud_sql_operationsОрганизацииНепосрдственодляДанногоСОтрудника=new Class_GRUD_SQL_Operations(getApplicationContext());                ///                class_grud_sql_operationsОрганизацииНепосрдственодляДанногоСОтрудника. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("НазваниеОбрабоатываемойТаблицы",                        "settings_tabels");                ///////                class_grud_sql_operationsОрганизацииНепосрдственодляДанногоСОтрудника. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("СтолбцыОбработки","organizations");                //                class_grud_sql_operationsОрганизацииНепосрдственодляДанногоСОтрудника. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ФорматПосика","organizations IS NOT NULL ");                ///"_id > ?   AND _id< ?"                //////                  /*      class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска1",МЕсяцВвидеЦифрыДляКурсора);                        ///                        class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска2",ГОДВвидеЦифрыДляКурсора);                        //                     ///   class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска3","Удаленная");////УсловиеПоискаv4,........УсловиеПоискаv5 .......                        ////TODO другие поля*/                ///classGrudSqlOperations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ПоляГрупировки",null);                ////                //class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеГрупировки",null);                ////                class_grud_sql_operationsОрганизацииНепосрдственодляДанногоСОтрудника. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеСортировки","date_update");                ////                class_grud_sql_operationsОрганизацииНепосрдственодляДанногоСОтрудника. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеЛимита","1");                ////                // TODO: 12.10.2021  Ссылка Менеджер Потоков                PUBLIC_CONTENT  Class_Engine_SQLГдеНаходитьсяМенеджерПотоков =new PUBLIC_CONTENT (getApplicationContext());                // TODO: 27.08.2021  ПОЛУЧЕНИЕ ДАННЫХ ОТ КЛАССА GRUD-ОПЕРАЦИИ                Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего= (SQLiteCursor)  class_grud_sql_operationsОрганизацииНепосрдственодляДанногоСОтрудника.                        new GetData(getApplicationContext()).getdata(class_grud_sql_operationsОрганизацииНепосрдственодляДанногоСОтрудника. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций,                        Class_Engine_SQLГдеНаходитьсяМенеджерПотоков.МенеджерПотоков,Create_Database_СсылкаНАБазовыйКласс.getССылкаНаСозданнуюБазу());                ///////                Log.d(this.getClass().getName(), "GetData "+Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего  );            } catch (Exception e) {                //  Block of code to handle errors                e.printStackTrace();                ///метод запись ошибок в таблицу                Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                        + Thread.currentThread().getStackTrace()[2].getLineNumber());                new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                        Thread.currentThread().getStackTrace()[2].getLineNumber());            }            ///TODO УДАЛЕМ ПАМЯТЬ            if (Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего.getCount() > 0) { //TODO ЕСЛИ ДАННЫЙ UUID НЕ ПУСТОЙ ЭТО ЗНАЧИТ ЧТО ЭТОТ ТАБЕЛЬ УЖЕ СУЩЕТСВЕТ И НАМ НАДО ОБНОВИТЬ                ////TODO ТАБЕЛЬ УЖЕ ЕСТЬ И МЫ ЕГО ОБНОЫЛЕНИЯ ПубличноеИмяНовогоТабеля                //todo определяем есть uuid в строчке или нет                Log.d(this.getClass().getName(), "Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего  " +                        Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего.getCount());                Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего.moveToFirst();                Log.d(this.getClass().getName(), " Курсор_ПонятьМыВставляемВПУстойТабельСотрудникаИЛиОбновлеемЕго.getString(1) " +                        Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего.getString(0));                названиеорганизациидлясотркдника= Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего.getLong(0);            }            ///todo вырубаем курсор            Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего.close();            ///        } catch (Exception e) {            //  Block of code to handle errors            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                    + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                    Thread.currentThread().getStackTrace()[2].getLineNumber());        }        return  названиеорганизациидлясотркдника;    }/*    for (String key : hashmap.keySet())    {        for (list : hashmap.get(key))        {            //list.toString()        }    }*/    //TODO Метод ПОДЧСЧЕТА ЧАСОВ ПО ВСЕМ ТАБЕЛЯМ СРАЗУ    private String МетодДосчётаЧасовПоВсемТабелямДляНовыхиВыбранныхСотрудников(Long finalПолученныйUUID,                                                                               Context КонтекстДЛляПодсчетаЧасовПоВсемТабелям, Class_GRUD_SQL_Operations class_grud_sql_operationsДосчётаЧасовПоВсемТабелямДляНовыхиВыбранныхСотрудников)            throws InterruptedException, ExecutionException {        ///        String     ПолученыеСуммаЧасовСотрудникаВнутри=null; //TODO РЕзультат        ////// TODO: 07.05.2021 главный курсор заргузки сотрудников в табель        try {            //TODO вытастиваем непостредственный табель для которго и нужно посчитать часы            // TODO: 26.08.2021 НОВЫЙ ВЫЗОВ НОВОГО КЛАСС GRUD - ОПЕРАЦИИ            class_grud_sql_operationsДосчётаЧасовПоВсемТабелямДляНовыхиВыбранныхСотрудников=new Class_GRUD_SQL_Operations(getApplicationContext());            ///            class_grud_sql_operationsДосчётаЧасовПоВсемТабелямДляНовыхиВыбранныхСотрудников. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("НазваниеОбрабоатываемойТаблицы","viewtabel");//data_tabels            ///////            class_grud_sql_operationsДосчётаЧасовПоВсемТабелямДляНовыхиВыбранныхСотрудников. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("СтолбцыОбработки","*");            //            class_grud_sql_operationsДосчётаЧасовПоВсемТабелямДляНовыхиВыбранныхСотрудников.                    concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ФорматПосика",                            "uuid=?   " +                                    " AND status_send !=? " +                                    "AND month_tabels=? " +                                    "AND  year_tabels =? " +                                    "AND fio IS NOT NULL ");            ///"_id > ?   AND _id< ?"            //////            class_grud_sql_operationsДосчётаЧасовПоВсемТабелямДляНовыхиВыбранныхСотрудников. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска1",finalПолученныйUUID);            ///            class_grud_sql_operationsДосчётаЧасовПоВсемТабелямДляНовыхиВыбранныхСотрудников. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска2","Удаленная");            ///            class_grud_sql_operationsДосчётаЧасовПоВсемТабелямДляНовыхиВыбранныхСотрудников. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска3",МЕсяцДляКурсораТабелей);            //            class_grud_sql_operationsДосчётаЧасовПоВсемТабелямДляНовыхиВыбранныхСотрудников. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска4",ГодДляКурсораТабелей);////УсловиеПоискаv4,........УсловиеПоискаv5 .......            ////TODO другие поля            ///classGrudSqlOperations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ПоляГрупировки",null);            ////            //class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеГрупировки",null);            ////            class_grud_sql_operationsДосчётаЧасовПоВсемТабелямДляНовыхиВыбранныхСотрудников. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеСортировки","date_update");//DESC            ////            class_grud_sql_operationsДосчётаЧасовПоВсемТабелямДляНовыхиВыбранныхСотрудников. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеЛимита","1");            ////            // TODO: 12.10.2021  Ссылка Менеджер Потоков            PUBLIC_CONTENT  Class_Engine_SQLГдеНаходитьсяМенеджерПотоков =new PUBLIC_CONTENT (getApplicationContext());            // TODO: 27.08.2021  ПОЛУЧЕНИЕ ДАННЫХ ОТ КЛАССА GRUD-ОПЕРАЦИИ            /////////            SQLiteCursor Курсор_ЗагружаемТабеляДляПодсчетаЧасовПовсемТАбелям = null;            //////            Курсор_ЗагружаемТабеляДляПодсчетаЧасовПовсемТАбелям= (SQLiteCursor)  class_grud_sql_operationsДосчётаЧасовПоВсемТабелямДляНовыхиВыбранныхСотрудников.                    new GetData(getApplicationContext()).getdata(class_grud_sql_operationsДосчётаЧасовПоВсемТабелямДляНовыхиВыбранныхСотрудников.                            concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций,                    Class_Engine_SQLГдеНаходитьсяМенеджерПотоков.МенеджерПотоков,Create_Database_СсылкаНАБазовыйКласс.getССылкаНаСозданнуюБазу());            ///////////            Log.d(this.getClass().getName(), "GetData " +Курсор_ЗагружаемТабеляДляПодсчетаЧасовПовсемТАбелям );            // TODO: 03.09.2021            if (Курсор_ЗагружаемТабеляДляПодсчетаЧасовПовсемТАбелям.getCount() > 0) {                ///                Курсор_ЗагружаемТабеляДляПодсчетаЧасовПовсемТАбелям.moveToFirst();                //TODO Считаем Сумму часов по всем табелям                ПолученыеСуммаЧасовСотрудникаВнутри = String.valueOf(МетодПосчётаЧасовПоСотрудникуДляЗагрузкиСотрудников(Курсор_ЗагружаемТабеляДляПодсчетаЧасовПовсемТАбелям));            }            Log.d(this.getClass().getName(), "ПолученыеСуммаЧасовСотрудникаВнутри " +ПолученыеСуммаЧасовСотрудникаВнутри );            //TODO            Курсор_ЗагружаемТабеляДляПодсчетаЧасовПовсемТАбелям.close();        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }        return ПолученыеСуммаЧасовСотрудникаВнутри;    }    ////////////////////    protected int МетодПосчётаЧасовПоСотрудникуДляЗагрузкиСотрудников(Cursor курсор_ЗагружаемТабеляСозданный) {        int СуммаЧасов = 0;        try{            if (курсор_ЗагружаемТабеляСозданный.getCount() > 0) {                //////                курсор_ЗагружаемТабеляСозданный.moveToFirst();            }            do {                for (int ИндексДляИзмененияДней = 1; ИндексДляИзмененияДней < 32; ИндексДляИзмененияДней++) {                    //TODO d -это в данном курсоре это день без цифры пока , d1,d2,d3                    int ИндексЧассыСотрудника = курсор_ЗагружаемТабеляСозданный.getColumnIndex("d" + ИндексДляИзмененияДней);                    int ЧассыСотрудника = курсор_ЗагружаемТабеляСозданный.getInt(ИндексЧассыСотрудника);                    СуммаЧасов = СуммаЧасов + ЧассыСотрудника;                    Log.d(this.getClass().getName(), "    СуммаЧасов " + СуммаЧасов);                }///TODO END FOR  ПО СТОЛБЦАМ БЕЖИМ            } while (курсор_ЗагружаемТабеляСозданный.moveToNext());            ////TODO ПРИСВАИВАЕМ ПОЛУЧЕННЫЕ ЧАСЫ ИЗ БАЗЫ УЖЕ ПЕРЕДЕМ ЕЕ НА АКТИВТИ            ////todo и ставим курсор на место на первое            курсор_ЗагружаемТабеляСозданный.close();            //        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }        return СуммаЧасов;    }    void МетодСообщенииУдалениеСотрудника(String ДляУдалениеUUID,String СамИндификаторUUID,String ФИОДляУдаление) {        Boolean ФлагВыясняемПроведенныйТабельИлиНет = false;        SQLiteCursor Курсор_ИщемПроведенЛиТАбельИлиНЕт = null;        try {            // TODO: 03.09.2021  новый стьль работы через новый движок            // TODO: 26.08.2021 НОВЫЙ ВЫЗОВ НОВОГО КЛАСС GRUD - ОПЕРАЦИИ            Class_GRUD_SQL_Operations class_grud_sql_operationsСообщенииУдалениеСотрудникаВычисляемСтатусСотрудникаСтрочкиПроведенИлИНЕТ;            //            class_grud_sql_operationsСообщенииУдалениеСотрудникаВычисляемСтатусСотрудникаСтрочкиПроведенИлИНЕТ=new Class_GRUD_SQL_Operations(getApplicationContext());            ///            class_grud_sql_operationsСообщенииУдалениеСотрудникаВычисляемСтатусСотрудникаСтрочкиПроведенИлИНЕТ.                    concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("НазваниеОбрабоатываемойТаблицы","viewtabel");//data_tabels            ///////            class_grud_sql_operationsСообщенииУдалениеСотрудникаВычисляемСтатусСотрудникаСтрочкиПроведенИлИНЕТ.                    concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("СтолбцыОбработки","*");            //            class_grud_sql_operationsСообщенииУдалениеСотрудникаВычисляемСтатусСотрудникаСтрочкиПроведенИлИНЕТ.                    concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ФорматПосика","uuid=? ");            ///"_id > ?   AND _id< ?"            //////            class_grud_sql_operationsСообщенииУдалениеСотрудникаВычисляемСтатусСотрудникаСтрочкиПроведенИлИНЕТ.                    concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска1",СамИндификаторUUID);            ////*        class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска2","Удаленная");        ///        class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска3",МЕсяцДляКурсораТабелей);        //        class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска4",ГодДляКурсораТабелей);////УсловиеПоискаv4,........УсловиеПоискаv5 .......*/            ////TODO другие поля            ///classGrudSqlOperations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ПоляГрупировки",null);            ////            //class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеГрупировки",null);            ////            class_grud_sql_operationsСообщенииУдалениеСотрудникаВычисляемСтатусСотрудникаСтрочкиПроведенИлИНЕТ.                    concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеСортировки","date_update");//DESC            ////            class_grud_sql_operationsСообщенииУдалениеСотрудникаВычисляемСтатусСотрудникаСтрочкиПроведенИлИНЕТ.                    concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеЛимита","1");            ////            // TODO: 12.10.2021  Ссылка Менеджер Потоков            PUBLIC_CONTENT  Class_Engine_SQLГдеНаходитьсяМенеджерПотоков =new PUBLIC_CONTENT (getApplicationContext());            // TODO: 27.08.2021  ПОЛУЧЕНИЕ ДАННЫХ ОТ КЛАССА GRUD-ОПЕРАЦИИ            Курсор_ИщемПроведенЛиТАбельИлиНЕт=null;            Курсор_ИщемПроведенЛиТАбельИлиНЕт= (SQLiteCursor)  class_grud_sql_operationsСообщенииУдалениеСотрудникаВычисляемСтатусСотрудникаСтрочкиПроведенИлИНЕТ.                    new GetData(getApplicationContext()).getdata(class_grud_sql_operationsСообщенииУдалениеСотрудникаВычисляемСтатусСотрудникаСтрочкиПроведенИлИНЕТ.                            concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций,                    Class_Engine_SQLГдеНаходитьсяМенеджерПотоков.МенеджерПотоков,Create_Database_СсылкаНАБазовыйКласс.getССылкаНаСозданнуюБазу());            Log.d(this.getClass().getName(), "GetData " +Курсор_ИщемПроведенЛиТАбельИлиНЕт );            /////////            if(Курсор_ИщемПроведенЛиТАбельИлиНЕт.getCount()>0){                Курсор_ИщемПроведенЛиТАбельИлиНЕт.moveToFirst();                Log.d(this.getClass().getName(), " Курсор_ИщемПУбличныйIDКогдаегоНетВстатике " + Курсор_ИщемПроведенЛиТАбельИлиНЕт.getCount());                int ИндексКурсор_ИщемПУбличныйIDКогдаегоНетВстатике= Курсор_ИщемПроведенЛиТАбельИлиНЕт.getColumnIndex("status_carried_out");                ФлагВыясняемПроведенныйТабельИлиНет = Boolean.parseBoolean( Курсор_ИщемПроведенЛиТАбельИлиНЕт.getString(ИндексКурсор_ИщемПУбличныйIDКогдаегоНетВстатике));                Log.d(this.getClass().getName(), " ФлагВыясняемПроведенныйТабельИлиНет " + ФлагВыясняемПроведенныйТабельИлиНет);            }            // TODO: 03.09.2021 поле            if (ФлагВыясняемПроведенныйТабельИлиНет==false) {                Log.d(this.getClass().getName(), "  ФИНАЛ создание нового сотрудника ");                СообщениеВыборУдлаляниИлиНЕтСотрудникаИзБазы("Удаление сотрудника",                        "Удалить выбраного сотрудника ?: "+"\n"+"\n"  + ФИОДляУдаление+                                " из текущего Табеля. "                        ,ДляУдалениеUUID,                        СамИндификаторUUID,                        true,ФИОДляУдаление)  ;            }else{                Toast.makeText(getApplicationContext(), "Табель выбраного сотрудника проведен !!!!", Toast.LENGTH_LONG).show();            }        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                    + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                    Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    ///todo сообщение    @UiThread    protected void СообщениеВыборУдлаляниИлиНЕтСотрудникаИзБазы(String ШабкаДиалога,  String СообщениеДиалога,  String UUID,                                                                String СамоЗначениеUUID,boolean статус,String ФИОУдаляемого ) {        ///////СОЗДАЕМ ДИАЛОГ ДА ИЛИ НЕТ///////СОЗДАЕМ ДИАЛОГ ДА ИЛИ НЕТ        try {//////сам вид            final AlertDialog alertDialog = new MaterialAlertDialogBuilder(this)                    .setTitle(ШабкаДиалога)                    .setMessage(СообщениеДиалога)                    .setPositiveButton("Да", null)                    .setNegativeButton("Нет", null)                    .setIcon(R.drawable.icon_dsu1_delete_customer)                    .show();/////////кнопка            final Button MessageBoxУдалениеСотрудникаИзТабеля = alertDialog.getButton(AlertDialog.BUTTON_POSITIVE);            MessageBoxУдалениеСотрудникаИзТабеля .setOnClickListener(new View.OnClickListener() {                ///MessageBoxUpdate метод CLICK для DIALOBOX                @Override                public void onClick(View v) {                    //удаляем с экрана Диалог                    alertDialog.dismiss();                    Log.d(this.getClass().getName(), "  ФИНАЛ создание нового сотрудника " + " UUID " +UUID+ " СамоЗначениеUUID " + СамоЗначениеUUID);                    Log.d(this.getClass().getName(), "При удалении сотрудника СамоЗначениеUUID " +СамоЗначениеUUID+ " UUID  " +UUID);                    Long РезультатУдалениеКонкертногоСотрудникаИзТабеля=           МетодУдалениеСотрудникаИзТабеля(UUID,СамоЗначениеUUID,ФИОУдаляемого); //// TODO передаеюм UUID для Удалание                    Log.d(this.getClass().getName(), "При удалении сотрудника СамоЗначениеUUID "                            +СамоЗначениеUUID+ " UUID  "                            +UUID + "  РезультатУдалениеКонкертногоСотрудникаИзТабеля " +РезультатУдалениеКонкертногоСотрудникаИзТабеля);                }            });            /////////кнопка            final Button MessageBoxУдалениеСотрудникаИзТабеляОтмена = alertDialog.getButton(AlertDialog.BUTTON_NEGATIVE);            MessageBoxУдалениеСотрудникаИзТабеляОтмена.setOnClickListener(new View.OnClickListener() {                ///MessageBoxUpdate метод CLICK для DIALOBOX                @Override                public void onClick(View v) {                    //удаляем с экрана Диалог                    alertDialog.dismiss();                }            });        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                    + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                    Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    //todo метод удаление сотрудника из табеля    private Long МетодУдалениеСотрудникаИзТабеля(String ДляУдалениеUUID,String СамоЗначениеUUID,String ФИОДляУдаление) {        final long[] РезультатУдалениеСотрудникаИзТаблея = {0};        try{            Log.d(this.getClass().getName()," СамоЗначениеUUID "+СамоЗначениеUUID+ " ДляУдалениеUUID " +ДляУдалениеUUID);            ///TODO ЗАПУСКАЕМ  ПуллПамяти            ////TODO ЗАПУСКАЕМ  МеханизмУправлениеПотокамиОграничеваемИхУжеСозданными            String finalСамоЗначениеUUID = СамоЗначениеUUID;            String finalДляУдалениеUUID = ДляУдалениеUUID;            String ТаблицыДляОбработкиУдалние="data_tabels";            ProgressDialog progressDialogДляудалениеОдногоотрудника=new ProgressDialog(this);            progressDialogДляудалениеОдногоотрудника.setIndeterminate(true);            progressDialogДляудалениеОдногоотрудника.setTitle("Удаление сотрудника");            progressDialogДляудалениеОдногоотрудника.setMessage("Удаление...");            progressDialogДляудалениеОдногоотрудника.setProgressStyle(ProgressDialog.STYLE_SPINNER);            progressDialogДляудалениеОдногоотрудника.setCanceledOnTouchOutside(false);            progressDialogДляудалениеОдногоотрудника.setCancelable(false);            progressDialogДляудалениеОдногоотрудника.show();            // TODO: 12.10.2021  Ссылка Менеджер Потоков            Completable completableУдалениеСотрудникаИзЛистаТАбедя=Completable.fromAction(new Action() {                        @Override                        public void run() throws Throwable {                            // TODO: 10.08.2022                            activity.runOnUiThread(new Runnable() {                                @Override                                public void run() {                                    progressDialogДляудалениеОдногоотрудника.setMessage("Удаление..."+ФИОДляУдаление);                                }                            });                            // TODO: 18.03.2023  получаем ВЕСИЮ ДАННЫХ                            Long РезультатУвеличинаяВерсияВнутриСамогоТабелСтрудника =                                    new SubClassUpVersionDATA().МетодПовышаемВерсииCurrentTable(   ТаблицыДляОбработкиУдалние,getApplicationContext(), Create_Database_СсылкаНАБазовыйКласс.getССылкаНаСозданнуюБазу());                            Log.d(this.getClass().getName(), " РезультатУвеличинаяВерсияВнутриСамогоТабелСтрудника  " + РезультатУвеличинаяВерсияВнутриСамогоТабелСтрудника);                            Log.w(this.getClass().getName(),   "РЕЗУЛЬТАТ УДАЛДЕНИЕ ОДНОГО СОТРУДНИКА РезультатУвеличинаяВерсияВнутриСамогоТабелСтрудника  "                                    + РезультатУвеличинаяВерсияВнутриСамогоТабелСтрудника);                            /////                            РезультатУдалениеСотрудникаИзТаблея[0] = new Class_MODEL_synchronized(getApplicationContext()).                                    УдалениеДанныхЧерезКонтейнерУниверсальная(ТаблицыДляОбработкиУдалние,                                            finalДляУдалениеUUID,                                            finalСамоЗначениеUUID, "status_send", "Удаленная");                            Log.e(this.getClass().getName(),   "РЕЗУЛЬТАТ УДАЛДЕНИЕ ОДНОГО СОТРУДНИКА  РезультатУдалениеСотрудникаИзТаблея[0] "                                    + РезультатУдалениеСотрудникаИзТаблея[0]);                            // TODO: 18.05.2021 успешное удалени сотрудника                            if (РезультатУдалениеСотрудникаИзТаблея[0] > 0) {                                ///todo ДАННЫЙ КОД ИЗМЕНЯЕТ ВЕРИСЮ ДАННЫХ                                Thread.sleep(1000);                                Log.d(getApplicationContext().getClass().getName(), "РезультатУвеличинаяВерсияВнутриСамогоТабелСтрудника "                                        +РезультатУвеличинаяВерсияВнутриСамогоТабелСтрудника );                                ///ПослеУспешнойОперациии записать в табблицу версии данных на клиенте                                // TODO: 03.09.2021  получение ПО НОВОМУ ДВИЖКУ                                Class_GRUD_SQL_Operations  classGrudSqlOperationsУдалениеСотрудникаИзТаблея;                                classGrudSqlOperationsУдалениеСотрудникаИзТаблея=new Class_GRUD_SQL_Operations(getApplicationContext());                                classGrudSqlOperationsУдалениеСотрудникаИзТаблея.                                        concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("НазваниеОбрабоатываемойТаблицы",ТаблицыДляОбработкиУдалние);                                classGrudSqlOperationsУдалениеСотрудникаИзТаблея.                                        concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ФлагТипИзменениеВерсииДанныхЛокальнаяСервернаяИлиОба","Локальное");//Локальное  //  Серверный  // ЛокальныйСерверныйОба                                // TODO: 01.07.2021  после локальной обнолвения поробуем вотрунть синхронизацию локальную  в фоне и порстмортрим что будет                                Log.w(this.getClass().getName(),   "РЕЗУЛЬТАТ УДАЛДЕНИЕ ОДНОГО СОТРУДНИКА РезультатУвеличинаяВерсияВнутриСамогоТабелСтрудника  "                                        + РезультатУвеличинаяВерсияВнутриСамогоТабелСтрудника);                                ///                                classGrudSqlOperationsУдалениеСотрудникаИзТаблея.                                        concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put(" " +                                                "ПередоваемоеЗначенияДляТаблицы_MODIFITATION_Client_КотороеНадоЗаписать",РезультатУвеличинаяВерсияВнутриСамогоТабелСтрудника);///  "ЛокальныйСерверныйОба"    ПОСЛЕ КАК ПРИШЛИ ВНЕШНИЕ ДАННЫЕ                                ///                                ///TODOРЕЗУЛЬТА изменения версии данных                                Integer        Результат_ПриписиИзменнийВерсииДанных=                                        (Integer)  classGrudSqlOperationsУдалениеСотрудникаИзТаблея.                                                new ChangesVesionData(getApplicationContext()).                                                changesvesiondata(classGrudSqlOperationsУдалениеСотрудникаИзТаблея.                                                                concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций,                                                        new PUBLIC_CONTENT(getApplicationContext()).МенеджерПотоков                                                        ,Create_Database_СсылкаНАБазовыйКласс.getССылкаНаСозданнуюБазу());//                                Log.d(getApplicationContext().getClass().getName(), "Результат_ПриписиИзменнийВерсииДанныхВФонеПриСменеОрганизации "                                        +Результат_ПриписиИзменнийВерсииДанных );                                Log.d(this.getClass().getName(), "Результат_ПриписиИзменнийВерсииДанных " +Результат_ПриписиИзменнийВерсииДанных );                                if(Результат_ПриписиИзменнийВерсииДанных==null){                                    Результат_ПриписиИзменнийВерсииДанных=0;                                }                                Log.w(this.getClass().getName(), "Результат_ПриписиИзменнийВерсииДанных" + Результат_ПриписиИзменнийВерсииДанных);                            }                        }                    })                    .subscribeOn(Schedulers.single())                    .observeOn(AndroidSchedulers.mainThread())                    .doOnComplete(new Action() {                        @Override                        public void run() throws Throwable {                            //TODO ЗАПУСКАЕМ ФУТУРЕ                            activity.runOnUiThread(new Runnable() {                                @Override                                public void run() {                                    // TODO: 30.01.2022 Сообщеам Observer что изменилибьс данные в адаптере AdapterCursor                                    onStart();                                    onResume();                                    Курсор_ВсеСотрудникиТабеля.deactivate();                                    Курсор_ВсеСотрудникиТабеля.requery();                                    Log.w(this.getClass().getName(), "  Курсор_ВсеСотрудникиТабеля " + Курсор_ВсеСотрудникиТабеля);                                    Log.d(this.getClass().getName()," РезультатУдалениеСотрудникаИзТаблея "+ РезультатУдалениеСотрудникаИзТаблея[0]);                                    ///TODO СООБЩЕНИЕ О РЕЗУЛЬТАТОВ                                }                            });                        }                    })                    .onErrorComplete(new Predicate<Throwable>() {                        @Override                        public boolean test(Throwable throwable) throws Throwable {                            Log.e(this.getClass().getName(), "Результат_ПриписиИзменнийВерсииДанных throwable " + throwable.getMessage().toString());                            return false;                        }                    })                    .doAfterTerminate(new Action() {                        @Override                        public void run() throws Throwable {                            //TODO ЗАПУСКАЕМ ФУТУРЕ                            activity.runOnUiThread(new Runnable() {                                @Override                                public void run() {                                    // TODO: 30.01.2022 Сообщеам Observer что изменилибьс данные в адаптере AdapterCursor                                    Log.w(this.getClass().getName(), "  Курсор_ВсеСотрудникиТабеля " + Курсор_ВсеСотрудникиТабеля);                                    Log.d(this.getClass().getName()," РезультатУдалениеСотрудникаИзТаблея "+ РезультатУдалениеСотрудникаИзТаблея[0]);                                    ///TODO СООБЩЕНИЕ О РЕЗУЛЬТАТОВ                                    if (РезультатУдалениеСотрудникаИзТаблея[0] >0){                                        ЛистДляВсеСотурдникаТекущегоТабеля.deferNotifyDataSetChanged();                                        ЛистДляВсеСотурдникаТекущегоТабеля.forceLayout();                                        СпинерТАбельМЕсяцФинал .forceLayout();                                        СпинерТАбельДепартаментФинал .forceLayout();                                    }else{                                        СообщениеПослеУдаленияСотрудникаИзТабеля("Оповещение",  "Операция удаление сотрудника не прошла ",false);                                    }                                    progressDialogДляудалениеОдногоотрудника.dismiss();                                    progressDialogДляудалениеОдногоотрудника.cancel();                                }                            });                        }                    });            completableУдалениеСотрудникаИзЛистаТАбедя.subscribe();            Log.w(this.getClass().getName(), "РезультатУдалениеСотрудникаИзТаблея[0] РЕЗУЛЬТАТ УДАЛЕНИЯ ТАБЕЛЯ " + РезультатУдалениеСотрудникаИзТаблея[0]);            //////////        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }        return    РезультатУдалениеСотрудникаИзТаблея[0];    }    ///todo  конец метода удаления третий обработчки нажатия    ///todo сообщение    @UiThread    protected void СообщениеПослеУдаленияСотрудникаИзТабеля(String ШабкаДиалога,  String СообщениеДиалога,boolean Статус) {        ///////СОЗДАЕМ ДИАЛОГ ДА ИЛИ НЕТ///////СОЗДАЕМ ДИАЛОГ ДА ИЛИ НЕТ//////сам вид        int Значек;        if (Статус){            Значек  =R.drawable.icon_dsu1_tabel_info;        }else{            Значек  =R.drawable.icon_dsu1_delete_customer;        }        final AlertDialog alertDialog = new MaterialAlertDialogBuilder(this)                .setTitle(ШабкаДиалога)                .setMessage(СообщениеДиалога)                .setPositiveButton("ОК", null)                .setIcon(Значек)                .show();/////////кнопка        final Button MessageBoxUpdateСоздатьТабель = alertDialog.getButton(AlertDialog.BUTTON_POSITIVE);        MessageBoxUpdateСоздатьТабель.setOnClickListener(new View.OnClickListener() {            ///MessageBoxUpdate метод CLICK для DIALOBOX            @Override            public void onClick(View v) {                //удаляем с экрана Диалог                alertDialog.dismiss();                Log.d(this.getClass().getName(), "  ФИНАЛ после удалание сотрудуника ");                //TODO  второе действие заполенние контентом  в табеля в TableLyзаполения табеля из базы через элемент TableLauy                ///// МетодЗаполненияАлайЛИстаНовымМЕсцевНовогоТабеля( МесяцТабеляФинал);                ///TODO запускаем возврат на предыдущее активывти после успешного удаление сотрудника                ///МетодЗапускаетСотрудниковПослеУспешногоУдалениеСотрудника();                //todo            }        });    }    public void МетодБиндингМатериалы() {        try {              serviceConnectionМатериалы = new ServiceConnection() {                @Override                public void onServiceConnected(ComponentName name, IBinder service) {                    try {                        binderМатериалы = (Service_for_AdminissionMaterial.LocalBinderДляПолучениеМатериалов) service;                        if (service.isBinderAlive()) {                            Log.d(getApplicationContext().getClass().getName(), "\n"                                    + " время: " + new Date() + "\n+" +                                    " Класс в процессе... " + this.getClass().getName() + "\n" +                                    " onServiceConnected  метод в процессе... " + Thread.currentThread().getStackTrace()[2].getMethodName()                                    + "    onServiceDisconnected  Service_for_AdminissionMaterial" + " binderСогласованияbinderМатериалы.isBinderAlive() "                                    + service.isBinderAlive());                            ;                        }                    } catch (Exception e) {                        e.printStackTrace();                        Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                                + Thread.currentThread().getStackTrace()[2].getLineNumber());                        new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                                Thread.currentThread().getStackTrace()[2].getLineNumber());                        // TODO: 11.05.2021 запись ошибок                    }                }                @Override                public void onServiceDisconnected(ComponentName name) {                    try {                        Log.d(getApplicationContext().getClass().getName(), "\n"                                + " время: " + new Date() + "\n+" +                                " Класс в процессе... " + this.getClass().getName() + "\n" +                                "  onServiceDisconnected метод в процессе... " + Thread.currentThread().getStackTrace()[2].getMethodName()                                + "    onServiceDisconnected  bibinderСогласованияbinderМатериалыnder" + binderМатериалы);                        binderМатериалы = null;                    } catch (Exception e) {                        e.printStackTrace();                        Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                                + Thread.currentThread().getStackTrace()[2].getLineNumber());                        new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                                Thread.currentThread().getStackTrace()[2].getLineNumber());                        // TODO: 11.05.2021 запись ошибок                    }                }            };            Intent intentЗапускСлужюыыСинхрониазцииБиндинг = new Intent(getApplicationContext(), Service_for_AdminissionMaterial.class);            intentЗапускСлужюыыСинхрониазцииБиндинг.setAction("com.Service_for_AdminissionMaterial");            bindService(intentЗапускСлужюыыСинхрониазцииБиндинг, serviceConnectionМатериалы,Context.BIND_AUTO_CREATE);        } catch (Exception e) {            e.printStackTrace();            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                    + Thread.currentThread().getStackTrace()[2].getLineNumber());            new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                    Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }}